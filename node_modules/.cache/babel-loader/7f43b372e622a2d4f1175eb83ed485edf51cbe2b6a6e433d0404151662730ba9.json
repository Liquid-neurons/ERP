{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFDocument_1 = tslib_1.__importDefault(require(\"./PDFDocument\"));\nvar core_1 = require(\"../core\");\nvar utils_1 = require(\"../utils\");\n/**\n * Represents an image that has been embedded in a [[PDFDocument]].\n */\nvar PDFImage = /** @class */function () {\n  function PDFImage(ref, doc, embedder) {\n    utils_1.assertIs(ref, 'ref', [[core_1.PDFRef, 'PDFRef']]);\n    utils_1.assertIs(doc, 'doc', [[PDFDocument_1.default, 'PDFDocument']]);\n    utils_1.assertIs(embedder, 'embedder', [[core_1.JpegEmbedder, 'JpegEmbedder'], [core_1.PngEmbedder, 'PngEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\n   * Compute the width and height of this image after being scaled by the\n   * given `factor`. For example:\n   * ```js\n   * image.width  // => 500\n   * image.height // => 250\n   *\n   * const scaled = image.scale(0.5)\n   * scaled.width  // => 250\n   * scaled.height // => 125\n   * ```\n   * This operation is often useful before drawing an image with\n   * [[PDFPage.drawImage]] to compute the `width` and `height` options.\n   * @param factor The factor by which this image should be scaled.\n   * @returns The width and height of the image after being scaled.\n   */\n  PDFImage.prototype.scale = function (factor) {\n    utils_1.assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\n   * Get the width and height of this image after scaling it as large as\n   * possible while maintaining its aspect ratio and not exceeding the\n   * specified `width` and `height`. For example:\n   * ```\n   * image.width  // => 500\n   * image.height // => 250\n   *\n   * const scaled = image.scaleToFit(750, 1000)\n   * scaled.width  // => 750\n   * scaled.height // => 375\n   * ```\n   * The `width` and `height` parameters can also be thought of as the width\n   * and height of a box that the scaled image must fit within.\n   * @param width The bounding box's width.\n   * @param height The bounding box's height.\n   * @returns The width and height of the image after being scaled.\n   */\n  PDFImage.prototype.scaleToFit = function (width, height) {\n    utils_1.assertIs(width, 'width', ['number']);\n    utils_1.assertIs(height, 'height', ['number']);\n    var imgWidthScale = width / this.width;\n    var imgHeightScale = height / this.height;\n    var scale = Math.min(imgWidthScale, imgHeightScale);\n    return this.scale(scale);\n  };\n  /**\n   * Get the width and height of this image. For example:\n   * ```js\n   * const { width, height } = image.size()\n   * ```\n   * @returns The width and height of the image.\n   */\n  PDFImage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all images get embedded.\n   *\n   * Embed this image in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFImage.prototype.embed = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a, doc, ref;\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.embedder) return [2 /*return*/];\n            // The image should only be embedded once. If there's a pending embed\n            // operation then wait on it. Otherwise we need to start the embed.\n            if (!this.embedTask) {\n              _a = this, doc = _a.doc, ref = _a.ref;\n              this.embedTask = this.embedder.embedIntoContext(doc.context, ref);\n            }\n            return [4 /*yield*/, this.embedTask];\n          case 1:\n            _b.sent();\n            // We clear `this.embedder` so that the indirectly referenced image data\n            // can be garbage collected, thus avoiding a memory leak.\n            // See https://github.com/Hopding/pdf-lib/pull/1032/files.\n            this.embedder = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\n   * > methods, which will create instances of [[PDFImage]] for you.\n   *\n   * Create an instance of [[PDFImage]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this image.\n   * @param doc The document to which the image will belong.\n   * @param embedder The embedder that will be used to embed the image.\n   */\n  PDFImage.of = function (ref, doc, embedder) {\n    return new PDFImage(ref, doc, embedder);\n  };\n  return PDFImage;\n}();\nexports.default = PDFImage;","map":{"version":3,"names":["PDFDocument_1","tslib_1","__importDefault","require","core_1","utils_1","PDFImage","ref","doc","embedder","assertIs","PDFRef","default","JpegEmbedder","PngEmbedder","width","height","prototype","scale","factor","scaleToFit","imgWidthScale","imgHeightScale","Math","min","size","embed","embedTask","_a","embedIntoContext","context","_b","sent","undefined","of"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/PDFImage.ts"],"sourcesContent":["import Embeddable from 'src/api/Embeddable';\nimport PDFDocument from 'src/api/PDFDocument';\nimport { JpegEmbedder, PDFRef, PngEmbedder } from 'src/core';\nimport { assertIs } from 'src/utils';\n\nexport type ImageEmbedder = JpegEmbedder | PngEmbedder;\n\n/**\n * Represents an image that has been embedded in a [[PDFDocument]].\n */\nexport default class PDFImage implements Embeddable {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\n   * > methods, which will create instances of [[PDFImage]] for you.\n   *\n   * Create an instance of [[PDFImage]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this image.\n   * @param doc The document to which the image will belong.\n   * @param embedder The embedder that will be used to embed the image.\n   */\n  static of = (ref: PDFRef, doc: PDFDocument, embedder: ImageEmbedder) =>\n    new PDFImage(ref, doc, embedder);\n\n  /** The unique reference assigned to this image within the document. */\n  readonly ref: PDFRef;\n\n  /** The document to which this image belongs. */\n  readonly doc: PDFDocument;\n\n  /** The width of this image in pixels. */\n  readonly width: number;\n\n  /** The height of this image in pixels. */\n  readonly height: number;\n\n  private embedder: ImageEmbedder | undefined;\n  private embedTask: Promise<PDFRef> | undefined;\n\n  private constructor(ref: PDFRef, doc: PDFDocument, embedder: ImageEmbedder) {\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [\n      [JpegEmbedder, 'JpegEmbedder'],\n      [PngEmbedder, 'PngEmbedder'],\n    ]);\n\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n\n    this.embedder = embedder;\n  }\n\n  /**\n   * Compute the width and height of this image after being scaled by the\n   * given `factor`. For example:\n   * ```js\n   * image.width  // => 500\n   * image.height // => 250\n   *\n   * const scaled = image.scale(0.5)\n   * scaled.width  // => 250\n   * scaled.height // => 125\n   * ```\n   * This operation is often useful before drawing an image with\n   * [[PDFPage.drawImage]] to compute the `width` and `height` options.\n   * @param factor The factor by which this image should be scaled.\n   * @returns The width and height of the image after being scaled.\n   */\n  scale(factor: number) {\n    assertIs(factor, 'factor', ['number']);\n    return { width: this.width * factor, height: this.height * factor };\n  }\n\n  /**\n   * Get the width and height of this image after scaling it as large as\n   * possible while maintaining its aspect ratio and not exceeding the\n   * specified `width` and `height`. For example:\n   * ```\n   * image.width  // => 500\n   * image.height // => 250\n   *\n   * const scaled = image.scaleToFit(750, 1000)\n   * scaled.width  // => 750\n   * scaled.height // => 375\n   * ```\n   * The `width` and `height` parameters can also be thought of as the width\n   * and height of a box that the scaled image must fit within.\n   * @param width The bounding box's width.\n   * @param height The bounding box's height.\n   * @returns The width and height of the image after being scaled.\n   */\n  scaleToFit(width: number, height: number) {\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n\n    const imgWidthScale = width / this.width;\n    const imgHeightScale = height / this.height;\n    const scale = Math.min(imgWidthScale, imgHeightScale);\n\n    return this.scale(scale);\n  }\n\n  /**\n   * Get the width and height of this image. For example:\n   * ```js\n   * const { width, height } = image.size()\n   * ```\n   * @returns The width and height of the image.\n   */\n  size() {\n    return this.scale(1);\n  }\n\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all images get embedded.\n   *\n   * Embed this image in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  async embed(): Promise<void> {\n    if (!this.embedder) return;\n\n    // The image should only be embedded once. If there's a pending embed\n    // operation then wait on it. Otherwise we need to start the embed.\n    if (!this.embedTask) {\n      const { doc, ref } = this;\n      this.embedTask = this.embedder.embedIntoContext(doc.context, ref);\n    }\n    await this.embedTask;\n\n    // We clear `this.embedder` so that the indirectly referenced image data\n    // can be garbage collected, thus avoiding a memory leak.\n    // See https://github.com/Hopding/pdf-lib/pull/1032/files.\n    this.embedder = undefined;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}