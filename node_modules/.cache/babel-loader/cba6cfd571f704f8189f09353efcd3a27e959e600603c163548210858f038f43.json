{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFString_1 = tslib_1.__importDefault(require(\"../objects/PDFString\"));\nvar PDFHexString_1 = tslib_1.__importDefault(require(\"../objects/PDFHexString\"));\nvar PDFArray_1 = tslib_1.__importDefault(require(\"../objects/PDFArray\"));\nvar PDFName_1 = tslib_1.__importDefault(require(\"../objects/PDFName\"));\nvar PDFAcroTerminal_1 = tslib_1.__importDefault(require(\"./PDFAcroTerminal\"));\nvar errors_1 = require(\"../errors\");\nvar PDFAcroButton = /** @class */function (_super) {\n  tslib_1.__extends(PDFAcroButton, _super);\n  function PDFAcroButton() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroButton.prototype.Opt = function () {\n    return this.dict.lookupMaybe(PDFName_1.default.of('Opt'), PDFString_1.default, PDFHexString_1.default, PDFArray_1.default);\n  };\n  PDFAcroButton.prototype.setOpt = function (opt) {\n    this.dict.set(PDFName_1.default.of('Opt'), this.dict.context.obj(opt));\n  };\n  PDFAcroButton.prototype.getExportValues = function () {\n    var opt = this.Opt();\n    if (!opt) return undefined;\n    if (opt instanceof PDFString_1.default || opt instanceof PDFHexString_1.default) {\n      return [opt];\n    }\n    var values = [];\n    for (var idx = 0, len = opt.size(); idx < len; idx++) {\n      var value = opt.lookup(idx);\n      if (value instanceof PDFString_1.default || value instanceof PDFHexString_1.default) {\n        values.push(value);\n      }\n    }\n    return values;\n  };\n  PDFAcroButton.prototype.removeExportValue = function (idx) {\n    var opt = this.Opt();\n    if (!opt) return;\n    if (opt instanceof PDFString_1.default || opt instanceof PDFHexString_1.default) {\n      if (idx !== 0) throw new errors_1.IndexOutOfBoundsError(idx, 0, 0);\n      this.setOpt([]);\n    } else {\n      if (idx < 0 || idx > opt.size()) {\n        throw new errors_1.IndexOutOfBoundsError(idx, 0, opt.size());\n      }\n      opt.remove(idx);\n    }\n  };\n  // Enforce use use of /Opt even if it isn't strictly necessary\n  PDFAcroButton.prototype.normalizeExportValues = function () {\n    var _a, _b, _c, _d;\n    var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n    var Opt = [];\n    var widgets = this.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString_1.default.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n      Opt.push(exportVal);\n    }\n    this.setOpt(Opt);\n  };\n  /**\n   * Reuses existing opt if one exists with the same value (assuming\n   * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n   */\n  PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n    var _a;\n    this.normalizeExportValues();\n    var optText = opt.decodeText();\n    var existingIdx;\n    if (useExistingOptIdx) {\n      var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        var exportVal = exportValues[idx];\n        if (exportVal.decodeText() === optText) existingIdx = idx;\n      }\n    }\n    var Opt = this.Opt();\n    Opt.push(opt);\n    return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n  };\n  PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n    var optIdx = this.addOpt(opt, useExistingOptIdx);\n    var apStateValue = PDFName_1.default.of(String(optIdx));\n    this.addWidget(widget);\n    return apStateValue;\n  };\n  return PDFAcroButton;\n}(PDFAcroTerminal_1.default);\nexports.default = PDFAcroButton;","map":{"version":3,"names":["PDFString_1","tslib_1","__importDefault","require","PDFHexString_1","PDFArray_1","PDFName_1","PDFAcroTerminal_1","errors_1","PDFAcroButton","_super","__extends","prototype","Opt","dict","lookupMaybe","default","of","setOpt","opt","set","context","obj","getExportValues","undefined","values","idx","len","size","value","lookup","push","removeExportValue","IndexOutOfBoundsError","remove","normalizeExportValues","exportValues","_a","widgets","getWidgets","length","widget","exportVal","_b","fromText","_d","_c","getOnValue","decodeText","addOpt","useExistingOptIdx","optText","existingIdx","addWidgetWithOpt","optIdx","apStateValue","String","addWidget","exports"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/acroform/PDFAcroButton.ts"],"sourcesContent":["import PDFObject from 'src/core/objects/PDFObject';\nimport PDFString from 'src/core/objects/PDFString';\nimport PDFHexString from 'src/core/objects/PDFHexString';\nimport PDFArray from 'src/core/objects/PDFArray';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFRef from 'src/core/objects/PDFRef';\nimport PDFAcroTerminal from 'src/core/acroform/PDFAcroTerminal';\nimport { IndexOutOfBoundsError } from 'src/core/errors';\n\nclass PDFAcroButton extends PDFAcroTerminal {\n  Opt(): PDFString | PDFHexString | PDFArray | undefined {\n    return this.dict.lookupMaybe(\n      PDFName.of('Opt'),\n      PDFString,\n      PDFHexString,\n      PDFArray,\n    );\n  }\n\n  setOpt(opt: PDFObject[]) {\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n  }\n\n  getExportValues(): (PDFString | PDFHexString)[] | undefined {\n    const opt = this.Opt();\n\n    if (!opt) return undefined;\n\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      return [opt];\n    }\n\n    const values: (PDFString | PDFHexString)[] = [];\n    for (let idx = 0, len = opt.size(); idx < len; idx++) {\n      const value = opt.lookup(idx);\n      if (value instanceof PDFString || value instanceof PDFHexString) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  }\n\n  removeExportValue(idx: number) {\n    const opt = this.Opt();\n\n    if (!opt) return;\n\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      if (idx !== 0) throw new IndexOutOfBoundsError(idx, 0, 0);\n      this.setOpt([]);\n    } else {\n      if (idx < 0 || idx > opt.size()) {\n        throw new IndexOutOfBoundsError(idx, 0, opt.size());\n      }\n      opt.remove(idx);\n    }\n  }\n\n  // Enforce use use of /Opt even if it isn't strictly necessary\n  normalizeExportValues() {\n    const exportValues = this.getExportValues() ?? [];\n\n    const Opt: (PDFString | PDFHexString)[] = [];\n\n    const widgets = this.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const exportVal =\n        exportValues[idx] ??\n        PDFHexString.fromText(widget.getOnValue()?.decodeText() ?? '');\n      Opt.push(exportVal);\n    }\n\n    this.setOpt(Opt);\n  }\n\n  /**\n   * Reuses existing opt if one exists with the same value (assuming\n   * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n   */\n  addOpt(opt: PDFHexString | PDFString, useExistingOptIdx: boolean): number {\n    this.normalizeExportValues();\n\n    const optText = opt.decodeText();\n\n    let existingIdx: number | undefined;\n    if (useExistingOptIdx) {\n      const exportValues = this.getExportValues() ?? [];\n      for (let idx = 0, len = exportValues.length; idx < len; idx++) {\n        const exportVal = exportValues[idx];\n        if (exportVal.decodeText() === optText) existingIdx = idx;\n      }\n    }\n\n    const Opt = this.Opt() as PDFArray;\n    Opt.push(opt);\n\n    return existingIdx ?? Opt.size() - 1;\n  }\n\n  addWidgetWithOpt(\n    widget: PDFRef,\n    opt: PDFHexString | PDFString,\n    useExistingOptIdx: boolean,\n  ) {\n    const optIdx = this.addOpt(opt, useExistingOptIdx);\n    const apStateValue = PDFName.of(String(optIdx));\n    this.addWidget(widget);\n    return apStateValue;\n  }\n}\n\nexport default PDFAcroButton;\n"],"mappings":";;;;;;AACA,IAAAA,WAAA,GAAAC,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAC,cAAA,GAAAH,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAE,UAAA,GAAAJ,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAG,SAAA,GAAAL,OAAA,CAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAI,iBAAA,GAAAN,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAK,QAAA,GAAAL,OAAA;AAEA,IAAAM,aAAA,0BAAAC,MAAA;EAA4BT,OAAA,CAAAU,SAAA,CAAAF,aAAA,EAAAC,MAAA;EAA5B,SAAAD,cAAA;;EAsGA;EArGEA,aAAA,CAAAG,SAAA,CAAAC,GAAG,GAAH;IACE,OAAO,IAAI,CAACC,IAAI,CAACC,WAAW,CAC1BT,SAAA,CAAAU,OAAO,CAACC,EAAE,CAAC,KAAK,CAAC,EACjBjB,WAAA,CAAAgB,OAAS,EACTZ,cAAA,CAAAY,OAAY,EACZX,UAAA,CAAAW,OAAQ,CACT;EACH,CAAC;EAEDP,aAAA,CAAAG,SAAA,CAAAM,MAAM,GAAN,UAAOC,GAAgB;IACrB,IAAI,CAACL,IAAI,CAACM,GAAG,CAACd,SAAA,CAAAU,OAAO,CAACC,EAAE,CAAC,KAAK,CAAC,EAAE,IAAI,CAACH,IAAI,CAACO,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC,CAAC;EAC9D,CAAC;EAEDV,aAAA,CAAAG,SAAA,CAAAW,eAAe,GAAf;IACE,IAAMJ,GAAG,GAAG,IAAI,CAACN,GAAG,EAAE;IAEtB,IAAI,CAACM,GAAG,EAAE,OAAOK,SAAS;IAE1B,IAAIL,GAAG,YAAYnB,WAAA,CAAAgB,OAAS,IAAIG,GAAG,YAAYf,cAAA,CAAAY,OAAY,EAAE;MAC3D,OAAO,CAACG,GAAG,CAAC;;IAGd,IAAMM,MAAM,GAAiC,EAAE;IAC/C,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGR,GAAG,CAACS,IAAI,EAAE,EAAEF,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACpD,IAAMG,KAAK,GAAGV,GAAG,CAACW,MAAM,CAACJ,GAAG,CAAC;MAC7B,IAAIG,KAAK,YAAY7B,WAAA,CAAAgB,OAAS,IAAIa,KAAK,YAAYzB,cAAA,CAAAY,OAAY,EAAE;QAC/DS,MAAM,CAACM,IAAI,CAACF,KAAK,CAAC;;;IAItB,OAAOJ,MAAM;EACf,CAAC;EAEDhB,aAAA,CAAAG,SAAA,CAAAoB,iBAAiB,GAAjB,UAAkBN,GAAW;IAC3B,IAAMP,GAAG,GAAG,IAAI,CAACN,GAAG,EAAE;IAEtB,IAAI,CAACM,GAAG,EAAE;IAEV,IAAIA,GAAG,YAAYnB,WAAA,CAAAgB,OAAS,IAAIG,GAAG,YAAYf,cAAA,CAAAY,OAAY,EAAE;MAC3D,IAAIU,GAAG,KAAK,CAAC,EAAE,MAAM,IAAIlB,QAAA,CAAAyB,qBAAqB,CAACP,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;MACzD,IAAI,CAACR,MAAM,CAAC,EAAE,CAAC;KAChB,MAAM;MACL,IAAIQ,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGP,GAAG,CAACS,IAAI,EAAE,EAAE;QAC/B,MAAM,IAAIpB,QAAA,CAAAyB,qBAAqB,CAACP,GAAG,EAAE,CAAC,EAAEP,GAAG,CAACS,IAAI,EAAE,CAAC;;MAErDT,GAAG,CAACe,MAAM,CAACR,GAAG,CAAC;;EAEnB,CAAC;EAED;EACAjB,aAAA,CAAAG,SAAA,CAAAuB,qBAAqB,GAArB;;IACE,IAAMC,YAAY,IAAAC,EAAA,GAAG,IAAI,CAACd,eAAe,EAAE,cAAAc,EAAA,cAAAA,EAAA,GAAI,EAAE;IAEjD,IAAMxB,GAAG,GAAiC,EAAE;IAE5C,IAAMyB,OAAO,GAAG,IAAI,CAACC,UAAU,EAAE;IACjC,KAAK,IAAIb,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGW,OAAO,CAACE,MAAM,EAAEd,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACxD,IAAMe,MAAM,GAAGH,OAAO,CAACZ,GAAG,CAAC;MAC3B,IAAMgB,SAAS,IAAAC,EAAA,GACbP,YAAY,CAACV,GAAG,CAAC,cAAAiB,EAAA,cAAAA,EAAA,GACjBvC,cAAA,CAAAY,OAAY,CAAC4B,QAAQ,EAAAC,EAAA,IAAAC,EAAA,GAACL,MAAM,CAACM,UAAU,EAAE,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,UAAU,gBAAAH,EAAA,cAAAA,EAAA,GAAM,EAAE,CAAC;MAChEhC,GAAG,CAACkB,IAAI,CAACW,SAAS,CAAC;;IAGrB,IAAI,CAACxB,MAAM,CAACL,GAAG,CAAC;EAClB,CAAC;EAED;;;;EAIAJ,aAAA,CAAAG,SAAA,CAAAqC,MAAM,GAAN,UAAO9B,GAA6B,EAAE+B,iBAA0B;;IAC9D,IAAI,CAACf,qBAAqB,EAAE;IAE5B,IAAMgB,OAAO,GAAGhC,GAAG,CAAC6B,UAAU,EAAE;IAEhC,IAAII,WAA+B;IACnC,IAAIF,iBAAiB,EAAE;MACrB,IAAMd,YAAY,IAAAC,EAAA,GAAG,IAAI,CAACd,eAAe,EAAE,cAAAc,EAAA,cAAAA,EAAA,GAAI,EAAE;MACjD,KAAK,IAAIX,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGS,YAAY,CAACI,MAAM,EAAEd,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QAC7D,IAAMgB,SAAS,GAAGN,YAAY,CAACV,GAAG,CAAC;QACnC,IAAIgB,SAAS,CAACM,UAAU,EAAE,KAAKG,OAAO,EAAEC,WAAW,GAAG1B,GAAG;;;IAI7D,IAAMb,GAAG,GAAG,IAAI,CAACA,GAAG,EAAc;IAClCA,GAAG,CAACkB,IAAI,CAACZ,GAAG,CAAC;IAEb,OAAOiC,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAIvC,GAAG,CAACe,IAAI,EAAE,GAAG,CAAC;EACtC,CAAC;EAEDnB,aAAA,CAAAG,SAAA,CAAAyC,gBAAgB,GAAhB,UACEZ,MAAc,EACdtB,GAA6B,EAC7B+B,iBAA0B;IAE1B,IAAMI,MAAM,GAAG,IAAI,CAACL,MAAM,CAAC9B,GAAG,EAAE+B,iBAAiB,CAAC;IAClD,IAAMK,YAAY,GAAGjD,SAAA,CAAAU,OAAO,CAACC,EAAE,CAACuC,MAAM,CAACF,MAAM,CAAC,CAAC;IAC/C,IAAI,CAACG,SAAS,CAAChB,MAAM,CAAC;IACtB,OAAOc,YAAY;EACrB,CAAC;EACH,OAAA9C,aAAC;AAAD,CAAC,CAtG2BF,iBAAA,CAAAS,OAAe;AAwG3C0C,OAAA,CAAA1C,OAAA,GAAeP,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}