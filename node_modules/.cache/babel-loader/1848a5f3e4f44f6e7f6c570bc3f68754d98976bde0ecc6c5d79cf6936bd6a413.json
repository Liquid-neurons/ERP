{"ast":null,"code":"/*\n * The `chars`, `lookup`, `encode`, and `decode` members of this file are\n * licensed under the following:\n *\n *     base64-arraybuffer\n *     https://github.com/niklasvh/base64-arraybuffer\n *\n *     Copyright (c) 2012 Niklas von Hertzen\n *     Licensed under the MIT license.\n *\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nvar lookup = new Uint8Array(256);\nfor (var i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\nexport var encodeToBase64 = function (bytes) {\n  var base64 = '';\n  var len = bytes.length;\n  for (var i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + '=';\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + '==';\n  }\n  return base64;\n};\nexport var decodeFromBase64 = function (base64) {\n  var bufferLength = base64.length * 0.75;\n  var len = base64.length;\n  var i;\n  var p = 0;\n  var encoded1;\n  var encoded2;\n  var encoded3;\n  var encoded4;\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n  var bytes = new Uint8Array(bufferLength);\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n  return bytes;\n};\n// This regex is designed to be as flexible as possible. It will parse certain\n// invalid data URIs.\nvar DATA_URI_PREFIX_REGEX = /^(data)?:?([\\w\\/\\+]+)?;?(charset=[\\w-]+|base64)?.*,/i;\n/**\n * If the `dataUri` input is a data URI, then the data URI prefix must not be\n * longer than 100 characters, or this function will fail to decode it.\n *\n * @param dataUri a base64 data URI or plain base64 string\n * @returns a Uint8Array containing the decoded input\n */\nexport var decodeFromBase64DataUri = function (dataUri) {\n  var trimmedUri = dataUri.trim();\n  var prefix = trimmedUri.substring(0, 100);\n  var res = prefix.match(DATA_URI_PREFIX_REGEX);\n  // Assume it's not a data URI - just a plain base64 string\n  if (!res) return decodeFromBase64(trimmedUri);\n  // Remove the data URI prefix and parse the remainder as a base64 string\n  var fullMatch = res[0];\n  var data = trimmedUri.substring(fullMatch.length);\n  return decodeFromBase64(data);\n};","map":{"version":3,"names":["chars","lookup","Uint8Array","i","length","charCodeAt","encodeToBase64","bytes","base64","len","substring","decodeFromBase64","bufferLength","p","encoded1","encoded2","encoded3","encoded4","DATA_URI_PREFIX_REGEX","decodeFromBase64DataUri","dataUri","trimmedUri","trim","prefix","res","match","fullMatch","data"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/utils/base64.ts"],"sourcesContent":["/*\n * The `chars`, `lookup`, `encode`, and `decode` members of this file are\n * licensed under the following:\n *\n *     base64-arraybuffer\n *     https://github.com/niklasvh/base64-arraybuffer\n *\n *     Copyright (c) 2012 Niklas von Hertzen\n *     Licensed under the MIT license.\n *\n */\n\nconst chars =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n// Use a lookup table to find the index.\nconst lookup = new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\n\nexport const encodeToBase64 = (bytes: Uint8Array): string => {\n  let base64 = '';\n  const len = bytes.length;\n  for (let i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n    base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + '=';\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + '==';\n  }\n\n  return base64;\n};\n\nexport const decodeFromBase64 = (base64: string): Uint8Array => {\n  let bufferLength = base64.length * 0.75;\n  const len = base64.length;\n  let i;\n  let p = 0;\n  let encoded1;\n  let encoded2;\n  let encoded3;\n  let encoded4;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n\n  const bytes = new Uint8Array(bufferLength);\n\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n  }\n\n  return bytes;\n};\n\n// This regex is designed to be as flexible as possible. It will parse certain\n// invalid data URIs.\nconst DATA_URI_PREFIX_REGEX = /^(data)?:?([\\w\\/\\+]+)?;?(charset=[\\w-]+|base64)?.*,/i;\n\n/**\n * If the `dataUri` input is a data URI, then the data URI prefix must not be\n * longer than 100 characters, or this function will fail to decode it.\n *\n * @param dataUri a base64 data URI or plain base64 string\n * @returns a Uint8Array containing the decoded input\n */\nexport const decodeFromBase64DataUri = (dataUri: string): Uint8Array => {\n  const trimmedUri = dataUri.trim();\n\n  const prefix = trimmedUri.substring(0, 100);\n  const res = prefix.match(DATA_URI_PREFIX_REGEX);\n\n  // Assume it's not a data URI - just a plain base64 string\n  if (!res) return decodeFromBase64(trimmedUri);\n\n  // Remove the data URI prefix and parse the remainder as a base64 string\n  const [fullMatch] = res;\n  const data = trimmedUri.substring(fullMatch.length);\n\n  return decodeFromBase64(data);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}