{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AcroChoiceFlags = exports.AcroTextFlags = exports.AcroButtonFlags = exports.AcroFieldFlags = void 0;\nvar flag = function (bitIndex) {\n  return 1 << bitIndex;\n};\n/** From PDF spec table 221 */\nvar AcroFieldFlags;\n(function (AcroFieldFlags) {\n  /**\n   * If set, the user may not change the value of the field. Any associated\n   * widget annotations will not interact with the user; that is, they will not\n   * respond to mouse clicks or change their appearance in response to mouse\n   * motions. This flag is useful for fields whose values are computed or\n   * imported from a database.\n   */\n  AcroFieldFlags[AcroFieldFlags[\"ReadOnly\"] = flag(1 - 1)] = \"ReadOnly\";\n  /**\n   * If set, the field shall have a value at the time it is exported by a\n   * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\n   */\n  AcroFieldFlags[AcroFieldFlags[\"Required\"] = flag(2 - 1)] = \"Required\";\n  /**\n   * If set, the field shall not be exported by a submit-form action\n   * (see 12.7.5.2, \"Submit-Form Action\").\n   */\n  AcroFieldFlags[AcroFieldFlags[\"NoExport\"] = flag(3 - 1)] = \"NoExport\";\n})(AcroFieldFlags = exports.AcroFieldFlags || (exports.AcroFieldFlags = {}));\n/** From PDF spec table 226 */\nvar AcroButtonFlags;\n(function (AcroButtonFlags) {\n  /**\n   * (Radio buttons only) If set, exactly one radio button shall be selected at\n   * all times; selecting the currently selected button has no effect. If clear,\n   * clicking the selected button deselects it, leaving no button selected.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"NoToggleToOff\"] = flag(15 - 1)] = \"NoToggleToOff\";\n  /**\n   * If set, the field is a set of radio buttons; if clear, the field is a check\n   * box. This flag may be set only if the Pushbutton flag is clear.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"Radio\"] = flag(16 - 1)] = \"Radio\";\n  /**\n   * If set, the field is a pushbutton that does not retain a permanent value.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"PushButton\"] = flag(17 - 1)] = \"PushButton\";\n  /**\n   * If set, a group of radio buttons within a radio button field that use the\n   * same value for the on state will turn on and off in unison; that is if one\n   * is checked, they are all checked. If clear, the buttons are mutually\n   * exclusive (the same behavior as HTML radio buttons).\n   */\n  AcroButtonFlags[AcroButtonFlags[\"RadiosInUnison\"] = flag(26 - 1)] = \"RadiosInUnison\";\n})(AcroButtonFlags = exports.AcroButtonFlags || (exports.AcroButtonFlags = {}));\n/** From PDF spec table 228 */\nvar AcroTextFlags;\n(function (AcroTextFlags) {\n  /**\n   * If set, the field may contain multiple lines of text; if clear, the field's\n   * text shall be restricted to a single line.\n   */\n  AcroTextFlags[AcroTextFlags[\"Multiline\"] = flag(13 - 1)] = \"Multiline\";\n  /**\n   * If set, the field is intended for entering a secure password that should\n   * not be echoed visibly to the screen. Characters typed from the keyboard\n   * shall instead be echoed in some unreadable form, such as asterisks or\n   * bullet characters.\n   * > NOTE   To protect password confidentiality, readers should never store\n   * >        the value of the text field in the PDF file if this flag is set.\n   */\n  AcroTextFlags[AcroTextFlags[\"Password\"] = flag(14 - 1)] = \"Password\";\n  /**\n   * If set, the text entered in the field represents the pathname of a file\n   * whose contents shall be submitted as the value of the field.\n   */\n  AcroTextFlags[AcroTextFlags[\"FileSelect\"] = flag(21 - 1)] = \"FileSelect\";\n  /**\n   * If set, text entered in the field shall not be spell-checked.\n   */\n  AcroTextFlags[AcroTextFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n  /**\n   * If set, the field shall not scroll (horizontally for single-line fields,\n   * vertically for multiple-line fields) to accommodate more text than fits\n   * within its annotation rectangle. Once the field is full, no further text\n   * shall be accepted for interactive form filling; for non-interactive form\n   * filling, the filler should take care not to add more character than will\n   * visibly fit in the defined area.\n   */\n  AcroTextFlags[AcroTextFlags[\"DoNotScroll\"] = flag(24 - 1)] = \"DoNotScroll\";\n  /**\n   * May be set only if the MaxLen entry is present in the text field dictionary\n   * (see Table 229) and if the Multiline, Password, and FileSelect flags are\n   * clear. If set, the field shall be automatically divided into as many\n   * equally spaced positions, or combs, as the value of MaxLen, and the text\n   * is laid out into those combs.\n   */\n  AcroTextFlags[AcroTextFlags[\"Comb\"] = flag(25 - 1)] = \"Comb\";\n  /**\n   * If set, the value of this field shall be a rich text string\n   * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\n   * entry of the field dictionary (Table 222) shall specify the rich text\n   * string.\n   */\n  AcroTextFlags[AcroTextFlags[\"RichText\"] = flag(26 - 1)] = \"RichText\";\n})(AcroTextFlags = exports.AcroTextFlags || (exports.AcroTextFlags = {}));\n/** From PDF spec table 230 */\nvar AcroChoiceFlags;\n(function (AcroChoiceFlags) {\n  /**\n   * If set, the field is a combo box; if clear, the field is a list box.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Combo\"] = flag(18 - 1)] = \"Combo\";\n  /**\n   * If set, the combo box shall include an editable text box as well as a\n   * drop-down list; if clear, it shall include only a drop-down list. This\n   * flag shall be used only if the Combo flag is set.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Edit\"] = flag(19 - 1)] = \"Edit\";\n  /**\n   * If set, the field's option items shall be sorted alphabetically. This flag\n   * is intended for use by writers, not by readers. Conforming readers shall\n   * display the options in the order in which they occur in the Opt array\n   * (see Table 231).\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Sort\"] = flag(20 - 1)] = \"Sort\";\n  /**\n   * If set, more than one of the field's option items may be selected\n   * simultaneously; if clear, at most one item shall be selected.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"MultiSelect\"] = flag(22 - 1)] = \"MultiSelect\";\n  /**\n   * If set, text entered in the field shall not be spell-checked. This flag\n   * shall not be used unless the Combo and Edit flags are both set.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n  /**\n   * If set, the new value shall be committed as soon as a selection is made\n   * (commonly with the pointing device). In this case, supplying a value for\n   * a field involves three actions: selecting the field for fill-in,\n   * selecting a choice for the fill-in value, and leaving that field, which\n   * finalizes or \"commits\" the data choice and triggers any actions associated\n   * with the entry or changing of this data. If this flag is on, then\n   * processing does not wait for leaving the field action to occur, but\n   * immediately proceeds to the third step.\n   *\n   * This option enables applications to perform an action once a selection is\n   * made, without requiring the user to exit the field. If clear, the new\n   * value is not committed until the user exits the field.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"CommitOnSelChange\"] = flag(27 - 1)] = \"CommitOnSelChange\";\n})(AcroChoiceFlags = exports.AcroChoiceFlags || (exports.AcroChoiceFlags = {}));","map":{"version":3,"names":["flag","bitIndex","AcroFieldFlags","exports","AcroButtonFlags","AcroTextFlags","AcroChoiceFlags"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/acroform/flags.ts"],"sourcesContent":["const flag = (bitIndex: number) => 1 << bitIndex;\n\n/** From PDF spec table 221 */\nexport enum AcroFieldFlags {\n  /**\n   * If set, the user may not change the value of the field. Any associated\n   * widget annotations will not interact with the user; that is, they will not\n   * respond to mouse clicks or change their appearance in response to mouse\n   * motions. This flag is useful for fields whose values are computed or\n   * imported from a database.\n   */\n  ReadOnly = flag(1 - 1),\n\n  /**\n   * If set, the field shall have a value at the time it is exported by a\n   * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\n   */\n  Required = flag(2 - 1),\n\n  /**\n   * If set, the field shall not be exported by a submit-form action\n   * (see 12.7.5.2, \"Submit-Form Action\").\n   */\n  NoExport = flag(3 - 1),\n}\n\n/** From PDF spec table 226 */\nexport enum AcroButtonFlags {\n  /**\n   * (Radio buttons only) If set, exactly one radio button shall be selected at\n   * all times; selecting the currently selected button has no effect. If clear,\n   * clicking the selected button deselects it, leaving no button selected.\n   */\n  NoToggleToOff = flag(15 - 1),\n\n  /**\n   * If set, the field is a set of radio buttons; if clear, the field is a check\n   * box. This flag may be set only if the Pushbutton flag is clear.\n   */\n  Radio = flag(16 - 1),\n\n  /**\n   * If set, the field is a pushbutton that does not retain a permanent value.\n   */\n  PushButton = flag(17 - 1),\n\n  /**\n   * If set, a group of radio buttons within a radio button field that use the\n   * same value for the on state will turn on and off in unison; that is if one\n   * is checked, they are all checked. If clear, the buttons are mutually\n   * exclusive (the same behavior as HTML radio buttons).\n   */\n  RadiosInUnison = flag(26 - 1),\n}\n\n/** From PDF spec table 228 */\nexport enum AcroTextFlags {\n  /**\n   * If set, the field may contain multiple lines of text; if clear, the field's\n   * text shall be restricted to a single line.\n   */\n  Multiline = flag(13 - 1),\n\n  /**\n   * If set, the field is intended for entering a secure password that should\n   * not be echoed visibly to the screen. Characters typed from the keyboard\n   * shall instead be echoed in some unreadable form, such as asterisks or\n   * bullet characters.\n   * > NOTE   To protect password confidentiality, readers should never store\n   * >        the value of the text field in the PDF file if this flag is set.\n   */\n  Password = flag(14 - 1),\n\n  /**\n   * If set, the text entered in the field represents the pathname of a file\n   * whose contents shall be submitted as the value of the field.\n   */\n  FileSelect = flag(21 - 1),\n\n  /**\n   * If set, text entered in the field shall not be spell-checked.\n   */\n  DoNotSpellCheck = flag(23 - 1),\n\n  /**\n   * If set, the field shall not scroll (horizontally for single-line fields,\n   * vertically for multiple-line fields) to accommodate more text than fits\n   * within its annotation rectangle. Once the field is full, no further text\n   * shall be accepted for interactive form filling; for non-interactive form\n   * filling, the filler should take care not to add more character than will\n   * visibly fit in the defined area.\n   */\n  DoNotScroll = flag(24 - 1),\n\n  /**\n   * May be set only if the MaxLen entry is present in the text field dictionary\n   * (see Table 229) and if the Multiline, Password, and FileSelect flags are\n   * clear. If set, the field shall be automatically divided into as many\n   * equally spaced positions, or combs, as the value of MaxLen, and the text\n   * is laid out into those combs.\n   */\n  Comb = flag(25 - 1),\n\n  /**\n   * If set, the value of this field shall be a rich text string\n   * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\n   * entry of the field dictionary (Table 222) shall specify the rich text\n   * string.\n   */\n  RichText = flag(26 - 1),\n}\n\n/** From PDF spec table 230 */\nexport enum AcroChoiceFlags {\n  /**\n   * If set, the field is a combo box; if clear, the field is a list box.\n   */\n  Combo = flag(18 - 1),\n\n  /**\n   * If set, the combo box shall include an editable text box as well as a\n   * drop-down list; if clear, it shall include only a drop-down list. This\n   * flag shall be used only if the Combo flag is set.\n   */\n  Edit = flag(19 - 1),\n\n  /**\n   * If set, the field's option items shall be sorted alphabetically. This flag\n   * is intended for use by writers, not by readers. Conforming readers shall\n   * display the options in the order in which they occur in the Opt array\n   * (see Table 231).\n   */\n  Sort = flag(20 - 1),\n\n  /**\n   * If set, more than one of the field's option items may be selected\n   * simultaneously; if clear, at most one item shall be selected.\n   */\n  MultiSelect = flag(22 - 1),\n\n  /**\n   * If set, text entered in the field shall not be spell-checked. This flag\n   * shall not be used unless the Combo and Edit flags are both set.\n   */\n  DoNotSpellCheck = flag(23 - 1),\n\n  /**\n   * If set, the new value shall be committed as soon as a selection is made\n   * (commonly with the pointing device). In this case, supplying a value for\n   * a field involves three actions: selecting the field for fill-in,\n   * selecting a choice for the fill-in value, and leaving that field, which\n   * finalizes or \"commits\" the data choice and triggers any actions associated\n   * with the entry or changing of this data. If this flag is on, then\n   * processing does not wait for leaving the field action to occur, but\n   * immediately proceeds to the third step.\n   *\n   * This option enables applications to perform an action once a selection is\n   * made, without requiring the user to exit the field. If clear, the new\n   * value is not committed until the user exits the field.\n   */\n  CommitOnSelChange = flag(27 - 1),\n}\n"],"mappings":";;;;;;AAAA,IAAMA,IAAI,GAAG,SAAAA,CAACC,QAAgB;EAAK,QAAC,IAAIA,QAAQ;AAAb,CAAa;AAEhD;AACA,IAAYC,cAqBX;AArBD,WAAYA,cAAc;EACxB;;;;;;;EAOAA,cAAA,CAAAA,cAAA,eAAWF,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EAEtB;;;;EAIAE,cAAA,CAAAA,cAAA,eAAWF,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EAEtB;;;;EAIAE,cAAA,CAAAA,cAAA,eAAWF,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACxB,CAAC,EArBWE,cAAc,GAAdC,OAAA,CAAAD,cAAc,KAAdC,OAAA,CAAAD,cAAc;AAuB1B;AACA,IAAYE,eA0BX;AA1BD,WAAYA,eAAe;EACzB;;;;;EAKAA,eAAA,CAAAA,eAAA,oBAAgBJ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAE5B;;;;EAIAI,eAAA,CAAAA,eAAA,YAAQJ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAEpB;;;EAGAI,eAAA,CAAAA,eAAA,iBAAaJ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAEzB;;;;;;EAMAI,eAAA,CAAAA,eAAA,qBAAiBJ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;AAC/B,CAAC,EA1BWI,eAAe,GAAfD,OAAA,CAAAC,eAAe,KAAfD,OAAA,CAAAC,eAAe;AA4B3B;AACA,IAAYC,aAsDX;AAtDD,WAAYA,aAAa;EACvB;;;;EAIAA,aAAA,CAAAA,aAAA,gBAAYL,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAExB;;;;;;;;EAQAK,aAAA,CAAAA,aAAA,eAAWL,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAEvB;;;;EAIAK,aAAA,CAAAA,aAAA,iBAAaL,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAEzB;;;EAGAK,aAAA,CAAAA,aAAA,sBAAkBL,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAE9B;;;;;;;;EAQAK,aAAA,CAAAA,aAAA,kBAAcL,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAE1B;;;;;;;EAOAK,aAAA,CAAAA,aAAA,WAAOL,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAEnB;;;;;;EAMAK,aAAA,CAAAA,aAAA,eAAWL,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;AACzB,CAAC,EAtDWK,aAAa,GAAbF,OAAA,CAAAE,aAAa,KAAbF,OAAA,CAAAE,aAAa;AAwDzB;AACA,IAAYC,eAgDX;AAhDD,WAAYA,eAAe;EACzB;;;EAGAA,eAAA,CAAAA,eAAA,YAAQN,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAEpB;;;;;EAKAM,eAAA,CAAAA,eAAA,WAAON,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAEnB;;;;;;EAMAM,eAAA,CAAAA,eAAA,WAAON,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAEnB;;;;EAIAM,eAAA,CAAAA,eAAA,kBAAcN,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAE1B;;;;EAIAM,eAAA,CAAAA,eAAA,sBAAkBN,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAE9B;;;;;;;;;;;;;;EAcAM,eAAA,CAAAA,eAAA,wBAAoBN,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;AAClC,CAAC,EAhDWM,eAAe,GAAfH,OAAA,CAAAG,eAAe,KAAfH,OAAA,CAAAG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}