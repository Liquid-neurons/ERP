{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultOptionListAppearanceProvider = exports.defaultDropdownAppearanceProvider = exports.defaultTextFieldAppearanceProvider = exports.defaultButtonAppearanceProvider = exports.defaultRadioGroupAppearanceProvider = exports.defaultCheckBoxAppearanceProvider = exports.normalizeAppearance = void 0;\nvar tslib_1 = require(\"tslib\");\nvar operations_1 = require(\"../operations\");\nvar colors_1 = require(\"../colors\");\nvar rotations_1 = require(\"../rotations\");\nvar layout_1 = require(\"../text/layout\");\nvar alignment_1 = require(\"../text/alignment\");\nvar operators_1 = require(\"../operators\");\nvar utils_1 = require(\"../../utils\");\n/********************* Appearance Provider Functions **************************/\nexports.normalizeAppearance = function (appearance) {\n  if ('normal' in appearance) return appearance;\n  return {\n    normal: appearance\n  };\n};\n// Examples:\n//   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\n//   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\nvar tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\nvar getDefaultFontSize = function (field) {\n  var _a, _b;\n  var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n  var daMatch = (_b = utils_1.findLastMatch(da, tfRegex).match) !== null && _b !== void 0 ? _b : [];\n  var defaultFontSize = Number(daMatch[2]);\n  return isFinite(defaultFontSize) ? defaultFontSize : undefined;\n};\n// Examples:\n//   `0.3 g` -> ['0.3', 'g']\n//   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\n//   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\nvar colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\nvar getDefaultColor = function (field) {\n  var _a;\n  var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n  var daMatch = utils_1.findLastMatch(da, colorRegex).match;\n  var _b = daMatch !== null && daMatch !== void 0 ? daMatch : [],\n    c1 = _b[1],\n    c2 = _b[2],\n    c3 = _b[3],\n    c4 = _b[4],\n    colorSpace = _b[5];\n  if (colorSpace === 'g' && c1) {\n    return colors_1.grayscale(Number(c1));\n  }\n  if (colorSpace === 'rg' && c1 && c2 && c3) {\n    return colors_1.rgb(Number(c1), Number(c2), Number(c3));\n  }\n  if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\n    return colors_1.cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\n  }\n  return undefined;\n};\nvar updateDefaultAppearance = function (field, color, font, fontSize) {\n  var _a;\n  if (fontSize === void 0) {\n    fontSize = 0;\n  }\n  var da = [colors_1.setFillingColor(color).toString(), operators_1.setFontAndSize((_a = font === null || font === void 0 ? void 0 : font.name) !== null && _a !== void 0 ? _a : 'dummy__noop', fontSize).toString()].join('\\n');\n  field.setDefaultAppearance(da);\n};\nexports.defaultCheckBoxAppearanceProvider = function (checkBox, widget) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(checkBox.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = rotations_1.reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = rotations_1.adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = operations_1.rotateInPlace(tslib_1.__assign(tslib_1.__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = colors_1.rgb(0, 0, 0);\n  var borderColor = (_b = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n  var normalBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  // Update color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(checkBox.acroField, textColor);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    thickness: 1.5,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    markColor: textColor\n  };\n  return {\n    normal: {\n      on: tslib_1.__spreadArrays(rotate, operations_1.drawCheckBox(tslib_1.__assign(tslib_1.__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: true\n      }))),\n      off: tslib_1.__spreadArrays(rotate, operations_1.drawCheckBox(tslib_1.__assign(tslib_1.__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: false\n      })))\n    },\n    down: {\n      on: tslib_1.__spreadArrays(rotate, operations_1.drawCheckBox(tslib_1.__assign(tslib_1.__assign({}, options), {\n        color: downBackgroundColor,\n        filled: true\n      }))),\n      off: tslib_1.__spreadArrays(rotate, operations_1.drawCheckBox(tslib_1.__assign(tslib_1.__assign({}, options), {\n        color: downBackgroundColor,\n        filled: false\n      })))\n    }\n  };\n};\nexports.defaultRadioGroupAppearanceProvider = function (radioGroup, widget) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(radioGroup.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = rotations_1.reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = rotations_1.adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = operations_1.rotateInPlace(tslib_1.__assign(tslib_1.__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = colors_1.rgb(0, 0, 0);\n  var borderColor = (_b = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n  var normalBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  // Update color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(radioGroup.acroField, textColor);\n  }\n  var options = {\n    x: width / 2,\n    y: height / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    dotColor: textColor\n  };\n  return {\n    normal: {\n      on: tslib_1.__spreadArrays(rotate, operations_1.drawRadioButton(tslib_1.__assign(tslib_1.__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: true\n      }))),\n      off: tslib_1.__spreadArrays(rotate, operations_1.drawRadioButton(tslib_1.__assign(tslib_1.__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: false\n      })))\n    },\n    down: {\n      on: tslib_1.__spreadArrays(rotate, operations_1.drawRadioButton(tslib_1.__assign(tslib_1.__assign({}, options), {\n        color: downBackgroundColor,\n        filled: true\n      }))),\n      off: tslib_1.__spreadArrays(rotate, operations_1.drawRadioButton(tslib_1.__assign(tslib_1.__assign({}, options), {\n        color: downBackgroundColor,\n        filled: false\n      })))\n    }\n  };\n};\nexports.defaultButtonAppearanceProvider = function (button, widget, font) {\n  var _a, _b, _c, _d, _e;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(button.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(button.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var captions = ap === null || ap === void 0 ? void 0 : ap.getCaptions();\n  var normalText = (_a = captions === null || captions === void 0 ? void 0 : captions.normal) !== null && _a !== void 0 ? _a : '';\n  var downText = (_c = (_b = captions === null || captions === void 0 ? void 0 : captions.down) !== null && _b !== void 0 ? _b : normalText) !== null && _c !== void 0 ? _c : '';\n  var borderWidth = (_d = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _d !== void 0 ? _d : 0;\n  var rotation = rotations_1.reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _f = rotations_1.adjustDimsForRotation(rectangle, rotation),\n    width = _f.width,\n    height = _f.height;\n  var rotate = operations_1.rotateInPlace(tslib_1.__assign(tslib_1.__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = colors_1.rgb(0, 0, 0);\n  var borderColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  var bounds = {\n    x: borderWidth,\n    y: borderWidth,\n    width: width - borderWidth * 2,\n    height: height - borderWidth * 2\n  };\n  var normalLayout = layout_1.layoutSinglelineText(normalText, {\n    alignment: alignment_1.TextAlignment.Center,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  });\n  var downLayout = layout_1.layoutSinglelineText(downText, {\n    alignment: alignment_1.TextAlignment.Center,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  });\n  // Update font size and color\n  var fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\n  var textColor = (_e = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _e !== void 0 ? _e : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(button.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize\n  };\n  return {\n    normal: tslib_1.__spreadArrays(rotate, operations_1.drawButton(tslib_1.__assign(tslib_1.__assign({}, options), {\n      color: normalBackgroundColor,\n      textLines: [normalLayout.line]\n    }))),\n    down: tslib_1.__spreadArrays(rotate, operations_1.drawButton(tslib_1.__assign(tslib_1.__assign({}, options), {\n      color: downBackgroundColor,\n      textLines: [downLayout.line]\n    })))\n  };\n};\nexports.defaultTextFieldAppearanceProvider = function (textField, widget, font) {\n  var _a, _b, _c, _d;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(textField.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(textField.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var text = (_a = textField.getText()) !== null && _a !== void 0 ? _a : '';\n  var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n  var rotation = rotations_1.reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _e = rotations_1.adjustDimsForRotation(rectangle, rotation),\n    width = _e.width,\n    height = _e.height;\n  var rotate = operations_1.rotateInPlace(tslib_1.__assign(tslib_1.__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = colors_1.rgb(0, 0, 0);\n  var borderColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var textLines;\n  var fontSize;\n  var padding = textField.isCombed() ? 0 : 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  if (textField.isMultiline()) {\n    var layout = layout_1.layoutMultilineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    });\n    textLines = layout.lines;\n    fontSize = layout.fontSize;\n  } else if (textField.isCombed()) {\n    var layout = layout_1.layoutCombedText(text, {\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds,\n      cellCount: (_c = textField.getMaxLength()) !== null && _c !== void 0 ? _c : 0\n    });\n    textLines = layout.cells;\n    fontSize = layout.fontSize;\n  } else {\n    var layout = layout_1.layoutSinglelineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    });\n    textLines = [layout.line];\n    fontSize = layout.fontSize;\n  }\n  // Update font size and color\n  var textColor = (_d = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _d !== void 0 ? _d : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: textLines,\n    padding: padding\n  };\n  return tslib_1.__spreadArrays(rotate, operations_1.drawTextField(options));\n};\nexports.defaultDropdownAppearanceProvider = function (dropdown, widget, font) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(dropdown.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(dropdown.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var text = (_a = dropdown.getSelected()[0]) !== null && _a !== void 0 ? _a : '';\n  var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n  var rotation = rotations_1.reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = rotations_1.adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = operations_1.rotateInPlace(tslib_1.__assign(tslib_1.__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = colors_1.rgb(0, 0, 0);\n  var borderColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var padding = 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  var _e = layout_1.layoutSinglelineText(text, {\n      alignment: alignment_1.TextAlignment.Left,\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    }),\n    line = _e.line,\n    fontSize = _e.fontSize;\n  // Update font size and color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: [line],\n    padding: padding\n  };\n  return tslib_1.__spreadArrays(rotate, operations_1.drawTextField(options));\n};\nexports.defaultOptionListAppearanceProvider = function (optionList, widget, font) {\n  var _a, _b;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(optionList.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(optionList.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = rotations_1.reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _c = rotations_1.adjustDimsForRotation(rectangle, rotation),\n    width = _c.width,\n    height = _c.height;\n  var rotate = operations_1.rotateInPlace(tslib_1.__assign(tslib_1.__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = colors_1.rgb(0, 0, 0);\n  var borderColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = colors_1.componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var options = optionList.getOptions();\n  var selected = optionList.getSelected();\n  if (optionList.isSorted()) options.sort();\n  var text = '';\n  for (var idx = 0, len = options.length; idx < len; idx++) {\n    text += options[idx];\n    if (idx < len - 1) text += '\\n';\n  }\n  var padding = 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  var _d = layout_1.layoutMultilineText(text, {\n      alignment: alignment_1.TextAlignment.Left,\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    }),\n    lines = _d.lines,\n    fontSize = _d.fontSize,\n    lineHeight = _d.lineHeight;\n  var selectedLines = [];\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    var line = lines[idx];\n    if (selected.includes(line.text)) selectedLines.push(idx);\n  }\n  var blue = colors_1.rgb(153 / 255, 193 / 255, 218 / 255);\n  // Update font size and color\n  var textColor = (_b = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _b !== void 0 ? _b : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\n  }\n  return tslib_1.__spreadArrays(rotate, operations_1.drawOptionList({\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: lines,\n    lineHeight: lineHeight,\n    selectedColor: blue,\n    selectedLines: selectedLines,\n    padding: padding\n  }));\n};","map":{"version":3,"names":["operations_1","require","colors_1","rotations_1","layout_1","alignment_1","operators_1","utils_1","exports","normalizeAppearance","appearance","normal","tfRegex","getDefaultFontSize","field","da","_a","getDefaultAppearance","daMatch","_b","findLastMatch","match","defaultFontSize","Number","isFinite","undefined","colorRegex","getDefaultColor","c1","c2","c3","c4","colorSpace","grayscale","rgb","cmyk","updateDefaultAppearance","color","font","fontSize","setFillingColor","toString","setFontAndSize","name","join","setDefaultAppearance","defaultCheckBoxAppearanceProvider","checkBox","widget","widgetColor","fieldColor","acroField","rectangle","getRectangle","ap","getAppearanceCharacteristics","bs","getBorderStyle","borderWidth","getWidth","rotation","reduceRotation","getRotation","_d","adjustDimsForRotation","width","height","rotate","rotateInPlace","tslib_1","__assign","black","borderColor","componentsToColor","getBorderColor","normalBackgroundColor","getBackgroundColor","downBackgroundColor","textColor","_c","options","x","y","thickness","markColor","on","__spreadArrays","drawCheckBox","filled","off","down","defaultRadioGroupAppearanceProvider","radioGroup","dotColor","drawRadioButton","defaultButtonAppearanceProvider","button","widgetFontSize","fieldFontSize","captions","getCaptions","normalText","downText","_f","bounds","normalLayout","layoutSinglelineText","alignment","TextAlignment","Center","downLayout","Math","min","_e","drawButton","textLines","line","defaultTextFieldAppearanceProvider","textField","text","getText","padding","isCombed","isMultiline","layout","layoutMultilineText","getAlignment","lines","layoutCombedText","cellCount","getMaxLength","cells","drawTextField","defaultDropdownAppearanceProvider","dropdown","getSelected","Left","defaultOptionListAppearanceProvider","optionList","getOptions","selected","isSorted","sort","idx","len","length","lineHeight","selectedLines","includes","push","blue","drawOptionList","selectedColor"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/form/appearances.ts"],"sourcesContent":["import { PDFOperator, PDFWidgetAnnotation } from 'src/core';\nimport PDFFont from 'src/api/PDFFont';\nimport PDFButton from 'src/api/form/PDFButton';\nimport PDFCheckBox from 'src/api/form/PDFCheckBox';\nimport PDFDropdown from 'src/api/form/PDFDropdown';\nimport PDFField from 'src/api/form/PDFField';\nimport PDFOptionList from 'src/api/form/PDFOptionList';\nimport PDFRadioGroup from 'src/api/form/PDFRadioGroup';\nimport PDFSignature from 'src/api/form/PDFSignature';\nimport PDFTextField from 'src/api/form/PDFTextField';\nimport {\n  drawCheckBox,\n  rotateInPlace,\n  drawRadioButton,\n  drawButton,\n  drawTextField,\n  drawOptionList,\n} from 'src/api/operations';\nimport {\n  rgb,\n  componentsToColor,\n  setFillingColor,\n  grayscale,\n  cmyk,\n  Color,\n} from 'src/api/colors';\nimport { reduceRotation, adjustDimsForRotation } from 'src/api/rotations';\nimport {\n  layoutMultilineText,\n  layoutCombedText,\n  TextPosition,\n  layoutSinglelineText,\n} from 'src/api/text/layout';\nimport { TextAlignment } from 'src/api/text/alignment';\nimport { setFontAndSize } from 'src/api/operators';\nimport { findLastMatch } from 'src/utils';\n\n/*********************** Appearance Provider Types ****************************/\n\ntype CheckBoxAppearanceProvider = (\n  checkBox: PDFCheckBox,\n  widget: PDFWidgetAnnotation,\n) => AppearanceOrMapping<{\n  on: PDFOperator[];\n  off: PDFOperator[];\n}>;\n\ntype RadioGroupAppearanceProvider = (\n  radioGroup: PDFRadioGroup,\n  widget: PDFWidgetAnnotation,\n) => AppearanceOrMapping<{\n  on: PDFOperator[];\n  off: PDFOperator[];\n}>;\n\ntype ButtonAppearanceProvider = (\n  button: PDFButton,\n  widget: PDFWidgetAnnotation,\n  font: PDFFont,\n) => AppearanceOrMapping<PDFOperator[]>;\n\ntype DropdownAppearanceProvider = (\n  dropdown: PDFDropdown,\n  widget: PDFWidgetAnnotation,\n  font: PDFFont,\n) => AppearanceOrMapping<PDFOperator[]>;\n\ntype OptionListAppearanceProvider = (\n  optionList: PDFOptionList,\n  widget: PDFWidgetAnnotation,\n  font: PDFFont,\n) => AppearanceOrMapping<PDFOperator[]>;\n\ntype TextFieldAppearanceProvider = (\n  textField: PDFTextField,\n  widget: PDFWidgetAnnotation,\n  font: PDFFont,\n) => AppearanceOrMapping<PDFOperator[]>;\n\ntype SignatureAppearanceProvider = (\n  signature: PDFSignature,\n  widget: PDFWidgetAnnotation,\n  font: PDFFont,\n) => AppearanceOrMapping<PDFOperator[]>;\n\n/******************* Appearance Provider Utility Types ************************/\n\nexport type AppearanceMapping<T> = { normal: T; rollover?: T; down?: T };\n\ntype AppearanceOrMapping<T> = T | AppearanceMapping<T>;\n\n// prettier-ignore\nexport type AppearanceProviderFor<T extends PDFField> = \n  T extends PDFCheckBox   ? CheckBoxAppearanceProvider\n: T extends PDFRadioGroup ? RadioGroupAppearanceProvider\n: T extends PDFButton     ? ButtonAppearanceProvider\n: T extends PDFDropdown   ? DropdownAppearanceProvider\n: T extends PDFOptionList ? OptionListAppearanceProvider\n: T extends PDFTextField  ? TextFieldAppearanceProvider\n: T extends PDFSignature  ? SignatureAppearanceProvider\n: never;\n\n/********************* Appearance Provider Functions **************************/\n\nexport const normalizeAppearance = <T>(\n  appearance: T | AppearanceMapping<T>,\n): AppearanceMapping<T> => {\n  if ('normal' in appearance) return appearance;\n  return { normal: appearance };\n};\n\n// Examples:\n//   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\n//   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\nconst tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\n\nconst getDefaultFontSize = (field: {\n  getDefaultAppearance(): string | undefined;\n}) => {\n  const da = field.getDefaultAppearance() ?? '';\n  const daMatch = findLastMatch(da, tfRegex).match ?? [];\n  const defaultFontSize = Number(daMatch[2]);\n  return isFinite(defaultFontSize) ? defaultFontSize : undefined;\n};\n\n// Examples:\n//   `0.3 g` -> ['0.3', 'g']\n//   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\n//   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\nconst colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\n\nconst getDefaultColor = (field: {\n  getDefaultAppearance(): string | undefined;\n}) => {\n  const da = field.getDefaultAppearance() ?? '';\n  const daMatch = findLastMatch(da, colorRegex).match;\n\n  const [, c1, c2, c3, c4, colorSpace] = daMatch ?? [];\n\n  if (colorSpace === 'g' && c1) {\n    return grayscale(Number(c1));\n  }\n  if (colorSpace === 'rg' && c1 && c2 && c3) {\n    return rgb(Number(c1), Number(c2), Number(c3));\n  }\n  if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\n    return cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\n  }\n\n  return undefined;\n};\n\nconst updateDefaultAppearance = (\n  field: { setDefaultAppearance(appearance: string): void },\n  color: Color,\n  font?: PDFFont,\n  fontSize: number = 0,\n) => {\n  const da = [\n    setFillingColor(color).toString(),\n    setFontAndSize(font?.name ?? 'dummy__noop', fontSize).toString(),\n  ].join('\\n');\n  field.setDefaultAppearance(da);\n};\n\nexport const defaultCheckBoxAppearanceProvider: AppearanceProviderFor<PDFCheckBox> = (\n  checkBox,\n  widget,\n) => {\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  const widgetColor = getDefaultColor(widget);\n  const fieldColor = getDefaultColor(checkBox.acroField);\n\n  const rectangle = widget.getRectangle();\n  const ap = widget.getAppearanceCharacteristics();\n  const bs = widget.getBorderStyle();\n\n  const borderWidth = bs?.getWidth() ?? 0;\n  const rotation = reduceRotation(ap?.getRotation());\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\n\n  const rotate = rotateInPlace({ ...rectangle, rotation });\n\n  const black = rgb(0, 0, 0);\n  const borderColor = componentsToColor(ap?.getBorderColor()) ?? black;\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\n  const downBackgroundColor = componentsToColor(ap?.getBackgroundColor(), 0.8);\n\n  // Update color\n  const textColor = widgetColor ?? fieldColor ?? black;\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(checkBox.acroField, textColor);\n  }\n\n  const options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    thickness: 1.5,\n    borderWidth,\n    borderColor,\n    markColor: textColor,\n  };\n\n  return {\n    normal: {\n      on: [\n        ...rotate,\n        ...drawCheckBox({\n          ...options,\n          color: normalBackgroundColor,\n          filled: true,\n        }),\n      ],\n      off: [\n        ...rotate,\n        ...drawCheckBox({\n          ...options,\n          color: normalBackgroundColor,\n          filled: false,\n        }),\n      ],\n    },\n    down: {\n      on: [\n        ...rotate,\n        ...drawCheckBox({\n          ...options,\n          color: downBackgroundColor,\n          filled: true,\n        }),\n      ],\n      off: [\n        ...rotate,\n        ...drawCheckBox({\n          ...options,\n          color: downBackgroundColor,\n          filled: false,\n        }),\n      ],\n    },\n  };\n};\n\nexport const defaultRadioGroupAppearanceProvider: AppearanceProviderFor<PDFRadioGroup> = (\n  radioGroup,\n  widget,\n) => {\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  const widgetColor = getDefaultColor(widget);\n  const fieldColor = getDefaultColor(radioGroup.acroField);\n\n  const rectangle = widget.getRectangle();\n  const ap = widget.getAppearanceCharacteristics();\n  const bs = widget.getBorderStyle();\n\n  const borderWidth = bs?.getWidth() ?? 0;\n  const rotation = reduceRotation(ap?.getRotation());\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\n\n  const rotate = rotateInPlace({ ...rectangle, rotation });\n\n  const black = rgb(0, 0, 0);\n  const borderColor = componentsToColor(ap?.getBorderColor()) ?? black;\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\n  const downBackgroundColor = componentsToColor(ap?.getBackgroundColor(), 0.8);\n\n  // Update color\n  const textColor = widgetColor ?? fieldColor ?? black;\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(radioGroup.acroField, textColor);\n  }\n\n  const options = {\n    x: width / 2,\n    y: height / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth,\n    borderColor,\n    dotColor: textColor,\n  };\n\n  return {\n    normal: {\n      on: [\n        ...rotate,\n        ...drawRadioButton({\n          ...options,\n          color: normalBackgroundColor,\n          filled: true,\n        }),\n      ],\n      off: [\n        ...rotate,\n        ...drawRadioButton({\n          ...options,\n          color: normalBackgroundColor,\n          filled: false,\n        }),\n      ],\n    },\n    down: {\n      on: [\n        ...rotate,\n        ...drawRadioButton({\n          ...options,\n          color: downBackgroundColor,\n          filled: true,\n        }),\n      ],\n      off: [\n        ...rotate,\n        ...drawRadioButton({\n          ...options,\n          color: downBackgroundColor,\n          filled: false,\n        }),\n      ],\n    },\n  };\n};\n\nexport const defaultButtonAppearanceProvider: AppearanceProviderFor<PDFButton> = (\n  button,\n  widget,\n  font,\n) => {\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  const widgetColor = getDefaultColor(widget);\n  const fieldColor = getDefaultColor(button.acroField);\n  const widgetFontSize = getDefaultFontSize(widget);\n  const fieldFontSize = getDefaultFontSize(button.acroField);\n\n  const rectangle = widget.getRectangle();\n  const ap = widget.getAppearanceCharacteristics();\n  const bs = widget.getBorderStyle();\n  const captions = ap?.getCaptions();\n  const normalText = captions?.normal ?? '';\n  const downText = captions?.down ?? normalText ?? '';\n\n  const borderWidth = bs?.getWidth() ?? 0;\n  const rotation = reduceRotation(ap?.getRotation());\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\n\n  const rotate = rotateInPlace({ ...rectangle, rotation });\n\n  const black = rgb(0, 0, 0);\n\n  const borderColor = componentsToColor(ap?.getBorderColor());\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\n  const downBackgroundColor = componentsToColor(ap?.getBackgroundColor(), 0.8);\n\n  const bounds = {\n    x: borderWidth,\n    y: borderWidth,\n    width: width - borderWidth * 2,\n    height: height - borderWidth * 2,\n  };\n  const normalLayout = layoutSinglelineText(normalText, {\n    alignment: TextAlignment.Center,\n    fontSize: widgetFontSize ?? fieldFontSize,\n    font,\n    bounds,\n  });\n  const downLayout = layoutSinglelineText(downText, {\n    alignment: TextAlignment.Center,\n    fontSize: widgetFontSize ?? fieldFontSize,\n    font,\n    bounds,\n  });\n\n  // Update font size and color\n  const fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\n  const textColor = widgetColor ?? fieldColor ?? black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(button.acroField, textColor, font, fontSize);\n  }\n\n  const options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth,\n    borderColor,\n    textColor,\n    font: font.name,\n    fontSize,\n  };\n\n  return {\n    normal: [\n      ...rotate,\n      ...drawButton({\n        ...options,\n        color: normalBackgroundColor,\n        textLines: [normalLayout.line],\n      }),\n    ],\n    down: [\n      ...rotate,\n      ...drawButton({\n        ...options,\n        color: downBackgroundColor,\n        textLines: [downLayout.line],\n      }),\n    ],\n  };\n};\n\nexport const defaultTextFieldAppearanceProvider: AppearanceProviderFor<PDFTextField> = (\n  textField,\n  widget,\n  font,\n) => {\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  const widgetColor = getDefaultColor(widget);\n  const fieldColor = getDefaultColor(textField.acroField);\n  const widgetFontSize = getDefaultFontSize(widget);\n  const fieldFontSize = getDefaultFontSize(textField.acroField);\n\n  const rectangle = widget.getRectangle();\n  const ap = widget.getAppearanceCharacteristics();\n  const bs = widget.getBorderStyle();\n  const text = textField.getText() ?? '';\n\n  const borderWidth = bs?.getWidth() ?? 0;\n  const rotation = reduceRotation(ap?.getRotation());\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\n\n  const rotate = rotateInPlace({ ...rectangle, rotation });\n\n  const black = rgb(0, 0, 0);\n\n  const borderColor = componentsToColor(ap?.getBorderColor());\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\n\n  let textLines: TextPosition[];\n  let fontSize: number;\n\n  const padding = textField.isCombed() ? 0 : 1;\n  const bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2,\n  };\n  if (textField.isMultiline()) {\n    const layout = layoutMultilineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize ?? fieldFontSize,\n      font,\n      bounds,\n    });\n    textLines = layout.lines;\n    fontSize = layout.fontSize;\n  } else if (textField.isCombed()) {\n    const layout = layoutCombedText(text, {\n      fontSize: widgetFontSize ?? fieldFontSize,\n      font,\n      bounds,\n      cellCount: textField.getMaxLength() ?? 0,\n    });\n    textLines = layout.cells;\n    fontSize = layout.fontSize;\n  } else {\n    const layout = layoutSinglelineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize ?? fieldFontSize,\n      font,\n      bounds,\n    });\n    textLines = [layout.line];\n    fontSize = layout.fontSize;\n  }\n\n  // Update font size and color\n  const textColor = widgetColor ?? fieldColor ?? black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\n  }\n\n  const options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth ?? 0,\n    borderColor,\n    textColor,\n    font: font.name,\n    fontSize,\n    color: normalBackgroundColor,\n    textLines,\n    padding,\n  };\n\n  return [...rotate, ...drawTextField(options)];\n};\n\nexport const defaultDropdownAppearanceProvider: AppearanceProviderFor<PDFDropdown> = (\n  dropdown,\n  widget,\n  font,\n) => {\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  const widgetColor = getDefaultColor(widget);\n  const fieldColor = getDefaultColor(dropdown.acroField);\n  const widgetFontSize = getDefaultFontSize(widget);\n  const fieldFontSize = getDefaultFontSize(dropdown.acroField);\n\n  const rectangle = widget.getRectangle();\n  const ap = widget.getAppearanceCharacteristics();\n  const bs = widget.getBorderStyle();\n  const text = dropdown.getSelected()[0] ?? '';\n\n  const borderWidth = bs?.getWidth() ?? 0;\n  const rotation = reduceRotation(ap?.getRotation());\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\n\n  const rotate = rotateInPlace({ ...rectangle, rotation });\n\n  const black = rgb(0, 0, 0);\n\n  const borderColor = componentsToColor(ap?.getBorderColor());\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\n\n  const padding = 1;\n  const bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2,\n  };\n  const { line, fontSize } = layoutSinglelineText(text, {\n    alignment: TextAlignment.Left,\n    fontSize: widgetFontSize ?? fieldFontSize,\n    font,\n    bounds,\n  });\n\n  // Update font size and color\n  const textColor = widgetColor ?? fieldColor ?? black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\n  }\n\n  const options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth ?? 0,\n    borderColor,\n    textColor,\n    font: font.name,\n    fontSize,\n    color: normalBackgroundColor,\n    textLines: [line],\n    padding,\n  };\n\n  return [...rotate, ...drawTextField(options)];\n};\n\nexport const defaultOptionListAppearanceProvider: AppearanceProviderFor<PDFOptionList> = (\n  optionList,\n  widget,\n  font,\n) => {\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  const widgetColor = getDefaultColor(widget);\n  const fieldColor = getDefaultColor(optionList.acroField);\n  const widgetFontSize = getDefaultFontSize(widget);\n  const fieldFontSize = getDefaultFontSize(optionList.acroField);\n\n  const rectangle = widget.getRectangle();\n  const ap = widget.getAppearanceCharacteristics();\n  const bs = widget.getBorderStyle();\n\n  const borderWidth = bs?.getWidth() ?? 0;\n  const rotation = reduceRotation(ap?.getRotation());\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\n\n  const rotate = rotateInPlace({ ...rectangle, rotation });\n\n  const black = rgb(0, 0, 0);\n\n  const borderColor = componentsToColor(ap?.getBorderColor());\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\n\n  const options = optionList.getOptions();\n  const selected = optionList.getSelected();\n\n  if (optionList.isSorted()) options.sort();\n\n  let text = '';\n  for (let idx = 0, len = options.length; idx < len; idx++) {\n    text += options[idx];\n    if (idx < len - 1) text += '\\n';\n  }\n\n  const padding = 1;\n  const bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2,\n  };\n  const { lines, fontSize, lineHeight } = layoutMultilineText(text, {\n    alignment: TextAlignment.Left,\n    fontSize: widgetFontSize ?? fieldFontSize,\n    font,\n    bounds,\n  });\n\n  const selectedLines: number[] = [];\n  for (let idx = 0, len = lines.length; idx < len; idx++) {\n    const line = lines[idx];\n    if (selected.includes(line.text)) selectedLines.push(idx);\n  }\n\n  const blue = rgb(153 / 255, 193 / 255, 218 / 255);\n\n  // Update font size and color\n  const textColor = widgetColor ?? fieldColor ?? black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\n  }\n\n  return [\n    ...rotate,\n    ...drawOptionList({\n      x: 0 + borderWidth / 2,\n      y: 0 + borderWidth / 2,\n      width: width - borderWidth,\n      height: height - borderWidth,\n      borderWidth: borderWidth ?? 0,\n      borderColor,\n      textColor,\n      font: font.name,\n      fontSize,\n      color: normalBackgroundColor,\n      textLines: lines,\n      lineHeight,\n      selectedColor: blue,\n      selectedLines,\n      padding,\n    }),\n  ];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}