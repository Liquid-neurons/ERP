{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFPage_1 = tslib_1.__importDefault(require(\"../PDFPage\"));\nvar PDFFont_1 = tslib_1.__importDefault(require(\"../PDFFont\"));\nvar alignment_1 = require(\"../image/alignment\");\nvar appearances_1 = require(\"./appearances\");\nvar PDFField_1 = tslib_1.__importStar(require(\"./PDFField\"));\nvar colors_1 = require(\"../colors\");\nvar rotations_1 = require(\"../rotations\");\nvar core_1 = require(\"../../core\");\nvar utils_1 = require(\"../../utils\");\n/**\n * Represents a button field of a [[PDFForm]].\n *\n * [[PDFButton]] fields are interactive controls that users can click with their\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\n * is to perform an action when the user clicks on it, such as opening a print\n * modal or resetting the form. Buttons are typically rectangular in shape and\n * have a text label describing the action that they perform when clicked.\n */\nvar PDFButton = /** @class */function (_super) {\n  tslib_1.__extends(PDFButton, _super);\n  function PDFButton(acroPushButton, ref, doc) {\n    var _this = _super.call(this, acroPushButton, ref, doc) || this;\n    utils_1.assertIs(acroPushButton, 'acroButton', [[core_1.PDFAcroPushButton, 'PDFAcroPushButton']]);\n    _this.acroField = acroPushButton;\n    return _this;\n  }\n  /**\n   * Display an image inside the bounds of this button's widgets. For example:\n   * ```js\n   * const pngImage = await pdfDoc.embedPng(...)\n   * const button = form.getButton('some.button.field')\n   * button.setImage(pngImage, ImageAlignment.Center)\n   * ```\n   * This will update the appearances streams for each of this button's widgets.\n   * @param image The image that should be displayed.\n   * @param alignment The alignment of the image.\n   */\n  PDFButton.prototype.setImage = function (image, alignment) {\n    if (alignment === void 0) {\n      alignment = alignment_1.ImageAlignment.Center;\n    }\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n      this.updateWidgetAppearances(widget, {\n        normal: streamRef\n      });\n    }\n    this.markAsClean();\n  };\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this button. Font sizes may\n   * be integer or floating point numbers. Supplying a negative font size will\n   * cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * button.setFontSize(4)\n   * button.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  PDFButton.prototype.setFontSize = function (fontSize) {\n    utils_1.assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\n   * Show this button on the specified page with the given text. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('some.button.field')\n   *\n   * button.addToPage('Do Stuff', page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this button field.\n   * @param text The text to be displayed for this button widget.\n   * @param page The page to which this button widget should be added.\n   * @param options The options to be used when adding this button widget.\n   */\n  PDFButton.prototype.addToPage = function (\n  // TODO: This needs to be optional, e.g. for image buttons\n  text, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    utils_1.assertOrUndefined(text, 'text', ['string']);\n    utils_1.assertOrUndefined(page, 'page', [[PDFPage_1.default, 'PDFPage']]);\n    PDFField_1.assertFieldAppearanceOptions(options);\n    // Create a widget for this button\n    var widget = this.createWidget({\n      x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n      y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n      width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n      height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n      textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : colors_1.rgb(0, 0, 0),\n      backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : colors_1.rgb(0.75, 0.75, 0.75),\n      borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n      borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n      rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : rotations_1.degrees(0),\n      caption: text,\n      hidden: options === null || options === void 0 ? void 0 : options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this button has been marked as dirty, or if any of this\n   * button's widgets do not have an appearance stream. For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * if (button.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this button needs an appearance update.\n   */\n  PDFButton.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof core_1.PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the default appearance provider for buttons. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  PDFButton.prototype.defaultUpdateAppearances = function (font) {\n    utils_1.assertIs(font, 'font', [[PDFFont_1.default, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for buttons will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return {\n   *     normal: drawButton(...),\n   *     down: drawButton(...),\n   *   }\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFButton.prototype.updateAppearances = function (font, provider) {\n    utils_1.assertIs(font, 'font', [[PDFFont_1.default, 'PDFFont']]);\n    utils_1.assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n  };\n  PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : appearances_1.defaultButtonAppearanceProvider;\n    var appearances = appearances_1.normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getButton]] method, which will create an\n   * > instance of [[PDFButton]] for you.\n   *\n   * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\n   *\n   * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\n   * @param ref The unique reference for this button.\n   * @param doc The document to which this button will belong.\n   */\n  PDFButton.of = function (acroPushButton, ref, doc) {\n    return new PDFButton(acroPushButton, ref, doc);\n  };\n  return PDFButton;\n}(PDFField_1.default);\nexports.default = PDFButton;","map":{"version":3,"names":["PDFPage_1","tslib_1","__importDefault","require","PDFFont_1","alignment_1","appearances_1","PDFField_1","__importStar","colors_1","rotations_1","core_1","utils_1","PDFButton","_super","__extends","acroPushButton","ref","doc","_this","call","assertIs","PDFAcroPushButton","acroField","prototype","setImage","image","alignment","ImageAlignment","Center","widgets","getWidgets","idx","len","length","widget","streamRef","createImageAppearanceStream","updateWidgetAppearances","normal","markAsClean","setFontSize","fontSize","assertPositive","markAsDirty","addToPage","text","page","options","assertOrUndefined","default","assertFieldAppearanceOptions","createWidget","x","_a","_b","borderWidth","y","_c","_d","width","_e","height","_f","textColor","_g","rgb","backgroundColor","_h","borderColor","_j","rotate","_k","degrees","caption","hidden","widgetRef","context","register","dict","addWidget","font","_l","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","isDirty","hasAppearances","getAppearances","PDFStream","defaultUpdateAppearances","updateAppearances","provider","Function","apProvider","defaultButtonAppearanceProvider","appearances","normalizeAppearance","updateWidgetAppearanceWithFont","of"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/form/PDFButton.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\nimport PDFPage from 'src/api/PDFPage';\nimport PDFFont from 'src/api/PDFFont';\nimport PDFImage from 'src/api/PDFImage';\nimport { ImageAlignment } from 'src/api/image/alignment';\nimport {\n  AppearanceProviderFor,\n  normalizeAppearance,\n  defaultButtonAppearanceProvider,\n} from 'src/api/form/appearances';\nimport PDFField, {\n  FieldAppearanceOptions,\n  assertFieldAppearanceOptions,\n} from 'src/api/form/PDFField';\nimport { rgb } from 'src/api/colors';\nimport { degrees } from 'src/api/rotations';\n\nimport {\n  PDFRef,\n  PDFStream,\n  PDFAcroPushButton,\n  PDFWidgetAnnotation,\n} from 'src/core';\nimport { assertIs, assertOrUndefined, assertPositive } from 'src/utils';\n\n/**\n * Represents a button field of a [[PDFForm]].\n *\n * [[PDFButton]] fields are interactive controls that users can click with their\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\n * is to perform an action when the user clicks on it, such as opening a print\n * modal or resetting the form. Buttons are typically rectangular in shape and\n * have a text label describing the action that they perform when clicked.\n */\nexport default class PDFButton extends PDFField {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getButton]] method, which will create an\n   * > instance of [[PDFButton]] for you.\n   *\n   * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\n   *\n   * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\n   * @param ref The unique reference for this button.\n   * @param doc The document to which this button will belong.\n   */\n  static of = (\n    acroPushButton: PDFAcroPushButton,\n    ref: PDFRef,\n    doc: PDFDocument,\n  ) => new PDFButton(acroPushButton, ref, doc);\n\n  /** The low-level PDFAcroPushButton wrapped by this button. */\n  readonly acroField: PDFAcroPushButton;\n\n  private constructor(\n    acroPushButton: PDFAcroPushButton,\n    ref: PDFRef,\n    doc: PDFDocument,\n  ) {\n    super(acroPushButton, ref, doc);\n\n    assertIs(acroPushButton, 'acroButton', [\n      [PDFAcroPushButton, 'PDFAcroPushButton'],\n    ]);\n\n    this.acroField = acroPushButton;\n  }\n\n  /**\n   * Display an image inside the bounds of this button's widgets. For example:\n   * ```js\n   * const pngImage = await pdfDoc.embedPng(...)\n   * const button = form.getButton('some.button.field')\n   * button.setImage(pngImage, ImageAlignment.Center)\n   * ```\n   * This will update the appearances streams for each of this button's widgets.\n   * @param image The image that should be displayed.\n   * @param alignment The alignment of the image.\n   */\n  setImage(image: PDFImage, alignment = ImageAlignment.Center) {\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const streamRef = this.createImageAppearanceStream(\n        widget,\n        image,\n        alignment,\n      );\n      this.updateWidgetAppearances(widget, { normal: streamRef });\n    }\n\n    this.markAsClean();\n  }\n\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this button. Font sizes may\n   * be integer or floating point numbers. Supplying a negative font size will\n   * cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * button.setFontSize(4)\n   * button.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  setFontSize(fontSize: number) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  }\n\n  /**\n   * Show this button on the specified page with the given text. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('some.button.field')\n   *\n   * button.addToPage('Do Stuff', page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this button field.\n   * @param text The text to be displayed for this button widget.\n   * @param page The page to which this button widget should be added.\n   * @param options The options to be used when adding this button widget.\n   */\n  addToPage(\n    // TODO: This needs to be optional, e.g. for image buttons\n    text: string,\n    page: PDFPage,\n    options?: FieldAppearanceOptions,\n  ) {\n    assertOrUndefined(text, 'text', ['string']);\n    assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n\n    // Create a widget for this button\n    const widget = this.createWidget({\n      x: (options?.x ?? 0) - (options?.borderWidth ?? 0) / 2,\n      y: (options?.y ?? 0) - (options?.borderWidth ?? 0) / 2,\n      width: options?.width ?? 100,\n      height: options?.height ?? 50,\n      textColor: options?.textColor ?? rgb(0, 0, 0),\n      backgroundColor: options?.backgroundColor ?? rgb(0.75, 0.75, 0.75),\n      borderColor: options?.borderColor,\n      borderWidth: options?.borderWidth ?? 0,\n      rotate: options?.rotate ?? degrees(0),\n      caption: text,\n      hidden: options?.hidden,\n      page: page.ref,\n    });\n    const widgetRef = this.doc.context.register(widget.dict);\n\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n\n    // Set appearance streams for widget\n    const font = options?.font ?? this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  }\n\n  /**\n   * Returns `true` if this button has been marked as dirty, or if any of this\n   * button's widgets do not have an appearance stream. For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * if (button.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this button needs an appearance update.\n   */\n  needsAppearancesUpdate(): boolean {\n    if (this.isDirty()) return true;\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const hasAppearances =\n        widget.getAppearances()?.normal instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the default appearance provider for buttons. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  defaultUpdateAppearances(font: PDFFont) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  }\n\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for buttons will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return {\n   *     normal: drawButton(...),\n   *     down: drawButton(...),\n   *   }\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  updateAppearances(\n    font: PDFFont,\n    provider?: AppearanceProviderFor<PDFButton>,\n  ) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n  }\n\n  private updateWidgetAppearance(\n    widget: PDFWidgetAnnotation,\n    font: PDFFont,\n    provider?: AppearanceProviderFor<PDFButton>,\n  ) {\n    const apProvider = provider ?? defaultButtonAppearanceProvider;\n    const appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}