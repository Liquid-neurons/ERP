{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IsNumeric = exports.IsNumericPrefix = exports.IsDigit = void 0;\nvar tslib_1 = require(\"tslib\");\nvar CharCodes_1 = tslib_1.__importDefault(require(\"./CharCodes\"));\nexports.IsDigit = new Uint8Array(256);\nexports.IsDigit[CharCodes_1.default.Zero] = 1;\nexports.IsDigit[CharCodes_1.default.One] = 1;\nexports.IsDigit[CharCodes_1.default.Two] = 1;\nexports.IsDigit[CharCodes_1.default.Three] = 1;\nexports.IsDigit[CharCodes_1.default.Four] = 1;\nexports.IsDigit[CharCodes_1.default.Five] = 1;\nexports.IsDigit[CharCodes_1.default.Six] = 1;\nexports.IsDigit[CharCodes_1.default.Seven] = 1;\nexports.IsDigit[CharCodes_1.default.Eight] = 1;\nexports.IsDigit[CharCodes_1.default.Nine] = 1;\nexports.IsNumericPrefix = new Uint8Array(256);\nexports.IsNumericPrefix[CharCodes_1.default.Period] = 1;\nexports.IsNumericPrefix[CharCodes_1.default.Plus] = 1;\nexports.IsNumericPrefix[CharCodes_1.default.Minus] = 1;\nexports.IsNumeric = new Uint8Array(256);\nfor (var idx = 0, len = 256; idx < len; idx++) {\n  exports.IsNumeric[idx] = exports.IsDigit[idx] || exports.IsNumericPrefix[idx] ? 1 : 0;\n}","map":{"version":3,"names":["CharCodes_1","tslib_1","__importDefault","require","exports","IsDigit","Uint8Array","default","Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","IsNumericPrefix","Period","Plus","Minus","IsNumeric","idx","len"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/syntax/Numeric.ts"],"sourcesContent":["import CharCodes from 'src/core/syntax/CharCodes';\n\nexport const IsDigit = new Uint8Array(256);\n\nIsDigit[CharCodes.Zero] = 1;\nIsDigit[CharCodes.One] = 1;\nIsDigit[CharCodes.Two] = 1;\nIsDigit[CharCodes.Three] = 1;\nIsDigit[CharCodes.Four] = 1;\nIsDigit[CharCodes.Five] = 1;\nIsDigit[CharCodes.Six] = 1;\nIsDigit[CharCodes.Seven] = 1;\nIsDigit[CharCodes.Eight] = 1;\nIsDigit[CharCodes.Nine] = 1;\n\nexport const IsNumericPrefix = new Uint8Array(256);\n\nIsNumericPrefix[CharCodes.Period] = 1;\nIsNumericPrefix[CharCodes.Plus] = 1;\nIsNumericPrefix[CharCodes.Minus] = 1;\n\nexport const IsNumeric = new Uint8Array(256);\n\nfor (let idx = 0, len = 256; idx < len; idx++) {\n  IsNumeric[idx] = IsDigit[idx] || IsNumericPrefix[idx] ? 1 : 0;\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,WAAA,GAAAC,OAAA,CAAAC,eAAA,CAAAC,OAAA;AAEaC,OAAA,CAAAC,OAAO,GAAG,IAAIC,UAAU,CAAC,GAAG,CAAC;AAE1CF,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACC,IAAI,CAAC,GAAG,CAAC;AAC3BJ,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACE,GAAG,CAAC,GAAG,CAAC;AAC1BL,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACG,GAAG,CAAC,GAAG,CAAC;AAC1BN,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACI,KAAK,CAAC,GAAG,CAAC;AAC5BP,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACK,IAAI,CAAC,GAAG,CAAC;AAC3BR,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACM,IAAI,CAAC,GAAG,CAAC;AAC3BT,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACO,GAAG,CAAC,GAAG,CAAC;AAC1BV,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACQ,KAAK,CAAC,GAAG,CAAC;AAC5BX,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACS,KAAK,CAAC,GAAG,CAAC;AAC5BZ,OAAA,CAAAC,OAAO,CAACL,WAAA,CAAAO,OAAS,CAACU,IAAI,CAAC,GAAG,CAAC;AAEdb,OAAA,CAAAc,eAAe,GAAG,IAAIZ,UAAU,CAAC,GAAG,CAAC;AAElDF,OAAA,CAAAc,eAAe,CAAClB,WAAA,CAAAO,OAAS,CAACY,MAAM,CAAC,GAAG,CAAC;AACrCf,OAAA,CAAAc,eAAe,CAAClB,WAAA,CAAAO,OAAS,CAACa,IAAI,CAAC,GAAG,CAAC;AACnChB,OAAA,CAAAc,eAAe,CAAClB,WAAA,CAAAO,OAAS,CAACc,KAAK,CAAC,GAAG,CAAC;AAEvBjB,OAAA,CAAAkB,SAAS,GAAG,IAAIhB,UAAU,CAAC,GAAG,CAAC;AAE5C,KAAK,IAAIiB,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,GAAG,EAAED,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;EAC7CnB,OAAA,CAAAkB,SAAS,CAACC,GAAG,CAAC,GAAGnB,OAAA,CAAAC,OAAO,CAACkB,GAAG,CAAC,IAAInB,OAAA,CAAAc,eAAe,CAACK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}