{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFPage_1 = tslib_1.__importDefault(require(\"../PDFPage\"));\nvar appearances_1 = require(\"./appearances\");\nvar colors_1 = require(\"../colors\");\nvar rotations_1 = require(\"../rotations\");\nvar PDFField_1 = tslib_1.__importStar(require(\"./PDFField\"));\nvar core_1 = require(\"../../core\");\nvar utils_1 = require(\"../../utils\");\n/**\n * Represents a check box field of a [[PDFForm]].\n *\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n * of a check box is to enable users to select from one or more options, where\n * each option is represented by a single check box. Check boxes are typically\n * square in shape and display a check mark when they are in the `on` state.\n */\nvar PDFCheckBox = /** @class */function (_super) {\n  tslib_1.__extends(PDFCheckBox, _super);\n  function PDFCheckBox(acroCheckBox, ref, doc) {\n    var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n    utils_1.assertIs(acroCheckBox, 'acroCheckBox', [[core_1.PDFAcroCheckBox, 'PDFAcroCheckBox']]);\n    _this.acroField = acroCheckBox;\n    return _this;\n  }\n  /**\n   * Mark this check box. This operation is analogous to a human user clicking\n   * a check box to fill it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been selected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.check()\n   * ```\n   *\n   * This method will mark this check box as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n   * streams will display a check mark inside the widgets of this check box\n   * field.\n   */\n  PDFCheckBox.prototype.check = function () {\n    var _a;\n    var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : core_1.PDFName.of('Yes');\n    this.markAsDirty();\n    this.acroField.setValue(onValue);\n  };\n  /**\n   * Clears this check box. This operation is analogous to a human user clicking\n   * a check box to unmark it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been deselected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was not selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.uncheck()\n   * ```\n   *\n   * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n   * for more details about what this means.\n   */\n  PDFCheckBox.prototype.uncheck = function () {\n    this.markAsDirty();\n    this.acroField.setValue(core_1.PDFName.of('Off'));\n  };\n  /**\n   * Returns `true` if this check box is selected (either by a human user via\n   * a PDF reader, or else programmatically via software). For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.isChecked()) console.log('check box is selected')\n   * ```\n   * @returns Whether or not this check box is selected.\n   */\n  PDFCheckBox.prototype.isChecked = function () {\n    var onValue = this.acroField.getOnValue();\n    return !!onValue && onValue === this.acroField.getValue();\n  };\n  /**\n   * Show this check box on the specified page. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('some.checkBox.field')\n   *\n   * checkBox.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 25,\n   *   height: 25,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   * })\n   * ```\n   * This will create a new widget for this check box field.\n   * @param page The page to which this check box widget should be added.\n   * @param options The options to be used when adding this check box widget.\n   */\n  PDFCheckBox.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f;\n    utils_1.assertIs(page, 'page', [[PDFPage_1.default, 'PDFPage']]);\n    PDFField_1.assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = colors_1.rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = colors_1.rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = colors_1.rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this check box\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : rotations_1.degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    widget.setAppearanceState(core_1.PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, core_1.PDFName.of('Yes'));\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if any of this check box's widgets do not have an\n   * appearance stream for its current state. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this check box needs an appearance update.\n   */\n  PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof core_1.PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the default appearance provider for check boxes. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.defaultUpdateAppearances()\n   * ```\n   */\n  PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  };\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for check boxs will be used. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.updateAppearances((field, widget) => {\n   *   ...\n   *   return {\n   *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *   }\n   * })\n   * ```\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFCheckBox.prototype.updateAppearances = function (provider) {\n    var _a;\n    utils_1.assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : core_1.PDFName.of('Yes');\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n    this.markAsClean();\n  };\n  PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : appearances_1.defaultCheckBoxAppearanceProvider;\n    var appearances = appearances_1.normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n   * > instance of [[PDFCheckBox]] for you.\n   *\n   * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n   *\n   * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n   * @param ref The unique reference for this check box.\n   * @param doc The document to which this check box will belong.\n   */\n  PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n    return new PDFCheckBox(acroCheckBox, ref, doc);\n  };\n  return PDFCheckBox;\n}(PDFField_1.default);\nexports.default = PDFCheckBox;","map":{"version":3,"names":["PDFPage_1","tslib_1","__importDefault","require","appearances_1","colors_1","rotations_1","PDFField_1","__importStar","core_1","utils_1","PDFCheckBox","_super","__extends","acroCheckBox","ref","doc","_this","call","assertIs","PDFAcroCheckBox","acroField","prototype","check","onValue","_a","getOnValue","PDFName","of","markAsDirty","setValue","uncheck","isChecked","getValue","addToPage","page","options","default","assertFieldAppearanceOptions","textColor","rgb","backgroundColor","borderColor","borderWidth","widget","createWidget","x","y","_b","width","_c","height","_d","_e","rotate","_f","degrees","hidden","widgetRef","context","register","dict","addWidget","setAppearanceState","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","widgets","getWidgets","idx","len","length","state","getAppearanceState","normal","getAppearances","PDFDict","has","defaultUpdateAppearances","updateAppearances","provider","assertOrUndefined","Function","markAsClean","apProvider","defaultCheckBoxAppearanceProvider","appearances","normalizeAppearance","updateOnOffWidgetAppearance"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/form/PDFCheckBox.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\nimport PDFPage from 'src/api/PDFPage';\nimport {\n  AppearanceProviderFor,\n  normalizeAppearance,\n  defaultCheckBoxAppearanceProvider,\n} from 'src/api/form/appearances';\nimport { rgb } from 'src/api/colors';\nimport { degrees } from 'src/api/rotations';\nimport PDFField, {\n  FieldAppearanceOptions,\n  assertFieldAppearanceOptions,\n} from 'src/api/form/PDFField';\n\nimport {\n  PDFName,\n  PDFRef,\n  PDFDict,\n  PDFAcroCheckBox,\n  PDFWidgetAnnotation,\n} from 'src/core';\nimport { assertIs, assertOrUndefined } from 'src/utils';\n\n/**\n * Represents a check box field of a [[PDFForm]].\n *\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n * of a check box is to enable users to select from one or more options, where\n * each option is represented by a single check box. Check boxes are typically\n * square in shape and display a check mark when they are in the `on` state.\n */\nexport default class PDFCheckBox extends PDFField {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n   * > instance of [[PDFCheckBox]] for you.\n   *\n   * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n   *\n   * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n   * @param ref The unique reference for this check box.\n   * @param doc The document to which this check box will belong.\n   */\n  static of = (acroCheckBox: PDFAcroCheckBox, ref: PDFRef, doc: PDFDocument) =>\n    new PDFCheckBox(acroCheckBox, ref, doc);\n\n  /** The low-level PDFAcroCheckBox wrapped by this check box. */\n  readonly acroField: PDFAcroCheckBox;\n\n  private constructor(\n    acroCheckBox: PDFAcroCheckBox,\n    ref: PDFRef,\n    doc: PDFDocument,\n  ) {\n    super(acroCheckBox, ref, doc);\n\n    assertIs(acroCheckBox, 'acroCheckBox', [\n      [PDFAcroCheckBox, 'PDFAcroCheckBox'],\n    ]);\n\n    this.acroField = acroCheckBox;\n  }\n\n  /**\n   * Mark this check box. This operation is analogous to a human user clicking\n   * a check box to fill it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been selected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.check()\n   * ```\n   *\n   * This method will mark this check box as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n   * streams will display a check mark inside the widgets of this check box\n   * field.\n   */\n  check() {\n    const onValue = this.acroField.getOnValue() ?? PDFName.of('Yes');\n    this.markAsDirty();\n    this.acroField.setValue(onValue);\n  }\n\n  /**\n   * Clears this check box. This operation is analogous to a human user clicking\n   * a check box to unmark it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been deselected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was not selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.uncheck()\n   * ```\n   *\n   * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n   * for more details about what this means.\n   */\n  uncheck() {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  }\n\n  /**\n   * Returns `true` if this check box is selected (either by a human user via\n   * a PDF reader, or else programmatically via software). For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.isChecked()) console.log('check box is selected')\n   * ```\n   * @returns Whether or not this check box is selected.\n   */\n  isChecked(): boolean {\n    const onValue = this.acroField.getOnValue();\n    return !!onValue && onValue === this.acroField.getValue();\n  }\n\n  /**\n   * Show this check box on the specified page. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('some.checkBox.field')\n   *\n   * checkBox.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 25,\n   *   height: 25,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   * })\n   * ```\n   * This will create a new widget for this check box field.\n   * @param page The page to which this check box widget should be added.\n   * @param options The options to be used when adding this check box widget.\n   */\n  addToPage(page: PDFPage, options?: FieldAppearanceOptions) {\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n\n    if (!options) options = {};\n\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n\n    // Create a widget for this check box\n    const widget = this.createWidget({\n      x: options.x ?? 0,\n      y: options.y ?? 0,\n      width: options.width ?? 50,\n      height: options.height ?? 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: options.borderWidth ?? 0,\n      rotate: options.rotate ?? degrees(0),\n      hidden: options.hidden,\n      page: page.ref,\n    });\n    const widgetRef = this.doc.context.register(widget.dict);\n\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n\n    // Set appearance streams for widget\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, PDFName.of('Yes'));\n\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  }\n\n  /**\n   * Returns `true` if any of this check box's widgets do not have an\n   * appearance stream for its current state. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this check box needs an appearance update.\n   */\n  needsAppearancesUpdate(): boolean {\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const state = widget.getAppearanceState();\n      const normal = widget.getAppearances()?.normal;\n\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the default appearance provider for check boxes. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.defaultUpdateAppearances()\n   * ```\n   */\n  defaultUpdateAppearances() {\n    this.updateAppearances();\n  }\n\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for check boxs will be used. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.updateAppearances((field, widget) => {\n   *   ...\n   *   return {\n   *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *   }\n   * })\n   * ```\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  updateAppearances(provider?: AppearanceProviderFor<PDFCheckBox>) {\n    assertOrUndefined(provider, 'provider', [Function]);\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const onValue = widget.getOnValue() ?? PDFName.of('Yes');\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n    this.markAsClean();\n  }\n\n  private updateWidgetAppearance(\n    widget: PDFWidgetAnnotation,\n    onValue: PDFName,\n    provider?: AppearanceProviderFor<PDFCheckBox>,\n  ) {\n    const apProvider = provider ?? defaultCheckBoxAppearanceProvider;\n    const appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}