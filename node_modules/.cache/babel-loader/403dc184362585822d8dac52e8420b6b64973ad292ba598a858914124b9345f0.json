{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"../core\");\n/**\n * Represents a file that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedFile = /** @class */function () {\n  function PDFEmbeddedFile(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable files get embedded.\n   *\n   * Embed this embeddable file in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFEmbeddedFile.prototype.embed = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var ref, Names, EmbeddedFiles, EFNames, AF;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            ref = _a.sent();\n            if (!this.doc.catalog.has(core_1.PDFName.of('Names'))) {\n              this.doc.catalog.set(core_1.PDFName.of('Names'), this.doc.context.obj({}));\n            }\n            Names = this.doc.catalog.lookup(core_1.PDFName.of('Names'), core_1.PDFDict);\n            if (!Names.has(core_1.PDFName.of('EmbeddedFiles'))) {\n              Names.set(core_1.PDFName.of('EmbeddedFiles'), this.doc.context.obj({}));\n            }\n            EmbeddedFiles = Names.lookup(core_1.PDFName.of('EmbeddedFiles'), core_1.PDFDict);\n            if (!EmbeddedFiles.has(core_1.PDFName.of('Names'))) {\n              EmbeddedFiles.set(core_1.PDFName.of('Names'), this.doc.context.obj([]));\n            }\n            EFNames = EmbeddedFiles.lookup(core_1.PDFName.of('Names'), core_1.PDFArray);\n            EFNames.push(core_1.PDFHexString.fromText(this.embedder.fileName));\n            EFNames.push(ref);\n            /**\n             * The AF-Tag is needed to achieve PDF-A3 compliance for embedded files\n             *\n             * The following document outlines the uses cases of the associated files (AF) tag.\n             * See:\n             * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n             */\n            if (!this.doc.catalog.has(core_1.PDFName.of('AF'))) {\n              this.doc.catalog.set(core_1.PDFName.of('AF'), this.doc.context.obj([]));\n            }\n            AF = this.doc.catalog.lookup(core_1.PDFName.of('AF'), core_1.PDFArray);\n            AF.push(ref);\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.attach]] method, which will create\n   * instances of [[PDFEmbeddedFile]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedFile]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this file.\n   * @param doc The document to which the file will belong.\n   * @param embedder The embedder that will be used to embed the file.\n   */\n  PDFEmbeddedFile.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedFile(ref, doc, embedder);\n  };\n  return PDFEmbeddedFile;\n}();\nexports.default = PDFEmbeddedFile;","map":{"version":3,"names":["core_1","require","PDFEmbeddedFile","ref","doc","embedder","alreadyEmbedded","prototype","embed","embedIntoContext","context","_a","sent","catalog","has","PDFName","of","set","obj","Names","lookup","PDFDict","EmbeddedFiles","EFNames","PDFArray","push","PDFHexString","fromText","fileName","AF"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/PDFEmbeddedFile.ts"],"sourcesContent":["import Embeddable from 'src/api/Embeddable';\nimport PDFDocument from 'src/api/PDFDocument';\nimport FileEmbedder from 'src/core/embedders/FileEmbedder';\nimport { PDFName, PDFArray, PDFDict, PDFHexString, PDFRef } from 'src/core';\n\n/**\n * Represents a file that has been embedded in a [[PDFDocument]].\n */\nexport default class PDFEmbeddedFile implements Embeddable {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.attach]] method, which will create\n   * instances of [[PDFEmbeddedFile]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedFile]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this file.\n   * @param doc The document to which the file will belong.\n   * @param embedder The embedder that will be used to embed the file.\n   */\n  static of = (ref: PDFRef, doc: PDFDocument, embedder: FileEmbedder) =>\n    new PDFEmbeddedFile(ref, doc, embedder);\n\n  /** The unique reference assigned to this embedded file within the document. */\n  readonly ref: PDFRef;\n\n  /** The document to which this embedded file belongs. */\n  readonly doc: PDFDocument;\n\n  private alreadyEmbedded = false;\n  private readonly embedder: FileEmbedder;\n\n  private constructor(ref: PDFRef, doc: PDFDocument, embedder: FileEmbedder) {\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable files get embedded.\n   *\n   * Embed this embeddable file in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  async embed(): Promise<void> {\n    if (!this.alreadyEmbedded) {\n      const ref = await this.embedder.embedIntoContext(\n        this.doc.context,\n        this.ref,\n      );\n\n      if (!this.doc.catalog.has(PDFName.of('Names'))) {\n        this.doc.catalog.set(PDFName.of('Names'), this.doc.context.obj({}));\n      }\n      const Names = this.doc.catalog.lookup(PDFName.of('Names'), PDFDict);\n\n      if (!Names.has(PDFName.of('EmbeddedFiles'))) {\n        Names.set(PDFName.of('EmbeddedFiles'), this.doc.context.obj({}));\n      }\n      const EmbeddedFiles = Names.lookup(PDFName.of('EmbeddedFiles'), PDFDict);\n\n      if (!EmbeddedFiles.has(PDFName.of('Names'))) {\n        EmbeddedFiles.set(PDFName.of('Names'), this.doc.context.obj([]));\n      }\n      const EFNames = EmbeddedFiles.lookup(PDFName.of('Names'), PDFArray);\n\n      EFNames.push(PDFHexString.fromText(this.embedder.fileName));\n      EFNames.push(ref);\n\n      /**\n       * The AF-Tag is needed to achieve PDF-A3 compliance for embedded files\n       *\n       * The following document outlines the uses cases of the associated files (AF) tag.\n       * See:\n       * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n       */\n\n      if (!this.doc.catalog.has(PDFName.of('AF'))) {\n        this.doc.catalog.set(PDFName.of('AF'), this.doc.context.obj([]));\n      }\n      const AF = this.doc.catalog.lookup(PDFName.of('AF'), PDFArray);\n      AF.push(ref);\n\n      this.alreadyEmbedded = true;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}