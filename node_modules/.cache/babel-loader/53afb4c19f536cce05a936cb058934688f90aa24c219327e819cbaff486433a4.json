{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar CustomFontEmbedder_1 = tslib_1.__importDefault(require(\"./CustomFontEmbedder\"));\nvar PDFHexString_1 = tslib_1.__importDefault(require(\"../objects/PDFHexString\"));\nvar utils_1 = require(\"../../utils\");\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\nvar CustomFontSubsetEmbedder = /** @class */function (_super) {\n  tslib_1.__extends(CustomFontSubsetEmbedder, _super);\n  function CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures) {\n    var _this = _super.call(this, font, fontData, customFontName, fontFeatures) || this;\n    _this.subset = _this.font.createSubset();\n    _this.glyphs = [];\n    _this.glyphCache = utils_1.Cache.populatedBy(function () {\n      return _this.glyphs;\n    });\n    _this.glyphIdMap = new Map();\n    return _this;\n  }\n  CustomFontSubsetEmbedder.for = function (fontkit, fontData, customFontName, fontFeatures) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var font;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fontkit.create(fontData)];\n          case 1:\n            font = _a.sent();\n            return [2 /*return*/, new CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures)];\n        }\n      });\n    });\n  };\n  CustomFontSubsetEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var hexCodes = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var glyph = glyphs[idx];\n      var subsetGlyphId = this.subset.includeGlyph(glyph);\n      this.glyphs[subsetGlyphId - 1] = glyph;\n      this.glyphIdMap.set(glyph.id, subsetGlyphId);\n      hexCodes[idx] = utils_1.toHexStringOfMinLength(subsetGlyphId, 4);\n    }\n    this.glyphCache.invalidate();\n    return PDFHexString_1.default.of(hexCodes.join(''));\n  };\n  CustomFontSubsetEmbedder.prototype.isCFF = function () {\n    return this.subset.cff;\n  };\n  CustomFontSubsetEmbedder.prototype.glyphId = function (glyph) {\n    return glyph ? this.glyphIdMap.get(glyph.id) : -1;\n  };\n  CustomFontSubsetEmbedder.prototype.serializeFont = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var parts = [];\n      _this.subset.encodeStream().on('data', function (bytes) {\n        return parts.push(bytes);\n      }).on('end', function () {\n        return resolve(utils_1.mergeUint8Arrays(parts));\n      }).on('error', function (err) {\n        return reject(err);\n      });\n    });\n  };\n  return CustomFontSubsetEmbedder;\n}(CustomFontEmbedder_1.default);\nexports.default = CustomFontSubsetEmbedder;","map":{"version":3,"names":["CustomFontEmbedder_1","tslib_1","__importDefault","require","PDFHexString_1","utils_1","CustomFontSubsetEmbedder","_super","__extends","font","fontData","customFontName","fontFeatures","_this","call","subset","createSubset","glyphs","glyphCache","Cache","populatedBy","glyphIdMap","Map","for","fontkit","create","_a","sent","prototype","encodeText","text","layout","hexCodes","Array","length","idx","len","glyph","subsetGlyphId","includeGlyph","set","id","toHexStringOfMinLength","invalidate","default","of","join","isCFF","cff","glyphId","get","serializeFont","Promise","resolve","reject","parts","encodeStream","on","bytes","push","mergeUint8Arrays","err","exports"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/embedders/CustomFontSubsetEmbedder.ts"],"sourcesContent":["import { Font, Fontkit, Glyph, Subset, TypeFeatures } from 'src/types/fontkit';\n\nimport CustomFontEmbedder from 'src/core/embedders/CustomFontEmbedder';\nimport PDFHexString from 'src/core/objects/PDFHexString';\nimport { Cache, mergeUint8Arrays, toHexStringOfMinLength } from 'src/utils';\n\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\nclass CustomFontSubsetEmbedder extends CustomFontEmbedder {\n  static async for(\n    fontkit: Fontkit,\n    fontData: Uint8Array,\n    customFontName?: string,\n    fontFeatures?: TypeFeatures,\n  ) {\n    const font = await fontkit.create(fontData);\n    return new CustomFontSubsetEmbedder(\n      font,\n      fontData,\n      customFontName,\n      fontFeatures,\n    );\n  }\n\n  private readonly subset: Subset;\n  private readonly glyphs: Glyph[];\n  private readonly glyphIdMap: Map<number, number>;\n\n  private constructor(\n    font: Font,\n    fontData: Uint8Array,\n    customFontName?: string,\n    fontFeatures?: TypeFeatures,\n  ) {\n    super(font, fontData, customFontName, fontFeatures);\n\n    this.subset = this.font.createSubset();\n    this.glyphs = [];\n    this.glyphCache = Cache.populatedBy(() => this.glyphs);\n    this.glyphIdMap = new Map();\n  }\n\n  encodeText(text: string): PDFHexString {\n    const { glyphs } = this.font.layout(text, this.fontFeatures);\n    const hexCodes = new Array(glyphs.length);\n\n    for (let idx = 0, len = glyphs.length; idx < len; idx++) {\n      const glyph = glyphs[idx];\n      const subsetGlyphId = this.subset.includeGlyph(glyph);\n\n      this.glyphs[subsetGlyphId - 1] = glyph;\n      this.glyphIdMap.set(glyph.id, subsetGlyphId);\n\n      hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\n    }\n\n    this.glyphCache.invalidate();\n    return PDFHexString.of(hexCodes.join(''));\n  }\n\n  protected isCFF(): boolean {\n    return (this.subset as any).cff;\n  }\n\n  protected glyphId(glyph?: Glyph): number {\n    return glyph ? this.glyphIdMap.get(glyph.id)! : -1;\n  }\n\n  protected serializeFont(): Promise<Uint8Array> {\n    return new Promise((resolve, reject) => {\n      const parts: Uint8Array[] = [];\n      this.subset\n        .encodeStream()\n        .on('data', (bytes) => parts.push(bytes))\n        .on('end', () => resolve(mergeUint8Arrays(parts)))\n        .on('error' as any, (err) => reject(err));\n    });\n  }\n}\n\nexport default CustomFontSubsetEmbedder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}