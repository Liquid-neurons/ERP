{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFPage_1 = tslib_1.__importDefault(require(\"../PDFPage\"));\nvar PDFFont_1 = tslib_1.__importDefault(require(\"../PDFFont\"));\nvar PDFField_1 = tslib_1.__importStar(require(\"./PDFField\"));\nvar appearances_1 = require(\"./appearances\");\nvar colors_1 = require(\"../colors\");\nvar rotations_1 = require(\"../rotations\");\nvar core_1 = require(\"../../core\");\nvar utils_1 = require(\"../../utils\");\n/**\n * Represents an option list field of a [[PDFForm]].\n *\n * [[PDFOptionList]] fields are interactive lists of options. The purpose of an\n * option list is to enable users to select one or more options from a set of\n * possible options. Users are able to see the full set of options without\n * first having to click on the field (though scrolling may be necessary).\n * Clicking an option in the list will cause it to be selected and displayed\n * with a highlighted background. Some option lists allow users to select\n * more than one option (see [[PDFOptionList.isMultiselect]]).\n */\nvar PDFOptionList = /** @class */function (_super) {\n  tslib_1.__extends(PDFOptionList, _super);\n  function PDFOptionList(acroListBox, ref, doc) {\n    var _this = _super.call(this, acroListBox, ref, doc) || this;\n    utils_1.assertIs(acroListBox, 'acroListBox', [[core_1.PDFAcroListBox, 'PDFAcroListBox']]);\n    _this.acroField = acroListBox;\n    return _this;\n  }\n  /**\n   * Get the list of available options for this option list. These options will\n   * be displayed to users who view this option list in a PDF reader.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * const options = optionList.getOptions()\n   * console.log('Option List options:', options)\n   * ```\n   * @returns The options for this option list.\n   */\n  PDFOptionList.prototype.getOptions = function () {\n    var rawOptions = this.acroField.getOptions();\n    var options = new Array(rawOptions.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = rawOptions[idx],\n        display = _a.display,\n        value = _a.value;\n      options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n    }\n    return options;\n  };\n  /**\n   * Get the selected options for this option list. These are the values that\n   * were selected by a human user via a PDF reader, or programatically via\n   * software.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * const selections = optionList.getSelected()\n   * console.log('Option List selections:', selections)\n   * ```\n   * @returns The selected options for this option list.\n   */\n  PDFOptionList.prototype.getSelected = function () {\n    var values = this.acroField.getValues();\n    var selected = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n    return selected;\n  };\n  /**\n   * Set the list of options that are available for this option list. These are\n   * the values that will be available for users to select when they view this\n   * option list in a PDF reader. Note that preexisting options for this\n   * option list will be removed. Only the values passed as `options` will be\n   * available to select.\n   *\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('planets.optionList')\n   * optionList.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\n   * ```\n   *\n   * This method will mark this option list as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n   * display the options this field contains inside the widgets of this text\n   * field (with selected options highlighted).\n   *\n   * **IMPORTANT:** The default font used to update appearance streams is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if this field contains any options\n   * with characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing it to\n   * [[PDFForm.updateFieldAppearances]] or [[PDFOptionList.updateAppearances]]\n   * allows you to generate appearance streams with characters outside the\n   * latin alphabet (assuming the custom font supports them).\n   *\n   * @param options The options that should be available in this option list.\n   */\n  PDFOptionList.prototype.setOptions = function (options) {\n    utils_1.assertIs(options, 'options', [Array]);\n    this.markAsDirty();\n    var optionObjects = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = {\n        value: core_1.PDFHexString.fromText(options[idx])\n      };\n    }\n    this.acroField.setOptions(optionObjects);\n  };\n  /**\n   * Add to the list of options that are available for this option list. Users\n   * will be able to select these values in a PDF reader. In addition to the\n   * values passed as `options`, any preexisting options for this option list\n   * will still be available for users to select.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('rockets.optionList')\n   * optionList.addOptions(['Saturn IV', 'Falcon Heavy'])\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   * @param options New options that should be available in this option list.\n   */\n  PDFOptionList.prototype.addOptions = function (options) {\n    utils_1.assertIs(options, 'options', ['string', Array]);\n    this.markAsDirty();\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var existingOptions = this.acroField.getOptions();\n    var newOptions = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = {\n        value: core_1.PDFHexString.fromText(optionsArr[idx])\n      };\n    }\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  };\n  /**\n   * Select one or more values for this option list. This operation is analogous\n   * to a human user opening the option list in a PDF reader and clicking on one\n   * or more values to select them. This method will update the underlying state\n   * of the option list to indicate which values have been selected. PDF\n   * libraries and readers will be able to extract these values from the saved\n   * document and determine which values were selected.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('best.superheroes.optionList')\n   * optionList.select(['One Punch Man', 'Iron Man'])\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   * @param options The options to be selected.\n   * @param merge Whether or not existing selections should be preserved.\n   */\n  PDFOptionList.prototype.select = function (options, merge) {\n    if (merge === void 0) {\n      merge = false;\n    }\n    utils_1.assertIs(options, 'options', ['string', Array]);\n    utils_1.assertIs(merge, 'merge', ['boolean']);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var validOptions = this.getOptions();\n    utils_1.assertIsSubset(optionsArr, 'option', validOptions);\n    this.markAsDirty();\n    if (optionsArr.length > 1 || optionsArr.length === 1 && merge) {\n      this.enableMultiselect();\n    }\n    var values = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = core_1.PDFHexString.fromText(optionsArr[idx]);\n    }\n    if (merge) {\n      var existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  };\n  /**\n   * Clear all selected values for this option list. This operation is\n   * equivalent to selecting an empty list. This method will update the\n   * underlying state of the option list to indicate that no values have been\n   * selected.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.clear()\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   */\n  PDFOptionList.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  };\n  /**\n   * Set the font size for the text in this field. There needs to be a\n   * default appearance string (DA) set with a font value specified\n   * for this to work. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.setFontSize(4);\n   * ```\n   * @param fontSize The font size to set the font to.\n   */\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this option list. Font sizes\n   * may be integer or floating point numbers. Supplying a negative font size\n   * will cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.setFontSize(4)\n   * optionList.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  PDFOptionList.prototype.setFontSize = function (fontSize) {\n    utils_1.assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\n   * Returns `true` if the options of this option list are always displayed\n   * in alphabetical order, irrespective of the order in which the options\n   * were added to the option list. See [[PDFOptionList.enableSorting]] and\n   * [[PDFOptionList.disableSorting]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isSorted()) console.log('Sorting is enabled')\n   * ```\n   * @returns Whether or not this option list is sorted.\n   */\n  PDFOptionList.prototype.isSorted = function () {\n    return this.acroField.hasFlag(core_1.AcroChoiceFlags.Sort);\n  };\n  /**\n   * Always display the options of this option list in alphabetical order,\n   * irrespective of the order in which the options were added to this option\n   * list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableSorting()\n   * ```\n   */\n  PDFOptionList.prototype.enableSorting = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.Sort, true);\n  };\n  /**\n   * Do not always display the options of this option list in alphabetical\n   * order. Instead, display the options in whichever order they were added\n   * to this option list. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableSorting()\n   * ```\n   */\n  PDFOptionList.prototype.disableSorting = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.Sort, false);\n  };\n  /**\n   * Returns `true` if multiple options can be selected from this option list.\n   * See [[PDFOptionList.enableMultiselect]] and\n   * [[PDFOptionList.disableMultiselect]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isMultiselect()) console.log('Multiselect is enabled')\n   * ```\n   * @returns Whether or not multiple options can be selected.\n   */\n  PDFOptionList.prototype.isMultiselect = function () {\n    return this.acroField.hasFlag(core_1.AcroChoiceFlags.MultiSelect);\n  };\n  /**\n   * Allow users to select more than one option from this option list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableMultiselect()\n   * ```\n   */\n  PDFOptionList.prototype.enableMultiselect = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.MultiSelect, true);\n  };\n  /**\n   * Do not allow users to select more than one option from this option list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableMultiselect()\n   * ```\n   */\n  PDFOptionList.prototype.disableMultiselect = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.MultiSelect, false);\n  };\n  /**\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\n   * when the user clicks the option. The alternative is that the user's\n   * selection is stored when the user leaves this option list field (by\n   * clicking outside of it - on another field, for example). See\n   * [[PDFOptionList.enableSelectOnClick]] and\n   * [[PDFOptionList.disableSelectOnClick]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isSelectOnClick()) console.log('Select on click is enabled')\n   * ```\n   * @returns Whether or not options are selected immediately after they are\n   *          clicked.\n   */\n  PDFOptionList.prototype.isSelectOnClick = function () {\n    return this.acroField.hasFlag(core_1.AcroChoiceFlags.CommitOnSelChange);\n  };\n  /**\n   * Store the option selected by a user immediately after the user clicks the\n   * option. Do not wait for the user to leave this option list field (by\n   * clicking outside of it - on another field, for example). For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableSelectOnClick()\n   * ```\n   */\n  PDFOptionList.prototype.enableSelectOnClick = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.CommitOnSelChange, true);\n  };\n  /**\n   * Wait to store the option selected by a user until they leave this option\n   * list field (by clicking outside of it - on another field, for example).\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableSelectOnClick()\n   * ```\n   */\n  PDFOptionList.prototype.disableSelectOnClick = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.CommitOnSelChange, false);\n  };\n  /**\n   * Show this option list on the specified page. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const optionList = form.createOptionList('best.gundams')\n   * optionList.setOptions(['Exia', 'Dynames', 'Kyrios', 'Virtue'])\n   * optionList.select(['Exia', 'Virtue'])\n   *\n   * optionList.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this option list field.\n   * @param page The page to which this option list widget should be added.\n   * @param options The options to be used when adding this option list widget.\n   */\n  PDFOptionList.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    utils_1.assertIs(page, 'page', [[PDFPage_1.default, 'PDFPage']]);\n    PDFField_1.assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = colors_1.rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = colors_1.rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = colors_1.rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this option list\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : rotations_1.degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this option list has been marked as dirty, or if any of\n   * this option list's widgets do not have an appearance stream. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this option list needs an appearance update.\n   */\n  PDFOptionList.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof core_1.PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this option list's widgets using\n   * the default appearance provider for option lists. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  PDFOptionList.prototype.defaultUpdateAppearances = function (font) {\n    utils_1.assertIs(font, 'font', [[PDFFont_1.default, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this option list's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for option lists will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return drawOptionList(...)\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFOptionList.prototype.updateAppearances = function (font, provider) {\n    utils_1.assertIs(font, 'font', [[PDFFont_1.default, 'PDFFont']]);\n    utils_1.assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  };\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n  PDFOptionList.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : appearances_1.defaultOptionListAppearanceProvider;\n    var appearances = appearances_1.normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getOptionList]] method, which will create\n   * > an instance of [[PDFOptionList]] for you.\n   *\n   * Create an instance of [[PDFOptionList]] from an existing acroListBox and\n   * ref\n   *\n   * @param acroComboBox The underlying `PDFAcroListBox` for this option list.\n   * @param ref The unique reference for this option list.\n   * @param doc The document to which this option list will belong.\n   */\n  PDFOptionList.of = function (acroListBox, ref, doc) {\n    return new PDFOptionList(acroListBox, ref, doc);\n  };\n  return PDFOptionList;\n}(PDFField_1.default);\nexports.default = PDFOptionList;","map":{"version":3,"names":["PDFPage_1","tslib_1","__importDefault","require","PDFFont_1","PDFField_1","__importStar","appearances_1","colors_1","rotations_1","core_1","utils_1","PDFOptionList","_super","__extends","acroListBox","ref","doc","_this","call","assertIs","PDFAcroListBox","acroField","prototype","getOptions","rawOptions","options","Array","length","idx","len","_a","display","value","decodeText","getSelected","values","getValues","selected","setOptions","markAsDirty","optionObjects","PDFHexString","fromText","addOptions","optionsArr","isArray","existingOptions","newOptions","concat","select","merge","validOptions","assertIsSubset","enableMultiselect","existingValues","setValues","clear","setFontSize","fontSize","assertPositive","isSorted","hasFlag","AcroChoiceFlags","Sort","enableSorting","setFlagTo","disableSorting","isMultiselect","MultiSelect","disableMultiselect","isSelectOnClick","CommitOnSelChange","enableSelectOnClick","disableSelectOnClick","addToPage","page","default","assertFieldAppearanceOptions","textColor","rgb","backgroundColor","borderColor","borderWidth","widget","createWidget","x","y","_b","width","_c","height","_d","_e","rotate","_f","degrees","hidden","widgetRef","context","register","dict","addWidget","font","_g","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","isDirty","widgets","getWidgets","hasAppearances","getAppearances","normal","PDFStream","defaultUpdateAppearances","updateAppearances","provider","assertOrUndefined","Function","markAsClean","apProvider","defaultOptionListAppearanceProvider","appearances","normalizeAppearance","updateWidgetAppearanceWithFont","of"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/form/PDFOptionList.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\nimport PDFPage from 'src/api/PDFPage';\nimport PDFFont from 'src/api/PDFFont';\nimport PDFField, {\n  FieldAppearanceOptions,\n  assertFieldAppearanceOptions,\n} from 'src/api/form/PDFField';\nimport {\n  AppearanceProviderFor,\n  normalizeAppearance,\n  defaultOptionListAppearanceProvider,\n} from 'src/api/form/appearances';\nimport { rgb } from 'src/api/colors';\nimport { degrees } from 'src/api/rotations';\n\nimport {\n  PDFRef,\n  PDFHexString,\n  PDFString,\n  PDFStream,\n  PDFAcroListBox,\n  AcroChoiceFlags,\n  PDFWidgetAnnotation,\n} from 'src/core';\nimport {\n  assertIs,\n  assertIsSubset,\n  assertOrUndefined,\n  assertPositive,\n} from 'src/utils';\n\n/**\n * Represents an option list field of a [[PDFForm]].\n *\n * [[PDFOptionList]] fields are interactive lists of options. The purpose of an\n * option list is to enable users to select one or more options from a set of\n * possible options. Users are able to see the full set of options without\n * first having to click on the field (though scrolling may be necessary).\n * Clicking an option in the list will cause it to be selected and displayed\n * with a highlighted background. Some option lists allow users to select\n * more than one option (see [[PDFOptionList.isMultiselect]]).\n */\nexport default class PDFOptionList extends PDFField {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getOptionList]] method, which will create\n   * > an instance of [[PDFOptionList]] for you.\n   *\n   * Create an instance of [[PDFOptionList]] from an existing acroListBox and\n   * ref\n   *\n   * @param acroComboBox The underlying `PDFAcroListBox` for this option list.\n   * @param ref The unique reference for this option list.\n   * @param doc The document to which this option list will belong.\n   */\n  static of = (acroListBox: PDFAcroListBox, ref: PDFRef, doc: PDFDocument) =>\n    new PDFOptionList(acroListBox, ref, doc);\n\n  /** The low-level PDFAcroListBox wrapped by this option list. */\n  readonly acroField: PDFAcroListBox;\n\n  private constructor(\n    acroListBox: PDFAcroListBox,\n    ref: PDFRef,\n    doc: PDFDocument,\n  ) {\n    super(acroListBox, ref, doc);\n\n    assertIs(acroListBox, 'acroListBox', [[PDFAcroListBox, 'PDFAcroListBox']]);\n\n    this.acroField = acroListBox;\n  }\n\n  /**\n   * Get the list of available options for this option list. These options will\n   * be displayed to users who view this option list in a PDF reader.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * const options = optionList.getOptions()\n   * console.log('Option List options:', options)\n   * ```\n   * @returns The options for this option list.\n   */\n  getOptions(): string[] {\n    const rawOptions = this.acroField.getOptions();\n\n    const options = new Array<string>(rawOptions.length);\n    for (let idx = 0, len = options.length; idx < len; idx++) {\n      const { display, value } = rawOptions[idx];\n      options[idx] = (display ?? value).decodeText();\n    }\n\n    return options;\n  }\n\n  /**\n   * Get the selected options for this option list. These are the values that\n   * were selected by a human user via a PDF reader, or programatically via\n   * software.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * const selections = optionList.getSelected()\n   * console.log('Option List selections:', selections)\n   * ```\n   * @returns The selected options for this option list.\n   */\n  getSelected(): string[] {\n    const values = this.acroField.getValues();\n\n    const selected = new Array<string>(values.length);\n    for (let idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n\n    return selected;\n  }\n\n  /**\n   * Set the list of options that are available for this option list. These are\n   * the values that will be available for users to select when they view this\n   * option list in a PDF reader. Note that preexisting options for this\n   * option list will be removed. Only the values passed as `options` will be\n   * available to select.\n   *\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('planets.optionList')\n   * optionList.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\n   * ```\n   *\n   * This method will mark this option list as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n   * display the options this field contains inside the widgets of this text\n   * field (with selected options highlighted).\n   *\n   * **IMPORTANT:** The default font used to update appearance streams is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if this field contains any options\n   * with characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing it to\n   * [[PDFForm.updateFieldAppearances]] or [[PDFOptionList.updateAppearances]]\n   * allows you to generate appearance streams with characters outside the\n   * latin alphabet (assuming the custom font supports them).\n   *\n   * @param options The options that should be available in this option list.\n   */\n  setOptions(options: string[]) {\n    assertIs(options, 'options', [Array]);\n\n    this.markAsDirty();\n    const optionObjects = new Array<{ value: PDFHexString }>(options.length);\n    for (let idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = { value: PDFHexString.fromText(options[idx]) };\n    }\n    this.acroField.setOptions(optionObjects);\n  }\n\n  /**\n   * Add to the list of options that are available for this option list. Users\n   * will be able to select these values in a PDF reader. In addition to the\n   * values passed as `options`, any preexisting options for this option list\n   * will still be available for users to select.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('rockets.optionList')\n   * optionList.addOptions(['Saturn IV', 'Falcon Heavy'])\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   * @param options New options that should be available in this option list.\n   */\n  addOptions(options: string | string[]) {\n    assertIs(options, 'options', ['string', Array]);\n\n    this.markAsDirty();\n\n    const optionsArr = Array.isArray(options) ? options : [options];\n\n    const existingOptions: {\n      value: PDFString | PDFHexString;\n      display?: PDFString | PDFHexString;\n    }[] = this.acroField.getOptions();\n\n    const newOptions = new Array<{ value: PDFHexString }>(optionsArr.length);\n    for (let idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = { value: PDFHexString.fromText(optionsArr[idx]) };\n    }\n\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  }\n\n  /**\n   * Select one or more values for this option list. This operation is analogous\n   * to a human user opening the option list in a PDF reader and clicking on one\n   * or more values to select them. This method will update the underlying state\n   * of the option list to indicate which values have been selected. PDF\n   * libraries and readers will be able to extract these values from the saved\n   * document and determine which values were selected.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('best.superheroes.optionList')\n   * optionList.select(['One Punch Man', 'Iron Man'])\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   * @param options The options to be selected.\n   * @param merge Whether or not existing selections should be preserved.\n   */\n  select(options: string | string[], merge = false) {\n    assertIs(options, 'options', ['string', Array]);\n    assertIs(merge, 'merge', ['boolean']);\n\n    const optionsArr = Array.isArray(options) ? options : [options];\n\n    const validOptions = this.getOptions();\n    assertIsSubset(optionsArr, 'option', validOptions);\n\n    this.markAsDirty();\n\n    if (optionsArr.length > 1 || (optionsArr.length === 1 && merge)) {\n      this.enableMultiselect();\n    }\n\n    const values = new Array<PDFHexString>(optionsArr.length);\n    for (let idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = PDFHexString.fromText(optionsArr[idx]);\n    }\n\n    if (merge) {\n      const existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  }\n\n  /**\n   * Clear all selected values for this option list. This operation is\n   * equivalent to selecting an empty list. This method will update the\n   * underlying state of the option list to indicate that no values have been\n   * selected.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.clear()\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   */\n  clear() {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  }\n\n  /**\n   * Set the font size for the text in this field. There needs to be a\n   * default appearance string (DA) set with a font value specified\n   * for this to work. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.setFontSize(4);\n   * ```\n   * @param fontSize The font size to set the font to.\n   */\n\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this option list. Font sizes\n   * may be integer or floating point numbers. Supplying a negative font size\n   * will cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.setFontSize(4)\n   * optionList.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  setFontSize(fontSize: number) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  }\n\n  /**\n   * Returns `true` if the options of this option list are always displayed\n   * in alphabetical order, irrespective of the order in which the options\n   * were added to the option list. See [[PDFOptionList.enableSorting]] and\n   * [[PDFOptionList.disableSorting]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isSorted()) console.log('Sorting is enabled')\n   * ```\n   * @returns Whether or not this option list is sorted.\n   */\n  isSorted(): boolean {\n    return this.acroField.hasFlag(AcroChoiceFlags.Sort);\n  }\n\n  /**\n   * Always display the options of this option list in alphabetical order,\n   * irrespective of the order in which the options were added to this option\n   * list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableSorting()\n   * ```\n   */\n  enableSorting() {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, true);\n  }\n\n  /**\n   * Do not always display the options of this option list in alphabetical\n   * order. Instead, display the options in whichever order they were added\n   * to this option list. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableSorting()\n   * ```\n   */\n  disableSorting() {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, false);\n  }\n\n  /**\n   * Returns `true` if multiple options can be selected from this option list.\n   * See [[PDFOptionList.enableMultiselect]] and\n   * [[PDFOptionList.disableMultiselect]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isMultiselect()) console.log('Multiselect is enabled')\n   * ```\n   * @returns Whether or not multiple options can be selected.\n   */\n  isMultiselect(): boolean {\n    return this.acroField.hasFlag(AcroChoiceFlags.MultiSelect);\n  }\n\n  /**\n   * Allow users to select more than one option from this option list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableMultiselect()\n   * ```\n   */\n  enableMultiselect() {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, true);\n  }\n\n  /**\n   * Do not allow users to select more than one option from this option list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableMultiselect()\n   * ```\n   */\n  disableMultiselect() {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, false);\n  }\n\n  /**\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\n   * when the user clicks the option. The alternative is that the user's\n   * selection is stored when the user leaves this option list field (by\n   * clicking outside of it - on another field, for example). See\n   * [[PDFOptionList.enableSelectOnClick]] and\n   * [[PDFOptionList.disableSelectOnClick]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isSelectOnClick()) console.log('Select on click is enabled')\n   * ```\n   * @returns Whether or not options are selected immediately after they are\n   *          clicked.\n   */\n  isSelectOnClick(): boolean {\n    return this.acroField.hasFlag(AcroChoiceFlags.CommitOnSelChange);\n  }\n\n  /**\n   * Store the option selected by a user immediately after the user clicks the\n   * option. Do not wait for the user to leave this option list field (by\n   * clicking outside of it - on another field, for example). For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableSelectOnClick()\n   * ```\n   */\n  enableSelectOnClick() {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, true);\n  }\n\n  /**\n   * Wait to store the option selected by a user until they leave this option\n   * list field (by clicking outside of it - on another field, for example).\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableSelectOnClick()\n   * ```\n   */\n  disableSelectOnClick() {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, false);\n  }\n\n  /**\n   * Show this option list on the specified page. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const optionList = form.createOptionList('best.gundams')\n   * optionList.setOptions(['Exia', 'Dynames', 'Kyrios', 'Virtue'])\n   * optionList.select(['Exia', 'Virtue'])\n   *\n   * optionList.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this option list field.\n   * @param page The page to which this option list widget should be added.\n   * @param options The options to be used when adding this option list widget.\n   */\n  addToPage(page: PDFPage, options?: FieldAppearanceOptions) {\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n\n    if (!options) options = {};\n\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n\n    // Create a widget for this option list\n    const widget = this.createWidget({\n      x: options.x ?? 0,\n      y: options.y ?? 0,\n      width: options.width ?? 200,\n      height: options.height ?? 100,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: options.borderWidth ?? 0,\n      rotate: options.rotate ?? degrees(0),\n      hidden: options.hidden,\n      page: page.ref,\n    });\n    const widgetRef = this.doc.context.register(widget.dict);\n\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n\n    // Set appearance streams for widget\n    const font = options.font ?? this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  }\n\n  /**\n   * Returns `true` if this option list has been marked as dirty, or if any of\n   * this option list's widgets do not have an appearance stream. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this option list needs an appearance update.\n   */\n  needsAppearancesUpdate(): boolean {\n    if (this.isDirty()) return true;\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const hasAppearances =\n        widget.getAppearances()?.normal instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update the appearance streams for each of this option list's widgets using\n   * the default appearance provider for option lists. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  defaultUpdateAppearances(font: PDFFont) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  }\n\n  /**\n   * Update the appearance streams for each of this option list's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for option lists will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return drawOptionList(...)\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  updateAppearances(\n    font: PDFFont,\n    provider?: AppearanceProviderFor<PDFOptionList>,\n  ) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  }\n\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n\n  private updateWidgetAppearance(\n    widget: PDFWidgetAnnotation,\n    font: PDFFont,\n    provider?: AppearanceProviderFor<PDFOptionList>,\n  ) {\n    const apProvider = provider ?? defaultOptionListAppearanceProvider;\n    const appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}