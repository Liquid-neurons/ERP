{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drawOptionList = exports.drawTextField = exports.drawTextLines = exports.drawButton = exports.drawRadioButton = exports.drawCheckBox = exports.rotateInPlace = exports.drawCheckMark = exports.drawSvgPath = exports.drawEllipse = exports.drawEllipsePath = exports.drawRectangle = exports.drawLine = exports.drawPage = exports.drawImage = exports.drawLinesOfText = exports.drawText = void 0;\nvar tslib_1 = require(\"tslib\");\nvar colors_1 = require(\"./colors\");\nvar operators_1 = require(\"./operators\");\nvar rotations_1 = require(\"./rotations\");\nvar svgPath_1 = require(\"./svgPath\");\nvar objects_1 = require(\"./objects\");\nexports.drawText = function (line, options) {\n  return [operators_1.pushGraphicsState(), options.graphicsState && operators_1.setGraphicsState(options.graphicsState), operators_1.beginText(), colors_1.setFillingColor(options.color), operators_1.setFontAndSize(options.font, options.size), operators_1.rotateAndSkewTextRadiansAndTranslate(rotations_1.toRadians(options.rotate), rotations_1.toRadians(options.xSkew), rotations_1.toRadians(options.ySkew), options.x, options.y), operators_1.showText(line), operators_1.endText(), operators_1.popGraphicsState()].filter(Boolean);\n};\nexports.drawLinesOfText = function (lines, options) {\n  var operators = [operators_1.pushGraphicsState(), options.graphicsState && operators_1.setGraphicsState(options.graphicsState), operators_1.beginText(), colors_1.setFillingColor(options.color), operators_1.setFontAndSize(options.font, options.size), operators_1.setLineHeight(options.lineHeight), operators_1.rotateAndSkewTextRadiansAndTranslate(rotations_1.toRadians(options.rotate), rotations_1.toRadians(options.xSkew), rotations_1.toRadians(options.ySkew), options.x, options.y)].filter(Boolean);\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    operators.push(operators_1.showText(lines[idx]), operators_1.nextLine());\n  }\n  operators.push(operators_1.endText(), operators_1.popGraphicsState());\n  return operators;\n};\nexports.drawImage = function (name, options) {\n  return [operators_1.pushGraphicsState(), options.graphicsState && operators_1.setGraphicsState(options.graphicsState), operators_1.translate(options.x, options.y), operators_1.rotateRadians(rotations_1.toRadians(options.rotate)), operators_1.scale(options.width, options.height), operators_1.skewRadians(rotations_1.toRadians(options.xSkew), rotations_1.toRadians(options.ySkew)), operators_1.drawObject(name), operators_1.popGraphicsState()].filter(Boolean);\n};\nexports.drawPage = function (name, options) {\n  return [operators_1.pushGraphicsState(), options.graphicsState && operators_1.setGraphicsState(options.graphicsState), operators_1.translate(options.x, options.y), operators_1.rotateRadians(rotations_1.toRadians(options.rotate)), operators_1.scale(options.xScale, options.yScale), operators_1.skewRadians(rotations_1.toRadians(options.xSkew), rotations_1.toRadians(options.ySkew)), operators_1.drawObject(name), operators_1.popGraphicsState()].filter(Boolean);\n};\nexports.drawLine = function (options) {\n  var _a, _b;\n  return [operators_1.pushGraphicsState(), options.graphicsState && operators_1.setGraphicsState(options.graphicsState), options.color && colors_1.setStrokingColor(options.color), operators_1.setLineWidth(options.thickness), operators_1.setDashPattern((_a = options.dashArray) !== null && _a !== void 0 ? _a : [], (_b = options.dashPhase) !== null && _b !== void 0 ? _b : 0), operators_1.moveTo(options.start.x, options.start.y), options.lineCap && operators_1.setLineCap(options.lineCap), operators_1.moveTo(options.start.x, options.start.y), operators_1.lineTo(options.end.x, options.end.y), operators_1.stroke(), operators_1.popGraphicsState()].filter(Boolean);\n};\nexports.drawRectangle = function (options) {\n  var _a, _b;\n  return [operators_1.pushGraphicsState(), options.graphicsState && operators_1.setGraphicsState(options.graphicsState), options.color && colors_1.setFillingColor(options.color), options.borderColor && colors_1.setStrokingColor(options.borderColor), operators_1.setLineWidth(options.borderWidth), options.borderLineCap && operators_1.setLineCap(options.borderLineCap), operators_1.setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0), operators_1.translate(options.x, options.y), operators_1.rotateRadians(rotations_1.toRadians(options.rotate)), operators_1.skewRadians(rotations_1.toRadians(options.xSkew), rotations_1.toRadians(options.ySkew)), operators_1.moveTo(0, 0), operators_1.lineTo(0, options.height), operators_1.lineTo(options.width, options.height), operators_1.lineTo(options.width, 0), operators_1.closePath(),\n  // prettier-ignore\n  options.color && options.borderWidth ? operators_1.fillAndStroke() : options.color ? operators_1.fill() : options.borderColor ? operators_1.stroke() : operators_1.closePath(), operators_1.popGraphicsState()].filter(Boolean);\n};\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n/** @deprecated */\nexports.drawEllipsePath = function (config) {\n  var x = objects_1.asNumber(config.x);\n  var y = objects_1.asNumber(config.y);\n  var xScale = objects_1.asNumber(config.xScale);\n  var yScale = objects_1.asNumber(config.yScale);\n  x -= xScale;\n  y -= yScale;\n  var ox = xScale * KAPPA;\n  var oy = yScale * KAPPA;\n  var xe = x + xScale * 2;\n  var ye = y + yScale * 2;\n  var xm = x + xScale;\n  var ym = y + yScale;\n  return [operators_1.pushGraphicsState(), operators_1.moveTo(x, ym), operators_1.appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), operators_1.appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), operators_1.appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), operators_1.appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym), operators_1.popGraphicsState()];\n};\nvar drawEllipseCurves = function (config) {\n  var centerX = objects_1.asNumber(config.x);\n  var centerY = objects_1.asNumber(config.y);\n  var xScale = objects_1.asNumber(config.xScale);\n  var yScale = objects_1.asNumber(config.yScale);\n  var x = -xScale;\n  var y = -yScale;\n  var ox = xScale * KAPPA;\n  var oy = yScale * KAPPA;\n  var xe = x + xScale * 2;\n  var ye = y + yScale * 2;\n  var xm = x + xScale;\n  var ym = y + yScale;\n  return [operators_1.translate(centerX, centerY), operators_1.rotateRadians(rotations_1.toRadians(config.rotate)), operators_1.moveTo(x, ym), operators_1.appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), operators_1.appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), operators_1.appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), operators_1.appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym)];\n};\nexports.drawEllipse = function (options) {\n  var _a, _b, _c;\n  return tslib_1.__spreadArrays([operators_1.pushGraphicsState(), options.graphicsState && operators_1.setGraphicsState(options.graphicsState), options.color && colors_1.setFillingColor(options.color), options.borderColor && colors_1.setStrokingColor(options.borderColor), operators_1.setLineWidth(options.borderWidth), options.borderLineCap && operators_1.setLineCap(options.borderLineCap), operators_1.setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0)], options.rotate === undefined ? exports.drawEllipsePath({\n    x: options.x,\n    y: options.y,\n    xScale: options.xScale,\n    yScale: options.yScale\n  }) : drawEllipseCurves({\n    x: options.x,\n    y: options.y,\n    xScale: options.xScale,\n    yScale: options.yScale,\n    rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : rotations_1.degrees(0)\n  }), [\n  // prettier-ignore\n  options.color && options.borderWidth ? operators_1.fillAndStroke() : options.color ? operators_1.fill() : options.borderColor ? operators_1.stroke() : operators_1.closePath(), operators_1.popGraphicsState()]).filter(Boolean);\n};\nexports.drawSvgPath = function (path, options) {\n  var _a, _b, _c;\n  return tslib_1.__spreadArrays([operators_1.pushGraphicsState(), options.graphicsState && operators_1.setGraphicsState(options.graphicsState), operators_1.translate(options.x, options.y), operators_1.rotateRadians(rotations_1.toRadians((_a = options.rotate) !== null && _a !== void 0 ? _a : rotations_1.degrees(0))),\n  // SVG path Y axis is opposite pdf-lib's\n  options.scale ? operators_1.scale(options.scale, -options.scale) : operators_1.scale(1, -1), options.color && colors_1.setFillingColor(options.color), options.borderColor && colors_1.setStrokingColor(options.borderColor), options.borderWidth && operators_1.setLineWidth(options.borderWidth), options.borderLineCap && operators_1.setLineCap(options.borderLineCap), operators_1.setDashPattern((_b = options.borderDashArray) !== null && _b !== void 0 ? _b : [], (_c = options.borderDashPhase) !== null && _c !== void 0 ? _c : 0)], svgPath_1.svgPathToOperators(path), [\n  // prettier-ignore\n  options.color && options.borderWidth ? operators_1.fillAndStroke() : options.color ? operators_1.fill() : options.borderColor ? operators_1.stroke() : operators_1.closePath(), operators_1.popGraphicsState()]).filter(Boolean);\n};\nexports.drawCheckMark = function (options) {\n  var size = objects_1.asNumber(options.size);\n  /*********************** Define Check Mark Points ***************************/\n  // A check mark is defined by three points in some coordinate space. Here, we\n  // define these points in a unit coordinate system, where the range of the x\n  // and y axis are both [-1, 1].\n  //\n  // Note that we do not hard code `p1y` in case we wish to change the\n  // size/shape of the check mark in the future. We want the check mark to\n  // always form a right angle. This means that the dot product between (p1-p2)\n  // and (p3-p2) should be zero:\n  //\n  //   (p1x-p2x) * (p3x-p2x) + (p1y-p2y) * (p3y-p2y) = 0\n  //\n  // We can now rejigger this equation to solve for `p1y`:\n  //\n  //   (p1y-p2y) * (p3y-p2y) = -((p1x-p2x) * (p3x-p2x))\n  //   (p1y-p2y) = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y)\n  //   p1y = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y) + p2y\n  //\n  // Thanks to my friend Joel Walker (https://github.com/JWalker1995) for\n  // devising the above equation and unit coordinate system approach!\n  // (x, y) coords of the check mark's bottommost point\n  var p2x = -1 + 0.75;\n  var p2y = -1 + 0.51;\n  // (x, y) coords of the check mark's topmost point\n  var p3y = 1 - 0.525;\n  var p3x = 1 - 0.31;\n  // (x, y) coords of the check mark's center (vertically) point\n  var p1x = -1 + 0.325;\n  var p1y = -((p1x - p2x) * (p3x - p2x)) / (p3y - p2y) + p2y;\n  /****************************************************************************/\n  return [operators_1.pushGraphicsState(), options.color && colors_1.setStrokingColor(options.color), operators_1.setLineWidth(options.thickness), operators_1.translate(options.x, options.y), operators_1.moveTo(p1x * size, p1y * size), operators_1.lineTo(p2x * size, p2y * size), operators_1.lineTo(p3x * size, p3y * size), operators_1.stroke(), operators_1.popGraphicsState()].filter(Boolean);\n};\n// prettier-ignore\nexports.rotateInPlace = function (options) {\n  return options.rotation === 0 ? [operators_1.translate(0, 0), operators_1.rotateDegrees(0)] : options.rotation === 90 ? [operators_1.translate(options.width, 0), operators_1.rotateDegrees(90)] : options.rotation === 180 ? [operators_1.translate(options.width, options.height), operators_1.rotateDegrees(180)] : options.rotation === 270 ? [operators_1.translate(0, options.height), operators_1.rotateDegrees(270)] : [];\n}; // Invalid rotation - noop\nexports.drawCheckBox = function (options) {\n  var outline = exports.drawRectangle({\n    x: options.x,\n    y: options.y,\n    width: options.width,\n    height: options.height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: rotations_1.degrees(0),\n    xSkew: rotations_1.degrees(0),\n    ySkew: rotations_1.degrees(0)\n  });\n  if (!options.filled) return outline;\n  var width = objects_1.asNumber(options.width);\n  var height = objects_1.asNumber(options.height);\n  var checkMarkSize = Math.min(width, height) / 2;\n  var checkMark = exports.drawCheckMark({\n    x: width / 2,\n    y: height / 2,\n    size: checkMarkSize,\n    thickness: options.thickness,\n    color: options.markColor\n  });\n  return tslib_1.__spreadArrays([operators_1.pushGraphicsState()], outline, checkMark, [operators_1.popGraphicsState()]);\n};\nexports.drawRadioButton = function (options) {\n  var width = objects_1.asNumber(options.width);\n  var height = objects_1.asNumber(options.height);\n  var outlineScale = Math.min(width, height) / 2;\n  var outline = exports.drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale,\n    yScale: outlineScale,\n    color: options.color,\n    borderColor: options.borderColor,\n    borderWidth: options.borderWidth\n  });\n  if (!options.filled) return outline;\n  var dot = exports.drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale * 0.45,\n    yScale: outlineScale * 0.45,\n    color: options.dotColor,\n    borderColor: undefined,\n    borderWidth: 0\n  });\n  return tslib_1.__spreadArrays([operators_1.pushGraphicsState()], outline, dot, [operators_1.popGraphicsState()]);\n};\nexports.drawButton = function (options) {\n  var x = objects_1.asNumber(options.x);\n  var y = objects_1.asNumber(options.y);\n  var width = objects_1.asNumber(options.width);\n  var height = objects_1.asNumber(options.height);\n  var background = exports.drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: rotations_1.degrees(0),\n    xSkew: rotations_1.degrees(0),\n    ySkew: rotations_1.degrees(0)\n  });\n  var lines = exports.drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: rotations_1.degrees(0),\n    xSkew: rotations_1.degrees(0),\n    ySkew: rotations_1.degrees(0)\n  });\n  return tslib_1.__spreadArrays([operators_1.pushGraphicsState()], background, lines, [operators_1.popGraphicsState()]);\n};\nexports.drawTextLines = function (lines, options) {\n  var operators = [operators_1.beginText(), colors_1.setFillingColor(options.color), operators_1.setFontAndSize(options.font, options.size)];\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    var _a = lines[idx],\n      encoded = _a.encoded,\n      x = _a.x,\n      y = _a.y;\n    operators.push(operators_1.rotateAndSkewTextRadiansAndTranslate(rotations_1.toRadians(options.rotate), rotations_1.toRadians(options.xSkew), rotations_1.toRadians(options.ySkew), x, y), operators_1.showText(encoded));\n  }\n  operators.push(operators_1.endText());\n  return operators;\n};\nexports.drawTextField = function (options) {\n  var x = objects_1.asNumber(options.x);\n  var y = objects_1.asNumber(options.y);\n  var width = objects_1.asNumber(options.width);\n  var height = objects_1.asNumber(options.height);\n  var borderWidth = objects_1.asNumber(options.borderWidth);\n  var padding = objects_1.asNumber(options.padding);\n  var clipX = x + borderWidth / 2 + padding;\n  var clipY = y + borderWidth / 2 + padding;\n  var clipWidth = width - (borderWidth / 2 + padding) * 2;\n  var clipHeight = height - (borderWidth / 2 + padding) * 2;\n  var clippingArea = [operators_1.moveTo(clipX, clipY), operators_1.lineTo(clipX, clipY + clipHeight), operators_1.lineTo(clipX + clipWidth, clipY + clipHeight), operators_1.lineTo(clipX + clipWidth, clipY), operators_1.closePath(), operators_1.clip(), operators_1.endPath()];\n  var background = exports.drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: rotations_1.degrees(0),\n    xSkew: rotations_1.degrees(0),\n    ySkew: rotations_1.degrees(0)\n  });\n  var lines = exports.drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: rotations_1.degrees(0),\n    xSkew: rotations_1.degrees(0),\n    ySkew: rotations_1.degrees(0)\n  });\n  var markedContent = tslib_1.__spreadArrays([operators_1.beginMarkedContent('Tx'), operators_1.pushGraphicsState()], lines, [operators_1.popGraphicsState(), operators_1.endMarkedContent()]);\n  return tslib_1.__spreadArrays([operators_1.pushGraphicsState()], background, clippingArea, markedContent, [operators_1.popGraphicsState()]);\n};\nexports.drawOptionList = function (options) {\n  var x = objects_1.asNumber(options.x);\n  var y = objects_1.asNumber(options.y);\n  var width = objects_1.asNumber(options.width);\n  var height = objects_1.asNumber(options.height);\n  var lineHeight = objects_1.asNumber(options.lineHeight);\n  var borderWidth = objects_1.asNumber(options.borderWidth);\n  var padding = objects_1.asNumber(options.padding);\n  var clipX = x + borderWidth / 2 + padding;\n  var clipY = y + borderWidth / 2 + padding;\n  var clipWidth = width - (borderWidth / 2 + padding) * 2;\n  var clipHeight = height - (borderWidth / 2 + padding) * 2;\n  var clippingArea = [operators_1.moveTo(clipX, clipY), operators_1.lineTo(clipX, clipY + clipHeight), operators_1.lineTo(clipX + clipWidth, clipY + clipHeight), operators_1.lineTo(clipX + clipWidth, clipY), operators_1.closePath(), operators_1.clip(), operators_1.endPath()];\n  var background = exports.drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: rotations_1.degrees(0),\n    xSkew: rotations_1.degrees(0),\n    ySkew: rotations_1.degrees(0)\n  });\n  var highlights = [];\n  for (var idx = 0, len = options.selectedLines.length; idx < len; idx++) {\n    var line = options.textLines[options.selectedLines[idx]];\n    highlights.push.apply(highlights, exports.drawRectangle({\n      x: line.x - padding,\n      y: line.y - (lineHeight - line.height) / 2,\n      width: width - borderWidth,\n      height: line.height + (lineHeight - line.height) / 2,\n      borderWidth: 0,\n      color: options.selectedColor,\n      borderColor: undefined,\n      rotate: rotations_1.degrees(0),\n      xSkew: rotations_1.degrees(0),\n      ySkew: rotations_1.degrees(0)\n    }));\n  }\n  var lines = exports.drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: rotations_1.degrees(0),\n    xSkew: rotations_1.degrees(0),\n    ySkew: rotations_1.degrees(0)\n  });\n  var markedContent = tslib_1.__spreadArrays([operators_1.beginMarkedContent('Tx'), operators_1.pushGraphicsState()], lines, [operators_1.popGraphicsState(), operators_1.endMarkedContent()]);\n  return tslib_1.__spreadArrays([operators_1.pushGraphicsState()], background, highlights, clippingArea, markedContent, [operators_1.popGraphicsState()]);\n};","map":{"version":3,"names":["colors_1","require","operators_1","rotations_1","svgPath_1","objects_1","exports","drawText","line","options","pushGraphicsState","graphicsState","setGraphicsState","beginText","setFillingColor","color","setFontAndSize","font","size","rotateAndSkewTextRadiansAndTranslate","toRadians","rotate","xSkew","ySkew","x","y","showText","endText","popGraphicsState","filter","Boolean","drawLinesOfText","lines","operators","setLineHeight","lineHeight","idx","len","length","push","nextLine","drawImage","name","translate","rotateRadians","scale","width","height","skewRadians","drawObject","drawPage","xScale","yScale","drawLine","setStrokingColor","setLineWidth","thickness","setDashPattern","_a","dashArray","_b","dashPhase","moveTo","start","lineCap","setLineCap","lineTo","end","stroke","drawRectangle","borderColor","borderWidth","borderLineCap","borderDashArray","borderDashPhase","closePath","fillAndStroke","fill","KAPPA","Math","sqrt","drawEllipsePath","config","asNumber","ox","oy","xe","ye","xm","ym","appendBezierCurve","drawEllipseCurves","centerX","centerY","drawEllipse","tslib_1","__spreadArrays","undefined","_c","degrees","drawSvgPath","path","svgPathToOperators","drawCheckMark","p2x","p2y","p3y","p3x","p1x","p1y","rotateInPlace","rotation","rotateDegrees","drawCheckBox","outline","filled","checkMarkSize","min","checkMark","markColor","drawRadioButton","outlineScale","dot","dotColor","drawButton","background","drawTextLines","textLines","textColor","fontSize","encoded","drawTextField","padding","clipX","clipY","clipWidth","clipHeight","clippingArea","clip","endPath","markedContent","beginMarkedContent","endMarkedContent","drawOptionList","highlights","selectedLines","apply","selectedColor"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/operations.ts"],"sourcesContent":["import { Color, setFillingColor, setStrokingColor } from 'src/api/colors';\nimport {\n  beginText,\n  closePath,\n  drawObject,\n  endText,\n  fill,\n  fillAndStroke,\n  lineTo,\n  moveTo,\n  nextLine,\n  popGraphicsState,\n  pushGraphicsState,\n  rotateAndSkewTextRadiansAndTranslate,\n  rotateRadians,\n  scale,\n  setFontAndSize,\n  setLineHeight,\n  setLineWidth,\n  showText,\n  skewRadians,\n  stroke,\n  translate,\n  LineCapStyle,\n  setLineCap,\n  rotateDegrees,\n  setGraphicsState,\n  setDashPattern,\n  beginMarkedContent,\n  endMarkedContent,\n  clip,\n  endPath,\n  appendBezierCurve,\n} from 'src/api/operators';\nimport { Rotation, degrees, toRadians } from 'src/api/rotations';\nimport { svgPathToOperators } from 'src/api/svgPath';\nimport { PDFHexString, PDFName, PDFNumber, PDFOperator } from 'src/core';\nimport { asNumber } from 'src/api/objects';\n\nexport interface DrawTextOptions {\n  color: Color;\n  font: string | PDFName;\n  size: number | PDFNumber;\n  rotate: Rotation;\n  xSkew: Rotation;\n  ySkew: Rotation;\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  graphicsState?: string | PDFName;\n}\n\nexport const drawText = (\n  line: PDFHexString,\n  options: DrawTextOptions,\n): PDFOperator[] =>\n  [\n    pushGraphicsState(),\n    options.graphicsState && setGraphicsState(options.graphicsState),\n    beginText(),\n    setFillingColor(options.color),\n    setFontAndSize(options.font, options.size),\n    rotateAndSkewTextRadiansAndTranslate(\n      toRadians(options.rotate),\n      toRadians(options.xSkew),\n      toRadians(options.ySkew),\n      options.x,\n      options.y,\n    ),\n    showText(line),\n    endText(),\n    popGraphicsState(),\n  ].filter(Boolean) as PDFOperator[];\n\nexport interface DrawLinesOfTextOptions extends DrawTextOptions {\n  lineHeight: number | PDFNumber;\n}\n\nexport const drawLinesOfText = (\n  lines: PDFHexString[],\n  options: DrawLinesOfTextOptions,\n): PDFOperator[] => {\n  const operators = [\n    pushGraphicsState(),\n    options.graphicsState && setGraphicsState(options.graphicsState),\n    beginText(),\n    setFillingColor(options.color),\n    setFontAndSize(options.font, options.size),\n    setLineHeight(options.lineHeight),\n    rotateAndSkewTextRadiansAndTranslate(\n      toRadians(options.rotate),\n      toRadians(options.xSkew),\n      toRadians(options.ySkew),\n      options.x,\n      options.y,\n    ),\n  ].filter(Boolean) as PDFOperator[];\n\n  for (let idx = 0, len = lines.length; idx < len; idx++) {\n    operators.push(showText(lines[idx]), nextLine());\n  }\n\n  operators.push(endText(), popGraphicsState());\n  return operators;\n};\n\nexport const drawImage = (\n  name: string | PDFName,\n  options: {\n    x: number | PDFNumber;\n    y: number | PDFNumber;\n    width: number | PDFNumber;\n    height: number | PDFNumber;\n    rotate: Rotation;\n    xSkew: Rotation;\n    ySkew: Rotation;\n    graphicsState?: string | PDFName;\n  },\n): PDFOperator[] =>\n  [\n    pushGraphicsState(),\n    options.graphicsState && setGraphicsState(options.graphicsState),\n    translate(options.x, options.y),\n    rotateRadians(toRadians(options.rotate)),\n    scale(options.width, options.height),\n    skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\n    drawObject(name),\n    popGraphicsState(),\n  ].filter(Boolean) as PDFOperator[];\n\nexport const drawPage = (\n  name: string | PDFName,\n  options: {\n    x: number | PDFNumber;\n    y: number | PDFNumber;\n    xScale: number | PDFNumber;\n    yScale: number | PDFNumber;\n    rotate: Rotation;\n    xSkew: Rotation;\n    ySkew: Rotation;\n    graphicsState?: string | PDFName;\n  },\n): PDFOperator[] =>\n  [\n    pushGraphicsState(),\n    options.graphicsState && setGraphicsState(options.graphicsState),\n    translate(options.x, options.y),\n    rotateRadians(toRadians(options.rotate)),\n    scale(options.xScale, options.yScale),\n    skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\n    drawObject(name),\n    popGraphicsState(),\n  ].filter(Boolean) as PDFOperator[];\n\nexport const drawLine = (options: {\n  start: { x: number | PDFNumber; y: number | PDFNumber };\n  end: { x: number | PDFNumber; y: number | PDFNumber };\n  thickness: number | PDFNumber;\n  color: Color | undefined;\n  dashArray?: (number | PDFNumber)[];\n  dashPhase?: number | PDFNumber;\n  lineCap?: LineCapStyle;\n  graphicsState?: string | PDFName;\n}) =>\n  [\n    pushGraphicsState(),\n    options.graphicsState && setGraphicsState(options.graphicsState),\n    options.color && setStrokingColor(options.color),\n    setLineWidth(options.thickness),\n    setDashPattern(options.dashArray ?? [], options.dashPhase ?? 0),\n    moveTo(options.start.x, options.start.y),\n    options.lineCap && setLineCap(options.lineCap),\n    moveTo(options.start.x, options.start.y),\n    lineTo(options.end.x, options.end.y),\n    stroke(),\n    popGraphicsState(),\n  ].filter(Boolean) as PDFOperator[];\n\nexport const drawRectangle = (options: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  width: number | PDFNumber;\n  height: number | PDFNumber;\n  borderWidth: number | PDFNumber;\n  color: Color | undefined;\n  borderColor: Color | undefined;\n  rotate: Rotation;\n  xSkew: Rotation;\n  ySkew: Rotation;\n  borderLineCap?: LineCapStyle;\n  borderDashArray?: (number | PDFNumber)[];\n  borderDashPhase?: number | PDFNumber;\n  graphicsState?: string | PDFName;\n}) =>\n  [\n    pushGraphicsState(),\n    options.graphicsState && setGraphicsState(options.graphicsState),\n    options.color && setFillingColor(options.color),\n    options.borderColor && setStrokingColor(options.borderColor),\n    setLineWidth(options.borderWidth),\n    options.borderLineCap && setLineCap(options.borderLineCap),\n    setDashPattern(options.borderDashArray ?? [], options.borderDashPhase ?? 0),\n    translate(options.x, options.y),\n    rotateRadians(toRadians(options.rotate)),\n    skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\n    moveTo(0, 0),\n    lineTo(0, options.height),\n    lineTo(options.width, options.height),\n    lineTo(options.width, 0),\n    closePath(),\n\n    // prettier-ignore\n    options.color && options.borderWidth ? fillAndStroke()\n  : options.color                      ? fill()\n  : options.borderColor                ? stroke()\n  : closePath(),\n\n    popGraphicsState(),\n  ].filter(Boolean) as PDFOperator[];\n\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\n/** @deprecated */\nexport const drawEllipsePath = (config: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  xScale: number | PDFNumber;\n  yScale: number | PDFNumber;\n}): PDFOperator[] => {\n  let x = asNumber(config.x);\n  let y = asNumber(config.y);\n  const xScale = asNumber(config.xScale);\n  const yScale = asNumber(config.yScale);\n\n  x -= xScale;\n  y -= yScale;\n\n  const ox = xScale * KAPPA;\n  const oy = yScale * KAPPA;\n  const xe = x + xScale * 2;\n  const ye = y + yScale * 2;\n  const xm = x + xScale;\n  const ym = y + yScale;\n\n  return [\n    pushGraphicsState(),\n    moveTo(x, ym),\n    appendBezierCurve(x, ym - oy, xm - ox, y, xm, y),\n    appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym),\n    appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye),\n    appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym),\n    popGraphicsState(),\n  ];\n};\n\nconst drawEllipseCurves = (config: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  xScale: number | PDFNumber;\n  yScale: number | PDFNumber;\n  rotate: Rotation;\n}): PDFOperator[] => {\n  const centerX = asNumber(config.x);\n  const centerY = asNumber(config.y);\n  const xScale = asNumber(config.xScale);\n  const yScale = asNumber(config.yScale);\n\n  const x = -xScale;\n  const y = -yScale;\n\n  const ox = xScale * KAPPA;\n  const oy = yScale * KAPPA;\n  const xe = x + xScale * 2;\n  const ye = y + yScale * 2;\n  const xm = x + xScale;\n  const ym = y + yScale;\n\n  return [\n    translate(centerX, centerY),\n    rotateRadians(toRadians(config.rotate)),\n    moveTo(x, ym),\n    appendBezierCurve(x, ym - oy, xm - ox, y, xm, y),\n    appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym),\n    appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye),\n    appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym),\n  ];\n};\n\nexport const drawEllipse = (options: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  xScale: number | PDFNumber;\n  yScale: number | PDFNumber;\n  rotate?: Rotation;\n  color: Color | undefined;\n  borderColor: Color | undefined;\n  borderWidth: number | PDFNumber;\n  borderDashArray?: (number | PDFNumber)[];\n  borderDashPhase?: number | PDFNumber;\n  graphicsState?: string | PDFName;\n  borderLineCap?: LineCapStyle;\n}) =>\n  [\n    pushGraphicsState(),\n    options.graphicsState && setGraphicsState(options.graphicsState),\n    options.color && setFillingColor(options.color),\n    options.borderColor && setStrokingColor(options.borderColor),\n    setLineWidth(options.borderWidth),\n    options.borderLineCap && setLineCap(options.borderLineCap),\n    setDashPattern(options.borderDashArray ?? [], options.borderDashPhase ?? 0),\n\n    // The `drawEllipsePath` branch is only here for backwards compatibility.\n    // See https://github.com/Hopding/pdf-lib/pull/511#issuecomment-667685655.\n    ...(options.rotate === undefined\n      ? drawEllipsePath({\n          x: options.x,\n          y: options.y,\n          xScale: options.xScale,\n          yScale: options.yScale,\n        })\n      : drawEllipseCurves({\n          x: options.x,\n          y: options.y,\n          xScale: options.xScale,\n          yScale: options.yScale,\n          rotate: options.rotate ?? degrees(0),\n        })),\n\n    // prettier-ignore\n    options.color && options.borderWidth ? fillAndStroke()\n  : options.color                      ? fill()\n  : options.borderColor                ? stroke()\n  : closePath(),\n\n    popGraphicsState(),\n  ].filter(Boolean) as PDFOperator[];\n\nexport const drawSvgPath = (\n  path: string,\n  options: {\n    x: number | PDFNumber;\n    y: number | PDFNumber;\n    rotate?: Rotation;\n    scale: number | PDFNumber | undefined;\n    color: Color | undefined;\n    borderColor: Color | undefined;\n    borderWidth: number | PDFNumber;\n    borderDashArray?: (number | PDFNumber)[];\n    borderDashPhase?: number | PDFNumber;\n    borderLineCap?: LineCapStyle;\n    graphicsState?: string | PDFName;\n  },\n) =>\n  [\n    pushGraphicsState(),\n    options.graphicsState && setGraphicsState(options.graphicsState),\n\n    translate(options.x, options.y),\n    rotateRadians(toRadians(options.rotate ?? degrees(0))),\n\n    // SVG path Y axis is opposite pdf-lib's\n    options.scale ? scale(options.scale, -options.scale) : scale(1, -1),\n\n    options.color && setFillingColor(options.color),\n    options.borderColor && setStrokingColor(options.borderColor),\n    options.borderWidth && setLineWidth(options.borderWidth),\n    options.borderLineCap && setLineCap(options.borderLineCap),\n\n    setDashPattern(options.borderDashArray ?? [], options.borderDashPhase ?? 0),\n\n    ...svgPathToOperators(path),\n\n    // prettier-ignore\n    options.color && options.borderWidth ? fillAndStroke()\n  : options.color                      ? fill()\n  : options.borderColor                ? stroke()\n  : closePath(),\n\n    popGraphicsState(),\n  ].filter(Boolean) as PDFOperator[];\n\nexport const drawCheckMark = (options: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  size: number | PDFNumber;\n  thickness: number | PDFNumber;\n  color: Color | undefined;\n}) => {\n  const size = asNumber(options.size);\n\n  /*********************** Define Check Mark Points ***************************/\n  // A check mark is defined by three points in some coordinate space. Here, we\n  // define these points in a unit coordinate system, where the range of the x\n  // and y axis are both [-1, 1].\n  //\n  // Note that we do not hard code `p1y` in case we wish to change the\n  // size/shape of the check mark in the future. We want the check mark to\n  // always form a right angle. This means that the dot product between (p1-p2)\n  // and (p3-p2) should be zero:\n  //\n  //   (p1x-p2x) * (p3x-p2x) + (p1y-p2y) * (p3y-p2y) = 0\n  //\n  // We can now rejigger this equation to solve for `p1y`:\n  //\n  //   (p1y-p2y) * (p3y-p2y) = -((p1x-p2x) * (p3x-p2x))\n  //   (p1y-p2y) = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y)\n  //   p1y = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y) + p2y\n  //\n  // Thanks to my friend Joel Walker (https://github.com/JWalker1995) for\n  // devising the above equation and unit coordinate system approach!\n\n  // (x, y) coords of the check mark's bottommost point\n  const p2x = -1 + 0.75;\n  const p2y = -1 + 0.51;\n\n  // (x, y) coords of the check mark's topmost point\n  const p3y = 1 - 0.525;\n  const p3x = 1 - 0.31;\n\n  // (x, y) coords of the check mark's center (vertically) point\n  const p1x = -1 + 0.325;\n  const p1y = -((p1x - p2x) * (p3x - p2x)) / (p3y - p2y) + p2y;\n  /****************************************************************************/\n\n  return [\n    pushGraphicsState(),\n    options.color && setStrokingColor(options.color),\n    setLineWidth(options.thickness),\n\n    translate(options.x, options.y),\n    moveTo(p1x * size, p1y * size),\n    lineTo(p2x * size, p2y * size),\n    lineTo(p3x * size, p3y * size),\n\n    stroke(),\n    popGraphicsState(),\n  ].filter(Boolean) as PDFOperator[];\n};\n\n// prettier-ignore\nexport const rotateInPlace = (options: {\n  width: number | PDFNumber;\n  height: number | PDFNumber;\n  rotation: 0 | 90 | 180 | 270;\n}) =>\n    options.rotation === 0 ? [\n      translate(0, 0),\n      rotateDegrees(0)\n    ]\n  : options.rotation === 90 ? [\n      translate(options.width, 0),\n      rotateDegrees(90)\n    ]\n  : options.rotation === 180 ? [\n      translate(options.width, options.height),\n      rotateDegrees(180)\n    ]\n  : options.rotation === 270 ? [\n      translate(0, options.height),\n      rotateDegrees(270)\n    ]\n  : []; // Invalid rotation - noop\n\nexport const drawCheckBox = (options: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  width: number | PDFNumber;\n  height: number | PDFNumber;\n  thickness: number | PDFNumber;\n  borderWidth: number | PDFNumber;\n  markColor: Color | undefined;\n  color: Color | undefined;\n  borderColor: Color | undefined;\n  filled: boolean;\n}) => {\n  const outline = drawRectangle({\n    x: options.x,\n    y: options.y,\n    width: options.width,\n    height: options.height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0),\n  });\n\n  if (!options.filled) return outline;\n\n  const width = asNumber(options.width);\n  const height = asNumber(options.height);\n\n  const checkMarkSize = Math.min(width, height) / 2;\n\n  const checkMark = drawCheckMark({\n    x: width / 2,\n    y: height / 2,\n    size: checkMarkSize,\n    thickness: options.thickness,\n    color: options.markColor,\n  });\n\n  return [pushGraphicsState(), ...outline, ...checkMark, popGraphicsState()];\n};\n\nexport const drawRadioButton = (options: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  width: number | PDFNumber;\n  height: number | PDFNumber;\n  borderWidth: number | PDFNumber;\n  dotColor: Color | undefined;\n  color: Color | undefined;\n  borderColor: Color | undefined;\n  filled: boolean;\n}) => {\n  const width = asNumber(options.width);\n  const height = asNumber(options.height);\n\n  const outlineScale = Math.min(width, height) / 2;\n\n  const outline = drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale,\n    yScale: outlineScale,\n    color: options.color,\n    borderColor: options.borderColor,\n    borderWidth: options.borderWidth,\n  });\n\n  if (!options.filled) return outline;\n\n  const dot = drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale * 0.45,\n    yScale: outlineScale * 0.45,\n    color: options.dotColor,\n    borderColor: undefined,\n    borderWidth: 0,\n  });\n\n  return [pushGraphicsState(), ...outline, ...dot, popGraphicsState()];\n};\n\nexport const drawButton = (options: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  width: number | PDFNumber;\n  height: number | PDFNumber;\n  borderWidth: number | PDFNumber;\n  color: Color | undefined;\n  borderColor: Color | undefined;\n  textLines: { encoded: PDFHexString; x: number; y: number }[];\n  textColor: Color;\n  font: string | PDFName;\n  fontSize: number | PDFNumber;\n}) => {\n  const x = asNumber(options.x);\n  const y = asNumber(options.y);\n  const width = asNumber(options.width);\n  const height = asNumber(options.height);\n\n  const background = drawRectangle({\n    x,\n    y,\n    width,\n    height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0),\n  });\n\n  const lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0),\n  });\n\n  return [pushGraphicsState(), ...background, ...lines, popGraphicsState()];\n};\n\nexport interface DrawTextLinesOptions {\n  color: Color;\n  font: string | PDFName;\n  size: number | PDFNumber;\n  rotate: Rotation;\n  xSkew: Rotation;\n  ySkew: Rotation;\n}\n\nexport const drawTextLines = (\n  lines: { encoded: PDFHexString; x: number; y: number }[],\n  options: DrawTextLinesOptions,\n): PDFOperator[] => {\n  const operators = [\n    beginText(),\n    setFillingColor(options.color),\n    setFontAndSize(options.font, options.size),\n  ];\n\n  for (let idx = 0, len = lines.length; idx < len; idx++) {\n    const { encoded, x, y } = lines[idx];\n    operators.push(\n      rotateAndSkewTextRadiansAndTranslate(\n        toRadians(options.rotate),\n        toRadians(options.xSkew),\n        toRadians(options.ySkew),\n        x,\n        y,\n      ),\n      showText(encoded),\n    );\n  }\n\n  operators.push(endText());\n\n  return operators;\n};\n\nexport const drawTextField = (options: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  width: number | PDFNumber;\n  height: number | PDFNumber;\n  borderWidth: number | PDFNumber;\n  color: Color | undefined;\n  borderColor: Color | undefined;\n  textLines: { encoded: PDFHexString; x: number; y: number }[];\n  textColor: Color;\n  font: string | PDFName;\n  fontSize: number | PDFNumber;\n  padding: number | PDFNumber;\n}) => {\n  const x = asNumber(options.x);\n  const y = asNumber(options.y);\n  const width = asNumber(options.width);\n  const height = asNumber(options.height);\n  const borderWidth = asNumber(options.borderWidth);\n  const padding = asNumber(options.padding);\n\n  const clipX = x + borderWidth / 2 + padding;\n  const clipY = y + borderWidth / 2 + padding;\n  const clipWidth = width - (borderWidth / 2 + padding) * 2;\n  const clipHeight = height - (borderWidth / 2 + padding) * 2;\n\n  const clippingArea = [\n    moveTo(clipX, clipY),\n    lineTo(clipX, clipY + clipHeight),\n    lineTo(clipX + clipWidth, clipY + clipHeight),\n    lineTo(clipX + clipWidth, clipY),\n    closePath(),\n    clip(),\n    endPath(),\n  ];\n\n  const background = drawRectangle({\n    x,\n    y,\n    width,\n    height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0),\n  });\n\n  const lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0),\n  });\n\n  const markedContent = [\n    beginMarkedContent('Tx'),\n    pushGraphicsState(),\n    ...lines,\n    popGraphicsState(),\n    endMarkedContent(),\n  ];\n\n  return [\n    pushGraphicsState(),\n    ...background,\n    ...clippingArea,\n    ...markedContent,\n    popGraphicsState(),\n  ];\n};\n\nexport const drawOptionList = (options: {\n  x: number | PDFNumber;\n  y: number | PDFNumber;\n  width: number | PDFNumber;\n  height: number | PDFNumber;\n  borderWidth: number | PDFNumber;\n  color: Color | undefined;\n  borderColor: Color | undefined;\n  textLines: { encoded: PDFHexString; x: number; y: number; height: number }[];\n  textColor: Color;\n  font: string | PDFName;\n  fontSize: number | PDFNumber;\n  lineHeight: number | PDFNumber;\n  selectedLines: number[];\n  selectedColor: Color;\n  padding: number | PDFNumber;\n}) => {\n  const x = asNumber(options.x);\n  const y = asNumber(options.y);\n  const width = asNumber(options.width);\n  const height = asNumber(options.height);\n  const lineHeight = asNumber(options.lineHeight);\n  const borderWidth = asNumber(options.borderWidth);\n  const padding = asNumber(options.padding);\n\n  const clipX = x + borderWidth / 2 + padding;\n  const clipY = y + borderWidth / 2 + padding;\n  const clipWidth = width - (borderWidth / 2 + padding) * 2;\n  const clipHeight = height - (borderWidth / 2 + padding) * 2;\n\n  const clippingArea = [\n    moveTo(clipX, clipY),\n    lineTo(clipX, clipY + clipHeight),\n    lineTo(clipX + clipWidth, clipY + clipHeight),\n    lineTo(clipX + clipWidth, clipY),\n    closePath(),\n    clip(),\n    endPath(),\n  ];\n\n  const background = drawRectangle({\n    x,\n    y,\n    width,\n    height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0),\n  });\n\n  const highlights: PDFOperator[] = [];\n  for (let idx = 0, len = options.selectedLines.length; idx < len; idx++) {\n    const line = options.textLines[options.selectedLines[idx]];\n    highlights.push(\n      ...drawRectangle({\n        x: line.x - padding,\n        y: line.y - (lineHeight - line.height) / 2,\n        width: width - borderWidth,\n        height: line.height + (lineHeight - line.height) / 2,\n        borderWidth: 0,\n        color: options.selectedColor,\n        borderColor: undefined,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0),\n      }),\n    );\n  }\n\n  const lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0),\n  });\n\n  const markedContent = [\n    beginMarkedContent('Tx'),\n    pushGraphicsState(),\n    ...lines,\n    popGraphicsState(),\n    endMarkedContent(),\n  ];\n\n  return [\n    pushGraphicsState(),\n    ...background,\n    ...highlights,\n    ...clippingArea,\n    ...markedContent,\n    popGraphicsState(),\n  ];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}