{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"../errors\");\nvar PDFName_1 = tslib_1.__importDefault(require(\"./PDFName\"));\nvar PDFNumber_1 = tslib_1.__importDefault(require(\"./PDFNumber\"));\nvar PDFObject_1 = tslib_1.__importDefault(require(\"./PDFObject\"));\nvar CharCodes_1 = tslib_1.__importDefault(require(\"../syntax/CharCodes\"));\nvar PDFStream = /** @class */function (_super) {\n  tslib_1.__extends(PDFStream, _super);\n  function PDFStream(dict) {\n    var _this = _super.call(this) || this;\n    _this.dict = dict;\n    return _this;\n  }\n  PDFStream.prototype.clone = function (_context) {\n    throw new errors_1.MethodNotImplementedError(this.constructor.name, 'clone');\n  };\n  PDFStream.prototype.getContentsString = function () {\n    throw new errors_1.MethodNotImplementedError(this.constructor.name, 'getContentsString');\n  };\n  PDFStream.prototype.getContents = function () {\n    throw new errors_1.MethodNotImplementedError(this.constructor.name, 'getContents');\n  };\n  PDFStream.prototype.getContentsSize = function () {\n    throw new errors_1.MethodNotImplementedError(this.constructor.name, 'getContentsSize');\n  };\n  PDFStream.prototype.updateDict = function () {\n    var contentsSize = this.getContentsSize();\n    this.dict.set(PDFName_1.default.Length, PDFNumber_1.default.of(contentsSize));\n  };\n  PDFStream.prototype.sizeInBytes = function () {\n    this.updateDict();\n    return this.dict.sizeInBytes() + this.getContentsSize() + 18;\n  };\n  PDFStream.prototype.toString = function () {\n    this.updateDict();\n    var streamString = this.dict.toString();\n    streamString += '\\nstream\\n';\n    streamString += this.getContentsString();\n    streamString += '\\nendstream';\n    return streamString;\n  };\n  PDFStream.prototype.copyBytesInto = function (buffer, offset) {\n    this.updateDict();\n    var initialOffset = offset;\n    offset += this.dict.copyBytesInto(buffer, offset);\n    buffer[offset++] = CharCodes_1.default.Newline;\n    buffer[offset++] = CharCodes_1.default.s;\n    buffer[offset++] = CharCodes_1.default.t;\n    buffer[offset++] = CharCodes_1.default.r;\n    buffer[offset++] = CharCodes_1.default.e;\n    buffer[offset++] = CharCodes_1.default.a;\n    buffer[offset++] = CharCodes_1.default.m;\n    buffer[offset++] = CharCodes_1.default.Newline;\n    var contents = this.getContents();\n    for (var idx = 0, len = contents.length; idx < len; idx++) {\n      buffer[offset++] = contents[idx];\n    }\n    buffer[offset++] = CharCodes_1.default.Newline;\n    buffer[offset++] = CharCodes_1.default.e;\n    buffer[offset++] = CharCodes_1.default.n;\n    buffer[offset++] = CharCodes_1.default.d;\n    buffer[offset++] = CharCodes_1.default.s;\n    buffer[offset++] = CharCodes_1.default.t;\n    buffer[offset++] = CharCodes_1.default.r;\n    buffer[offset++] = CharCodes_1.default.e;\n    buffer[offset++] = CharCodes_1.default.a;\n    buffer[offset++] = CharCodes_1.default.m;\n    return offset - initialOffset;\n  };\n  return PDFStream;\n}(PDFObject_1.default);\nexports.default = PDFStream;","map":{"version":3,"names":["errors_1","require","PDFName_1","tslib_1","__importDefault","PDFNumber_1","PDFObject_1","CharCodes_1","PDFStream","_super","__extends","dict","_this","call","prototype","clone","_context","MethodNotImplementedError","constructor","name","getContentsString","getContents","getContentsSize","updateDict","contentsSize","set","default","Length","of","sizeInBytes","toString","streamString","copyBytesInto","buffer","offset","initialOffset","Newline","s","t","r","e","a","m","contents","idx","len","length","n","d","exports"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/objects/PDFStream.ts"],"sourcesContent":["import { MethodNotImplementedError } from 'src/core/errors';\nimport PDFDict from 'src/core/objects/PDFDict';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFNumber from 'src/core/objects/PDFNumber';\nimport PDFObject from 'src/core/objects/PDFObject';\nimport PDFContext from 'src/core/PDFContext';\nimport CharCodes from 'src/core/syntax/CharCodes';\n\nclass PDFStream extends PDFObject {\n  readonly dict: PDFDict;\n\n  constructor(dict: PDFDict) {\n    super();\n    this.dict = dict;\n  }\n\n  clone(_context?: PDFContext): PDFStream {\n    throw new MethodNotImplementedError(this.constructor.name, 'clone');\n  }\n\n  getContentsString(): string {\n    throw new MethodNotImplementedError(\n      this.constructor.name,\n      'getContentsString',\n    );\n  }\n\n  getContents(): Uint8Array {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContents');\n  }\n\n  getContentsSize(): number {\n    throw new MethodNotImplementedError(\n      this.constructor.name,\n      'getContentsSize',\n    );\n  }\n\n  updateDict(): void {\n    const contentsSize = this.getContentsSize();\n    this.dict.set(PDFName.Length, PDFNumber.of(contentsSize));\n  }\n\n  sizeInBytes(): number {\n    this.updateDict();\n    return this.dict.sizeInBytes() + this.getContentsSize() + 18;\n  }\n\n  toString(): string {\n    this.updateDict();\n    let streamString = this.dict.toString();\n    streamString += '\\nstream\\n';\n    streamString += this.getContentsString();\n    streamString += '\\nendstream';\n    return streamString;\n  }\n\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\n    this.updateDict();\n    const initialOffset = offset;\n\n    offset += this.dict.copyBytesInto(buffer, offset);\n    buffer[offset++] = CharCodes.Newline;\n\n    buffer[offset++] = CharCodes.s;\n    buffer[offset++] = CharCodes.t;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.a;\n    buffer[offset++] = CharCodes.m;\n    buffer[offset++] = CharCodes.Newline;\n\n    const contents = this.getContents();\n    for (let idx = 0, len = contents.length; idx < len; idx++) {\n      buffer[offset++] = contents[idx];\n    }\n\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.n;\n    buffer[offset++] = CharCodes.d;\n    buffer[offset++] = CharCodes.s;\n    buffer[offset++] = CharCodes.t;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.a;\n    buffer[offset++] = CharCodes.m;\n\n    return offset - initialOffset;\n  }\n}\n\nexport default PDFStream;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}