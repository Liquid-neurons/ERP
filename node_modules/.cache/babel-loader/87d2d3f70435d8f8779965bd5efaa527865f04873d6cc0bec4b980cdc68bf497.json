{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFPage_1 = tslib_1.__importDefault(require(\"../PDFPage\"));\nvar PDFFont_1 = tslib_1.__importDefault(require(\"../PDFFont\"));\nvar PDFField_1 = tslib_1.__importStar(require(\"./PDFField\"));\nvar appearances_1 = require(\"./appearances\");\nvar colors_1 = require(\"../colors\");\nvar rotations_1 = require(\"../rotations\");\nvar core_1 = require(\"../../core\");\nvar utils_1 = require(\"../../utils\");\n/**\n * Represents a dropdown field of a [[PDFForm]].\n *\n * [[PDFDropdown]] fields are interactive text boxes that display a single\n * element (the currently selected value). The purpose of a dropdown is to\n * enable users to select a single option from a set of possible options. Users\n * can click on a dropdown to view the full list of options it provides.\n * Clicking on an option in the list will cause it to be selected and displayed\n * in the dropdown's text box. Some dropdowns allow users to enter text\n * directly into the box from their keyboard, rather than only being allowed to\n * choose an option from the list (see [[PDFDropdown.isEditable]]).\n */\nvar PDFDropdown = /** @class */function (_super) {\n  tslib_1.__extends(PDFDropdown, _super);\n  function PDFDropdown(acroComboBox, ref, doc) {\n    var _this = _super.call(this, acroComboBox, ref, doc) || this;\n    utils_1.assertIs(acroComboBox, 'acroComboBox', [[core_1.PDFAcroComboBox, 'PDFAcroComboBox']]);\n    _this.acroField = acroComboBox;\n    return _this;\n  }\n  /**\n   * Get the list of available options for this dropdown. These options will be\n   * displayed to users who click on this dropdown in a PDF reader.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * const options = dropdown.getOptions()\n   * console.log('Dropdown options:', options)\n   * ```\n   * @returns The options for this dropdown.\n   */\n  PDFDropdown.prototype.getOptions = function () {\n    var rawOptions = this.acroField.getOptions();\n    var options = new Array(rawOptions.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = rawOptions[idx],\n        display = _a.display,\n        value = _a.value;\n      options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n    }\n    return options;\n  };\n  /**\n   * Get the selected options for this dropdown. These are the values that were\n   * selected by a human user via a PDF reader, or programatically via\n   * software.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * const selections = dropdown.getSelected()\n   * console.log('Dropdown selections:', selections)\n   * ```\n   * > **NOTE:** Note that PDF readers only display one selected option when\n   * > rendering dropdowns. However, the PDF specification does allow for\n   * > multiple values to be selected in a dropdown. As such, the `pdf-lib`\n   * > API supports this. However, in most cases the array returned by this\n   * > method will contain only a single element (or no elements).\n   * @returns The selected options in this dropdown.\n   */\n  PDFDropdown.prototype.getSelected = function () {\n    var values = this.acroField.getValues();\n    var selected = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n    return selected;\n  };\n  /**\n   * Set the list of options that are available for this dropdown. These are\n   * the values that will be available for users to select when they view this\n   * dropdown in a PDF reader. Note that preexisting options for this dropdown\n   * will be removed. Only the values passed as `options` will be available to\n   * select.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('planets.dropdown')\n   * dropdown.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\n   * ```\n   * @param options The options that should be available in this dropdown.\n   */\n  PDFDropdown.prototype.setOptions = function (options) {\n    utils_1.assertIs(options, 'options', [Array]);\n    var optionObjects = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = {\n        value: core_1.PDFHexString.fromText(options[idx])\n      };\n    }\n    this.acroField.setOptions(optionObjects);\n  };\n  /**\n   * Add to the list of options that are available for this dropdown. Users\n   * will be able to select these values in a PDF reader. In addition to the\n   * values passed as `options`, any preexisting options for this dropdown will\n   * still be available for users to select.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('rockets.dropdown')\n   * dropdown.addOptions(['Saturn IV', 'Falcon Heavy'])\n   * ```\n   * @param options New options that should be available in this dropdown.\n   */\n  PDFDropdown.prototype.addOptions = function (options) {\n    utils_1.assertIs(options, 'options', ['string', Array]);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var existingOptions = this.acroField.getOptions();\n    var newOptions = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = {\n        value: core_1.PDFHexString.fromText(optionsArr[idx])\n      };\n    }\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  };\n  /**\n   * Select one or more values for this dropdown. This operation is analogous\n   * to a human user opening the dropdown in a PDF reader and clicking on a\n   * value to select it. This method will update the underlying state of the\n   * dropdown to indicate which values have been selected. PDF libraries and\n   * readers will be able to extract these values from the saved document and\n   * determine which values were selected.\n   *\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('best.superhero.dropdown')\n   * dropdown.select('One Punch Man')\n   * ```\n   *\n   * This method will mark this dropdown as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n   * display the selected option inside the widgets of this dropdown.\n   *\n   * **IMPORTANT:** The default font used to update appearance streams is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if the selected option for this field\n   * contains characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing it to\n   * [[PDFForm.updateFieldAppearances]] or [[PDFDropdown.updateAppearances]]\n   * allows you to generate appearance streams with characters outside the\n   * latin alphabet (assuming the custom font supports them).\n   *\n   * Selecting an option that does not exist in this dropdown's option list\n   * (see [[PDFDropdown.getOptions]]) will enable editing on this dropdown\n   * (see [[PDFDropdown.enableEditing]]).\n   *\n   * > **NOTE:** PDF readers only display one selected option when rendering\n   * > dropdowns. However, the PDF specification does allow for multiple values\n   * > to be selected in a dropdown. As such, the `pdf-lib` API supports this.\n   * > However, it is not recommended to select more than one value with this\n   * > method, as only one will be visible. [[PDFOptionList]] fields are better\n   * > suited for displaying multiple selected values.\n   *\n   * @param options The options to be selected.\n   * @param merge Whether or not existing selections should be preserved.\n   */\n  PDFDropdown.prototype.select = function (options, merge) {\n    if (merge === void 0) {\n      merge = false;\n    }\n    utils_1.assertIs(options, 'options', ['string', Array]);\n    utils_1.assertIs(merge, 'merge', ['boolean']);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var validOptions = this.getOptions();\n    var hasCustomOption = optionsArr.find(function (option) {\n      return !validOptions.includes(option);\n    });\n    if (hasCustomOption) this.enableEditing();\n    this.markAsDirty();\n    if (optionsArr.length > 1 || optionsArr.length === 1 && merge) {\n      this.enableMultiselect();\n    }\n    var values = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = core_1.PDFHexString.fromText(optionsArr[idx]);\n    }\n    if (merge) {\n      var existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  };\n  /**\n   * Clear all selected values for this dropdown. This operation is equivalent\n   * to selecting an empty list. This method will update the underlying state\n   * of the dropdown to indicate that no values have been selected.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.clear()\n   * ```\n   * This method will mark this text field as dirty. See [[PDFDropdown.select]]\n   * for more details about what this means.\n   */\n  PDFDropdown.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  };\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this dropdown. Font sizes may\n   * be integer or floating point numbers. Supplying a negative font size will\n   * cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.setFontSize(4)\n   * dropdown.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  PDFDropdown.prototype.setFontSize = function (fontSize) {\n    utils_1.assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\n   * Returns `true` if users are allowed to edit the selected value of this\n   * dropdown directly and are not constrained by the list of available\n   * options. See [[PDFDropdown.enableEditing]] and\n   * [[PDFDropdown.disableEditing]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isEditable()) console.log('Editing is enabled')\n   * ```\n   * @returns Whether or not this dropdown is editable.\n   */\n  PDFDropdown.prototype.isEditable = function () {\n    return this.acroField.hasFlag(core_1.AcroChoiceFlags.Edit);\n  };\n  /**\n   * Allow users to edit the selected value of this dropdown in PDF readers\n   * with their keyboard. This means that the selected value of this dropdown\n   * will not be constrained by the list of available options. However, if this\n   * dropdown has any available options, users will still be allowed to select\n   * from that list.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableEditing()\n   * ```\n   */\n  PDFDropdown.prototype.enableEditing = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.Edit, true);\n  };\n  /**\n   * Do not allow users to edit the selected value of this dropdown in PDF\n   * readers with their keyboard. This will constrain the selected value of\n   * this dropdown to the list of available options. Users will only be able\n   * to select an option from that list.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableEditing()\n   * ```\n   */\n  PDFDropdown.prototype.disableEditing = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.Edit, false);\n  };\n  /**\n   * Returns `true` if the option list of this dropdown is always displayed\n   * in alphabetical order, irrespective of the order in which the options\n   * were added to the dropdown. See [[PDFDropdown.enableSorting]] and\n   * [[PDFDropdown.disableSorting]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSorted()) console.log('Sorting is enabled')\n   * ```\n   * @returns Whether or not this dropdown's options are sorted.\n   */\n  PDFDropdown.prototype.isSorted = function () {\n    return this.acroField.hasFlag(core_1.AcroChoiceFlags.Sort);\n  };\n  /**\n   * Always display the option list of this dropdown in alphabetical order,\n   * irrespective of the order in which the options were added to this dropdown.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSorting()\n   * ```\n   */\n  PDFDropdown.prototype.enableSorting = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.Sort, true);\n  };\n  /**\n   * Do not always display the option list of this dropdown in alphabetical\n   * order. Instead, display the options in whichever order they were added\n   * to the list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSorting()\n   * ```\n   */\n  PDFDropdown.prototype.disableSorting = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.Sort, false);\n  };\n  /**\n   * Returns `true` if multiple options can be selected from this dropdown's\n   * option list. See [[PDFDropdown.enableMultiselect]] and\n   * [[PDFDropdown.disableMultiselect]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isMultiselect()) console.log('Multiselect is enabled')\n   * ```\n   * @returns Whether or not multiple options can be selected.\n   */\n  PDFDropdown.prototype.isMultiselect = function () {\n    return this.acroField.hasFlag(core_1.AcroChoiceFlags.MultiSelect);\n  };\n  /**\n   * Allow users to select more than one option from this dropdown's option\n   * list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableMultiselect()\n   * ```\n   */\n  PDFDropdown.prototype.enableMultiselect = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.MultiSelect, true);\n  };\n  /**\n   * Do not allow users to select more than one option from this dropdown's\n   * option list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableMultiselect()\n   * ```\n   */\n  PDFDropdown.prototype.disableMultiselect = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.MultiSelect, false);\n  };\n  /**\n   * Returns `true` if the selected option should be spell checked by PDF\n   * readers. Spell checking will only be performed if this dropdown allows\n   * editing (see [[PDFDropdown.isEditable]]). See\n   * [[PDFDropdown.enableSpellChecking]] and\n   * [[PDFDropdown.disableSpellChecking]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSpellChecked()) console.log('Spell checking is enabled')\n   * ```\n   * @returns Whether or not this dropdown can be spell checked.\n   */\n  PDFDropdown.prototype.isSpellChecked = function () {\n    return !this.acroField.hasFlag(core_1.AcroChoiceFlags.DoNotSpellCheck);\n  };\n  /**\n   * Allow PDF readers to spell check the selected option of this dropdown.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSpellChecking()\n   * ```\n   */\n  PDFDropdown.prototype.enableSpellChecking = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.DoNotSpellCheck, false);\n  };\n  /**\n   * Do not allow PDF readers to spell check the selected option of this\n   * dropdown. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSpellChecking()\n   * ```\n   */\n  PDFDropdown.prototype.disableSpellChecking = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.DoNotSpellCheck, true);\n  };\n  /**\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\n   * when the user clicks the option. The alternative is that the user's\n   * selection is stored when the user leaves this dropdown field (by clicking\n   * outside of it - on another field, for example). See\n   * [[PDFDropdown.enableSelectOnClick]] and\n   * [[PDFDropdown.disableSelectOnClick]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSelectOnClick()) console.log('Select on click is enabled')\n   * ```\n   * @returns Whether or not options are selected immediately after they are\n   *          clicked.\n   */\n  PDFDropdown.prototype.isSelectOnClick = function () {\n    return this.acroField.hasFlag(core_1.AcroChoiceFlags.CommitOnSelChange);\n  };\n  /**\n   * Store the option selected by a user immediately after the user clicks the\n   * option. Do not wait for the user to leave this dropdown field (by clicking\n   * outside of it - on another field, for example). For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSelectOnClick()\n   * ```\n   */\n  PDFDropdown.prototype.enableSelectOnClick = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.CommitOnSelChange, true);\n  };\n  /**\n   * Wait to store the option selected by a user until they leave this dropdown\n   * field (by clicking outside of it - on another field, for example).\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSelectOnClick()\n   * ```\n   */\n  PDFDropdown.prototype.disableSelectOnClick = function () {\n    this.acroField.setFlagTo(core_1.AcroChoiceFlags.CommitOnSelChange, false);\n  };\n  /**\n   * Show this dropdown on the specified page. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.createDropdown('best.gundam')\n   * dropdown.setOptions(['Exia', 'Dynames'])\n   * dropdown.select('Exia')\n   *\n   * dropdown.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this dropdown field.\n   * @param page The page to which this dropdown widget should be added.\n   * @param options The options to be used when adding this dropdown widget.\n   */\n  PDFDropdown.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    utils_1.assertIs(page, 'page', [[PDFPage_1.default, 'PDFPage']]);\n    PDFField_1.assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = colors_1.rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = colors_1.rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = colors_1.rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this dropdown\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : rotations_1.degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this dropdown has been marked as dirty, or if any of\n   * this dropdown's widgets do not have an appearance stream. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this dropdown needs an appearance update.\n   */\n  PDFDropdown.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof core_1.PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this dropdown's widgets using\n   * the default appearance provider for dropdowns. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  PDFDropdown.prototype.defaultUpdateAppearances = function (font) {\n    utils_1.assertIs(font, 'font', [[PDFFont_1.default, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this dropdown's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for dropdowns will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return drawTextField(...)\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFDropdown.prototype.updateAppearances = function (font, provider) {\n    utils_1.assertIs(font, 'font', [[PDFFont_1.default, 'PDFFont']]);\n    utils_1.assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  };\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n  PDFDropdown.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : appearances_1.defaultDropdownAppearanceProvider;\n    var appearances = appearances_1.normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getDropdown]] method, which will create an\n   * > instance of [[PDFDropdown]] for you.\n   *\n   * Create an instance of [[PDFDropdown]] from an existing acroComboBox and ref\n   *\n   * @param acroComboBox The underlying `PDFAcroComboBox` for this dropdown.\n   * @param ref The unique reference for this dropdown.\n   * @param doc The document to which this dropdown will belong.\n   */\n  PDFDropdown.of = function (acroComboBox, ref, doc) {\n    return new PDFDropdown(acroComboBox, ref, doc);\n  };\n  return PDFDropdown;\n}(PDFField_1.default);\nexports.default = PDFDropdown;","map":{"version":3,"names":["PDFPage_1","tslib_1","__importDefault","require","PDFFont_1","PDFField_1","__importStar","appearances_1","colors_1","rotations_1","core_1","utils_1","PDFDropdown","_super","__extends","acroComboBox","ref","doc","_this","call","assertIs","PDFAcroComboBox","acroField","prototype","getOptions","rawOptions","options","Array","length","idx","len","_a","display","value","decodeText","getSelected","values","getValues","selected","setOptions","optionObjects","PDFHexString","fromText","addOptions","optionsArr","isArray","existingOptions","newOptions","concat","select","merge","validOptions","hasCustomOption","find","option","includes","enableEditing","markAsDirty","enableMultiselect","existingValues","setValues","clear","setFontSize","fontSize","assertPositive","isEditable","hasFlag","AcroChoiceFlags","Edit","setFlagTo","disableEditing","isSorted","Sort","enableSorting","disableSorting","isMultiselect","MultiSelect","disableMultiselect","isSpellChecked","DoNotSpellCheck","enableSpellChecking","disableSpellChecking","isSelectOnClick","CommitOnSelChange","enableSelectOnClick","disableSelectOnClick","addToPage","page","default","assertFieldAppearanceOptions","textColor","rgb","backgroundColor","borderColor","borderWidth","widget","createWidget","x","y","_b","width","_c","height","_d","_e","rotate","_f","degrees","hidden","widgetRef","context","register","dict","addWidget","font","_g","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","isDirty","widgets","getWidgets","hasAppearances","getAppearances","normal","PDFStream","defaultUpdateAppearances","updateAppearances","provider","assertOrUndefined","Function","markAsClean","apProvider","defaultDropdownAppearanceProvider","appearances","normalizeAppearance","updateWidgetAppearanceWithFont","of"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/form/PDFDropdown.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\nimport PDFPage from 'src/api/PDFPage';\nimport PDFFont from 'src/api/PDFFont';\nimport PDFField, {\n  FieldAppearanceOptions,\n  assertFieldAppearanceOptions,\n} from 'src/api/form/PDFField';\nimport {\n  AppearanceProviderFor,\n  normalizeAppearance,\n  defaultDropdownAppearanceProvider,\n} from 'src/api/form/appearances';\nimport { rgb } from 'src/api/colors';\nimport { degrees } from 'src/api/rotations';\n\nimport {\n  PDFHexString,\n  PDFRef,\n  PDFString,\n  PDFStream,\n  PDFWidgetAnnotation,\n  PDFAcroComboBox,\n  AcroChoiceFlags,\n} from 'src/core';\nimport { assertIs, assertOrUndefined, assertPositive } from 'src/utils';\n\n/**\n * Represents a dropdown field of a [[PDFForm]].\n *\n * [[PDFDropdown]] fields are interactive text boxes that display a single\n * element (the currently selected value). The purpose of a dropdown is to\n * enable users to select a single option from a set of possible options. Users\n * can click on a dropdown to view the full list of options it provides.\n * Clicking on an option in the list will cause it to be selected and displayed\n * in the dropdown's text box. Some dropdowns allow users to enter text\n * directly into the box from their keyboard, rather than only being allowed to\n * choose an option from the list (see [[PDFDropdown.isEditable]]).\n */\nexport default class PDFDropdown extends PDFField {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getDropdown]] method, which will create an\n   * > instance of [[PDFDropdown]] for you.\n   *\n   * Create an instance of [[PDFDropdown]] from an existing acroComboBox and ref\n   *\n   * @param acroComboBox The underlying `PDFAcroComboBox` for this dropdown.\n   * @param ref The unique reference for this dropdown.\n   * @param doc The document to which this dropdown will belong.\n   */\n  static of = (acroComboBox: PDFAcroComboBox, ref: PDFRef, doc: PDFDocument) =>\n    new PDFDropdown(acroComboBox, ref, doc);\n\n  /** The low-level PDFAcroComboBox wrapped by this dropdown. */\n  readonly acroField: PDFAcroComboBox;\n\n  private constructor(\n    acroComboBox: PDFAcroComboBox,\n    ref: PDFRef,\n    doc: PDFDocument,\n  ) {\n    super(acroComboBox, ref, doc);\n\n    assertIs(acroComboBox, 'acroComboBox', [\n      [PDFAcroComboBox, 'PDFAcroComboBox'],\n    ]);\n\n    this.acroField = acroComboBox;\n  }\n\n  /**\n   * Get the list of available options for this dropdown. These options will be\n   * displayed to users who click on this dropdown in a PDF reader.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * const options = dropdown.getOptions()\n   * console.log('Dropdown options:', options)\n   * ```\n   * @returns The options for this dropdown.\n   */\n  getOptions(): string[] {\n    const rawOptions = this.acroField.getOptions();\n\n    const options = new Array<string>(rawOptions.length);\n    for (let idx = 0, len = options.length; idx < len; idx++) {\n      const { display, value } = rawOptions[idx];\n      options[idx] = (display ?? value).decodeText();\n    }\n\n    return options;\n  }\n\n  /**\n   * Get the selected options for this dropdown. These are the values that were\n   * selected by a human user via a PDF reader, or programatically via\n   * software.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * const selections = dropdown.getSelected()\n   * console.log('Dropdown selections:', selections)\n   * ```\n   * > **NOTE:** Note that PDF readers only display one selected option when\n   * > rendering dropdowns. However, the PDF specification does allow for\n   * > multiple values to be selected in a dropdown. As such, the `pdf-lib`\n   * > API supports this. However, in most cases the array returned by this\n   * > method will contain only a single element (or no elements).\n   * @returns The selected options in this dropdown.\n   */\n  getSelected(): string[] {\n    const values = this.acroField.getValues();\n\n    const selected = new Array<string>(values.length);\n    for (let idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n\n    return selected;\n  }\n\n  /**\n   * Set the list of options that are available for this dropdown. These are\n   * the values that will be available for users to select when they view this\n   * dropdown in a PDF reader. Note that preexisting options for this dropdown\n   * will be removed. Only the values passed as `options` will be available to\n   * select.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('planets.dropdown')\n   * dropdown.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\n   * ```\n   * @param options The options that should be available in this dropdown.\n   */\n  setOptions(options: string[]) {\n    assertIs(options, 'options', [Array]);\n\n    const optionObjects = new Array<{ value: PDFHexString }>(options.length);\n    for (let idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = { value: PDFHexString.fromText(options[idx]) };\n    }\n    this.acroField.setOptions(optionObjects);\n  }\n\n  /**\n   * Add to the list of options that are available for this dropdown. Users\n   * will be able to select these values in a PDF reader. In addition to the\n   * values passed as `options`, any preexisting options for this dropdown will\n   * still be available for users to select.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('rockets.dropdown')\n   * dropdown.addOptions(['Saturn IV', 'Falcon Heavy'])\n   * ```\n   * @param options New options that should be available in this dropdown.\n   */\n  addOptions(options: string | string[]) {\n    assertIs(options, 'options', ['string', Array]);\n\n    const optionsArr = Array.isArray(options) ? options : [options];\n\n    const existingOptions: {\n      value: PDFString | PDFHexString;\n      display?: PDFString | PDFHexString;\n    }[] = this.acroField.getOptions();\n\n    const newOptions = new Array<{ value: PDFHexString }>(optionsArr.length);\n    for (let idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = { value: PDFHexString.fromText(optionsArr[idx]) };\n    }\n\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  }\n\n  /**\n   * Select one or more values for this dropdown. This operation is analogous\n   * to a human user opening the dropdown in a PDF reader and clicking on a\n   * value to select it. This method will update the underlying state of the\n   * dropdown to indicate which values have been selected. PDF libraries and\n   * readers will be able to extract these values from the saved document and\n   * determine which values were selected.\n   *\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('best.superhero.dropdown')\n   * dropdown.select('One Punch Man')\n   * ```\n   *\n   * This method will mark this dropdown as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n   * display the selected option inside the widgets of this dropdown.\n   *\n   * **IMPORTANT:** The default font used to update appearance streams is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if the selected option for this field\n   * contains characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing it to\n   * [[PDFForm.updateFieldAppearances]] or [[PDFDropdown.updateAppearances]]\n   * allows you to generate appearance streams with characters outside the\n   * latin alphabet (assuming the custom font supports them).\n   *\n   * Selecting an option that does not exist in this dropdown's option list\n   * (see [[PDFDropdown.getOptions]]) will enable editing on this dropdown\n   * (see [[PDFDropdown.enableEditing]]).\n   *\n   * > **NOTE:** PDF readers only display one selected option when rendering\n   * > dropdowns. However, the PDF specification does allow for multiple values\n   * > to be selected in a dropdown. As such, the `pdf-lib` API supports this.\n   * > However, it is not recommended to select more than one value with this\n   * > method, as only one will be visible. [[PDFOptionList]] fields are better\n   * > suited for displaying multiple selected values.\n   *\n   * @param options The options to be selected.\n   * @param merge Whether or not existing selections should be preserved.\n   */\n  select(options: string | string[], merge = false) {\n    assertIs(options, 'options', ['string', Array]);\n    assertIs(merge, 'merge', ['boolean']);\n\n    const optionsArr = Array.isArray(options) ? options : [options];\n\n    const validOptions = this.getOptions();\n    const hasCustomOption = optionsArr.find(\n      (option) => !validOptions.includes(option),\n    );\n    if (hasCustomOption) this.enableEditing();\n\n    this.markAsDirty();\n\n    if (optionsArr.length > 1 || (optionsArr.length === 1 && merge)) {\n      this.enableMultiselect();\n    }\n\n    const values = new Array<PDFHexString>(optionsArr.length);\n    for (let idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = PDFHexString.fromText(optionsArr[idx]);\n    }\n\n    if (merge) {\n      const existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  }\n\n  /**\n   * Clear all selected values for this dropdown. This operation is equivalent\n   * to selecting an empty list. This method will update the underlying state\n   * of the dropdown to indicate that no values have been selected.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.clear()\n   * ```\n   * This method will mark this text field as dirty. See [[PDFDropdown.select]]\n   * for more details about what this means.\n   */\n  clear() {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  }\n\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this dropdown. Font sizes may\n   * be integer or floating point numbers. Supplying a negative font size will\n   * cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.setFontSize(4)\n   * dropdown.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  setFontSize(fontSize: number) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  }\n\n  /**\n   * Returns `true` if users are allowed to edit the selected value of this\n   * dropdown directly and are not constrained by the list of available\n   * options. See [[PDFDropdown.enableEditing]] and\n   * [[PDFDropdown.disableEditing]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isEditable()) console.log('Editing is enabled')\n   * ```\n   * @returns Whether or not this dropdown is editable.\n   */\n  isEditable(): boolean {\n    return this.acroField.hasFlag(AcroChoiceFlags.Edit);\n  }\n\n  /**\n   * Allow users to edit the selected value of this dropdown in PDF readers\n   * with their keyboard. This means that the selected value of this dropdown\n   * will not be constrained by the list of available options. However, if this\n   * dropdown has any available options, users will still be allowed to select\n   * from that list.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableEditing()\n   * ```\n   */\n  enableEditing() {\n    this.acroField.setFlagTo(AcroChoiceFlags.Edit, true);\n  }\n\n  /**\n   * Do not allow users to edit the selected value of this dropdown in PDF\n   * readers with their keyboard. This will constrain the selected value of\n   * this dropdown to the list of available options. Users will only be able\n   * to select an option from that list.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableEditing()\n   * ```\n   */\n  disableEditing() {\n    this.acroField.setFlagTo(AcroChoiceFlags.Edit, false);\n  }\n\n  /**\n   * Returns `true` if the option list of this dropdown is always displayed\n   * in alphabetical order, irrespective of the order in which the options\n   * were added to the dropdown. See [[PDFDropdown.enableSorting]] and\n   * [[PDFDropdown.disableSorting]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSorted()) console.log('Sorting is enabled')\n   * ```\n   * @returns Whether or not this dropdown's options are sorted.\n   */\n  isSorted(): boolean {\n    return this.acroField.hasFlag(AcroChoiceFlags.Sort);\n  }\n\n  /**\n   * Always display the option list of this dropdown in alphabetical order,\n   * irrespective of the order in which the options were added to this dropdown.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSorting()\n   * ```\n   */\n  enableSorting() {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, true);\n  }\n\n  /**\n   * Do not always display the option list of this dropdown in alphabetical\n   * order. Instead, display the options in whichever order they were added\n   * to the list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSorting()\n   * ```\n   */\n  disableSorting() {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, false);\n  }\n\n  /**\n   * Returns `true` if multiple options can be selected from this dropdown's\n   * option list. See [[PDFDropdown.enableMultiselect]] and\n   * [[PDFDropdown.disableMultiselect]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isMultiselect()) console.log('Multiselect is enabled')\n   * ```\n   * @returns Whether or not multiple options can be selected.\n   */\n  isMultiselect(): boolean {\n    return this.acroField.hasFlag(AcroChoiceFlags.MultiSelect);\n  }\n\n  /**\n   * Allow users to select more than one option from this dropdown's option\n   * list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableMultiselect()\n   * ```\n   */\n  enableMultiselect() {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, true);\n  }\n\n  /**\n   * Do not allow users to select more than one option from this dropdown's\n   * option list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableMultiselect()\n   * ```\n   */\n  disableMultiselect() {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, false);\n  }\n\n  /**\n   * Returns `true` if the selected option should be spell checked by PDF\n   * readers. Spell checking will only be performed if this dropdown allows\n   * editing (see [[PDFDropdown.isEditable]]). See\n   * [[PDFDropdown.enableSpellChecking]] and\n   * [[PDFDropdown.disableSpellChecking]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSpellChecked()) console.log('Spell checking is enabled')\n   * ```\n   * @returns Whether or not this dropdown can be spell checked.\n   */\n  isSpellChecked(): boolean {\n    return !this.acroField.hasFlag(AcroChoiceFlags.DoNotSpellCheck);\n  }\n\n  /**\n   * Allow PDF readers to spell check the selected option of this dropdown.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSpellChecking()\n   * ```\n   */\n  enableSpellChecking() {\n    this.acroField.setFlagTo(AcroChoiceFlags.DoNotSpellCheck, false);\n  }\n\n  /**\n   * Do not allow PDF readers to spell check the selected option of this\n   * dropdown. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSpellChecking()\n   * ```\n   */\n  disableSpellChecking() {\n    this.acroField.setFlagTo(AcroChoiceFlags.DoNotSpellCheck, true);\n  }\n\n  /**\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\n   * when the user clicks the option. The alternative is that the user's\n   * selection is stored when the user leaves this dropdown field (by clicking\n   * outside of it - on another field, for example). See\n   * [[PDFDropdown.enableSelectOnClick]] and\n   * [[PDFDropdown.disableSelectOnClick]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSelectOnClick()) console.log('Select on click is enabled')\n   * ```\n   * @returns Whether or not options are selected immediately after they are\n   *          clicked.\n   */\n  isSelectOnClick(): boolean {\n    return this.acroField.hasFlag(AcroChoiceFlags.CommitOnSelChange);\n  }\n\n  /**\n   * Store the option selected by a user immediately after the user clicks the\n   * option. Do not wait for the user to leave this dropdown field (by clicking\n   * outside of it - on another field, for example). For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSelectOnClick()\n   * ```\n   */\n  enableSelectOnClick() {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, true);\n  }\n\n  /**\n   * Wait to store the option selected by a user until they leave this dropdown\n   * field (by clicking outside of it - on another field, for example).\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSelectOnClick()\n   * ```\n   */\n  disableSelectOnClick() {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, false);\n  }\n\n  /**\n   * Show this dropdown on the specified page. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.createDropdown('best.gundam')\n   * dropdown.setOptions(['Exia', 'Dynames'])\n   * dropdown.select('Exia')\n   *\n   * dropdown.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this dropdown field.\n   * @param page The page to which this dropdown widget should be added.\n   * @param options The options to be used when adding this dropdown widget.\n   */\n  addToPage(page: PDFPage, options?: FieldAppearanceOptions) {\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n\n    if (!options) options = {};\n\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n\n    // Create a widget for this dropdown\n    const widget = this.createWidget({\n      x: options.x ?? 0,\n      y: options.y ?? 0,\n      width: options.width ?? 200,\n      height: options.height ?? 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: options.borderWidth ?? 0,\n      rotate: options.rotate ?? degrees(0),\n      hidden: options.hidden,\n      page: page.ref,\n    });\n    const widgetRef = this.doc.context.register(widget.dict);\n\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n\n    // Set appearance streams for widget\n    const font = options.font ?? this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  }\n\n  /**\n   * Returns `true` if this dropdown has been marked as dirty, or if any of\n   * this dropdown's widgets do not have an appearance stream. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this dropdown needs an appearance update.\n   */\n  needsAppearancesUpdate(): boolean {\n    if (this.isDirty()) return true;\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const hasAppearances =\n        widget.getAppearances()?.normal instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update the appearance streams for each of this dropdown's widgets using\n   * the default appearance provider for dropdowns. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  defaultUpdateAppearances(font: PDFFont) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  }\n\n  /**\n   * Update the appearance streams for each of this dropdown's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for dropdowns will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return drawTextField(...)\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  updateAppearances(\n    font: PDFFont,\n    provider?: AppearanceProviderFor<PDFDropdown>,\n  ) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  }\n\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n\n  private updateWidgetAppearance(\n    widget: PDFWidgetAnnotation,\n    font: PDFFont,\n    provider?: AppearanceProviderFor<PDFDropdown>,\n  ) {\n    const apProvider = provider ?? defaultDropdownAppearanceProvider;\n    const appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}