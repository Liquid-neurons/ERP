{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFObject_1 = tslib_1.__importDefault(require(\"./PDFObject\"));\nvar CharCodes_1 = tslib_1.__importDefault(require(\"../syntax/CharCodes\"));\nvar utils_1 = require(\"../../utils\");\nvar errors_1 = require(\"../errors\");\nvar PDFHexString = /** @class */function (_super) {\n  tslib_1.__extends(PDFHexString, _super);\n  function PDFHexString(value) {\n    var _this = _super.call(this) || this;\n    _this.value = value;\n    return _this;\n  }\n  PDFHexString.prototype.asBytes = function () {\n    // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\n    var hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\n    var hexLength = hex.length;\n    var bytes = new Uint8Array(hex.length / 2);\n    var hexOffset = 0;\n    var bytesOffset = 0;\n    // Interpret each pair of hex digits as a single byte\n    while (hexOffset < hexLength) {\n      var byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\n      bytes[bytesOffset] = byte;\n      hexOffset += 2;\n      bytesOffset += 1;\n    }\n    return bytes;\n  };\n  PDFHexString.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    if (utils_1.hasUtf16BOM(bytes)) return utils_1.utf16Decode(bytes);\n    return utils_1.pdfDocEncodingDecode(bytes);\n  };\n  PDFHexString.prototype.decodeDate = function () {\n    var text = this.decodeText();\n    var date = utils_1.parseDate(text);\n    if (!date) throw new errors_1.InvalidPDFDateStringError(text);\n    return date;\n  };\n  PDFHexString.prototype.asString = function () {\n    return this.value;\n  };\n  PDFHexString.prototype.clone = function () {\n    return PDFHexString.of(this.value);\n  };\n  PDFHexString.prototype.toString = function () {\n    return \"<\" + this.value + \">\";\n  };\n  PDFHexString.prototype.sizeInBytes = function () {\n    return this.value.length + 2;\n  };\n  PDFHexString.prototype.copyBytesInto = function (buffer, offset) {\n    buffer[offset++] = CharCodes_1.default.LessThan;\n    offset += utils_1.copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes_1.default.GreaterThan;\n    return this.value.length + 2;\n  };\n  PDFHexString.of = function (value) {\n    return new PDFHexString(value);\n  };\n  PDFHexString.fromText = function (value) {\n    var encoded = utils_1.utf16Encode(value);\n    var hex = '';\n    for (var idx = 0, len = encoded.length; idx < len; idx++) {\n      hex += utils_1.toHexStringOfMinLength(encoded[idx], 4);\n    }\n    return new PDFHexString(hex);\n  };\n  return PDFHexString;\n}(PDFObject_1.default);\nexports.default = PDFHexString;","map":{"version":3,"names":["PDFObject_1","tslib_1","__importDefault","require","CharCodes_1","utils_1","errors_1","PDFHexString","_super","__extends","value","_this","call","prototype","asBytes","hex","length","hexLength","bytes","Uint8Array","hexOffset","bytesOffset","byte","parseInt","substring","decodeText","hasUtf16BOM","utf16Decode","pdfDocEncodingDecode","decodeDate","text","date","parseDate","InvalidPDFDateStringError","asString","clone","of","toString","sizeInBytes","copyBytesInto","buffer","offset","default","LessThan","copyStringIntoBuffer","GreaterThan","fromText","encoded","utf16Encode","idx","len","toHexStringOfMinLength","exports"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/objects/PDFHexString.ts"],"sourcesContent":["import PDFObject from 'src/core/objects/PDFObject';\nimport CharCodes from 'src/core/syntax/CharCodes';\nimport {\n  copyStringIntoBuffer,\n  toHexStringOfMinLength,\n  utf16Decode,\n  utf16Encode,\n  pdfDocEncodingDecode,\n  parseDate,\n  hasUtf16BOM,\n} from 'src/utils';\nimport { InvalidPDFDateStringError } from 'src/core/errors';\n\nclass PDFHexString extends PDFObject {\n  static of = (value: string) => new PDFHexString(value);\n\n  static fromText = (value: string) => {\n    const encoded = utf16Encode(value);\n\n    let hex = '';\n    for (let idx = 0, len = encoded.length; idx < len; idx++) {\n      hex += toHexStringOfMinLength(encoded[idx], 4);\n    }\n\n    return new PDFHexString(hex);\n  };\n\n  private readonly value: string;\n\n  constructor(value: string) {\n    super();\n    this.value = value;\n  }\n\n  asBytes(): Uint8Array {\n    // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\n    const hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\n    const hexLength = hex.length;\n\n    const bytes = new Uint8Array(hex.length / 2);\n\n    let hexOffset = 0;\n    let bytesOffset = 0;\n\n    // Interpret each pair of hex digits as a single byte\n    while (hexOffset < hexLength) {\n      const byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\n      bytes[bytesOffset] = byte;\n\n      hexOffset += 2;\n      bytesOffset += 1;\n    }\n\n    return bytes;\n  }\n\n  decodeText(): string {\n    const bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  }\n\n  decodeDate(): Date {\n    const text = this.decodeText();\n    const date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  }\n\n  asString(): string {\n    return this.value;\n  }\n\n  clone(): PDFHexString {\n    return PDFHexString.of(this.value);\n  }\n\n  toString(): string {\n    return `<${this.value}>`;\n  }\n\n  sizeInBytes(): number {\n    return this.value.length + 2;\n  }\n\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\n    buffer[offset++] = CharCodes.LessThan;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.GreaterThan;\n    return this.value.length + 2;\n  }\n}\n\nexport default PDFHexString;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}