{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFDocument_1 = tslib_1.__importDefault(require(\"./PDFDocument\"));\nvar core_1 = require(\"../core\");\nvar utils_1 = require(\"../utils\");\n/**\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedPage = /** @class */function () {\n  function PDFEmbeddedPage(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    utils_1.assertIs(ref, 'ref', [[core_1.PDFRef, 'PDFRef']]);\n    utils_1.assertIs(doc, 'doc', [[PDFDocument_1.default, 'PDFDocument']]);\n    utils_1.assertIs(embedder, 'embedder', [[core_1.PDFPageEmbedder, 'PDFPageEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\n   * Compute the width and height of this page after being scaled by the\n   * given `factor`. For example:\n   * ```js\n   * embeddedPage.width  // => 500\n   * embeddedPage.height // => 250\n   *\n   * const scaled = embeddedPage.scale(0.5)\n   * scaled.width  // => 250\n   * scaled.height // => 125\n   * ```\n   * This operation is often useful before drawing a page with\n   * [[PDFPage.drawPage]] to compute the `width` and `height` options.\n   * @param factor The factor by which this page should be scaled.\n   * @returns The width and height of the page after being scaled.\n   */\n  PDFEmbeddedPage.prototype.scale = function (factor) {\n    utils_1.assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\n   * Get the width and height of this page. For example:\n   * ```js\n   * const { width, height } = embeddedPage.size()\n   * ```\n   * @returns The width and height of the page.\n   */\n  PDFEmbeddedPage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable pages get embedded.\n   *\n   * Embed this embeddable page in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFEmbeddedPage.prototype.embed = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            _a.sent();\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedPdf]] and\n   * > [[PDFDocument.embedPage]] methods, which will create instances of\n   * > [[PDFEmbeddedPage]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this embedded page.\n   * @param doc The document to which the embedded page will belong.\n   * @param embedder The embedder that will be used to embed the page.\n   */\n  PDFEmbeddedPage.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedPage(ref, doc, embedder);\n  };\n  return PDFEmbeddedPage;\n}();\nexports.default = PDFEmbeddedPage;","map":{"version":3,"names":["PDFDocument_1","tslib_1","__importDefault","require","core_1","utils_1","PDFEmbeddedPage","ref","doc","embedder","alreadyEmbedded","assertIs","PDFRef","default","PDFPageEmbedder","width","height","prototype","scale","factor","size","embed","embedIntoContext","context","_a","sent","of"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/PDFEmbeddedPage.ts"],"sourcesContent":["import Embeddable from 'src/api/Embeddable';\nimport PDFDocument from 'src/api/PDFDocument';\nimport { PDFPageEmbedder, PDFRef } from 'src/core';\nimport { assertIs } from 'src/utils';\n\n/**\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\n */\nexport default class PDFEmbeddedPage implements Embeddable {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedPdf]] and\n   * > [[PDFDocument.embedPage]] methods, which will create instances of\n   * > [[PDFEmbeddedPage]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this embedded page.\n   * @param doc The document to which the embedded page will belong.\n   * @param embedder The embedder that will be used to embed the page.\n   */\n  static of = (ref: PDFRef, doc: PDFDocument, embedder: PDFPageEmbedder) =>\n    new PDFEmbeddedPage(ref, doc, embedder);\n\n  /** The unique reference assigned to this embedded page within the document. */\n  readonly ref: PDFRef;\n\n  /** The document to which this embedded page belongs. */\n  readonly doc: PDFDocument;\n\n  /** The width of this page in pixels. */\n  readonly width: number;\n\n  /** The height of this page in pixels. */\n  readonly height: number;\n\n  private alreadyEmbedded = false;\n  private readonly embedder: PDFPageEmbedder;\n\n  private constructor(\n    ref: PDFRef,\n    doc: PDFDocument,\n    embedder: PDFPageEmbedder,\n  ) {\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n\n    this.embedder = embedder;\n  }\n\n  /**\n   * Compute the width and height of this page after being scaled by the\n   * given `factor`. For example:\n   * ```js\n   * embeddedPage.width  // => 500\n   * embeddedPage.height // => 250\n   *\n   * const scaled = embeddedPage.scale(0.5)\n   * scaled.width  // => 250\n   * scaled.height // => 125\n   * ```\n   * This operation is often useful before drawing a page with\n   * [[PDFPage.drawPage]] to compute the `width` and `height` options.\n   * @param factor The factor by which this page should be scaled.\n   * @returns The width and height of the page after being scaled.\n   */\n  scale(factor: number) {\n    assertIs(factor, 'factor', ['number']);\n    return { width: this.width * factor, height: this.height * factor };\n  }\n\n  /**\n   * Get the width and height of this page. For example:\n   * ```js\n   * const { width, height } = embeddedPage.size()\n   * ```\n   * @returns The width and height of the page.\n   */\n  size() {\n    return this.scale(1);\n  }\n\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable pages get embedded.\n   *\n   * Embed this embeddable page in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  async embed(): Promise<void> {\n    if (!this.alreadyEmbedded) {\n      await this.embedder.embedIntoContext(this.doc.context, this.ref);\n      this.alreadyEmbedded = true;\n    }\n  }\n}\n"],"mappings":";;;;;;AACA,IAAAA,aAAA,GAAAC,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AAEA;;;AAGA,IAAAG,eAAA;EA+BE,SAAAA,gBACEC,GAAW,EACXC,GAAgB,EAChBC,QAAyB;IANnB,KAAAC,eAAe,GAAG,KAAK;IAQ7BL,OAAA,CAAAM,QAAQ,CAACJ,GAAG,EAAE,KAAK,EAAE,CAAC,CAACH,MAAA,CAAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC1CP,OAAA,CAAAM,QAAQ,CAACH,GAAG,EAAE,KAAK,EAAE,CAAC,CAACR,aAAA,CAAAa,OAAW,EAAE,aAAa,CAAC,CAAC,CAAC;IACpDR,OAAA,CAAAM,QAAQ,CAACF,QAAQ,EAAE,UAAU,EAAE,CAAC,CAACL,MAAA,CAAAU,eAAe,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAEtE,IAAI,CAACP,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACO,KAAK,GAAGN,QAAQ,CAACM,KAAK;IAC3B,IAAI,CAACC,MAAM,GAAGP,QAAQ,CAACO,MAAM;IAE7B,IAAI,CAACP,QAAQ,GAAGA,QAAQ;EAC1B;EAEA;;;;;;;;;;;;;;;;EAgBAH,eAAA,CAAAW,SAAA,CAAAC,KAAK,GAAL,UAAMC,MAAc;IAClBd,OAAA,CAAAM,QAAQ,CAACQ,MAAM,EAAE,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;IACtC,OAAO;MAAEJ,KAAK,EAAE,IAAI,CAACA,KAAK,GAAGI,MAAM;MAAEH,MAAM,EAAE,IAAI,CAACA,MAAM,GAAGG;IAAM,CAAE;EACrE,CAAC;EAED;;;;;;;EAOAb,eAAA,CAAAW,SAAA,CAAAG,IAAI,GAAJ;IACE,OAAO,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC;EACtB,CAAC;EAED;;;;;;;;;EASMZ,eAAA,CAAAW,SAAA,CAAAI,KAAK,GAAX;;;;;iBACM,CAAC,IAAI,CAACX,eAAe,EAArB;YACF,qBAAM,IAAI,CAACD,QAAQ,CAACa,gBAAgB,CAAC,IAAI,CAACd,GAAG,CAACe,OAAO,EAAE,IAAI,CAAChB,GAAG,CAAC;;YAAhEiB,EAAA,CAAAC,IAAA,EAAgE;YAChE,IAAI,CAACf,eAAe,GAAG,IAAI;;;;;;;GAE9B;EA7FD;;;;;;;;;;;;EAYOJ,eAAA,CAAAoB,EAAE,GAAG,UAACnB,GAAW,EAAEC,GAAgB,EAAEC,QAAyB;IACnE,WAAIH,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,CAAC;EAAvC,CAAuC;EAiF3C,OAAAH,eAAC;CAAA,CA/FD;kBAAqBA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}