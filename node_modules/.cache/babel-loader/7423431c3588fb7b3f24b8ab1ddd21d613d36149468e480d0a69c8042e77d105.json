{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFObject_1 = tslib_1.__importDefault(require(\"../objects/PDFObject\"));\nvar CharCodes_1 = tslib_1.__importDefault(require(\"../syntax/CharCodes\"));\nvar utils_1 = require(\"../../utils\");\nvar PDFOperator = /** @class */function () {\n  function PDFOperator(name, args) {\n    this.name = name;\n    this.args = args || [];\n  }\n  PDFOperator.prototype.clone = function (context) {\n    var args = new Array(this.args.length);\n    for (var idx = 0, len = args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      args[idx] = arg instanceof PDFObject_1.default ? arg.clone(context) : arg;\n    }\n    return PDFOperator.of(this.name, args);\n  };\n  PDFOperator.prototype.toString = function () {\n    var value = '';\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      value += String(this.args[idx]) + ' ';\n    }\n    value += this.name;\n    return value;\n  };\n  PDFOperator.prototype.sizeInBytes = function () {\n    var size = 0;\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      size += (arg instanceof PDFObject_1.default ? arg.sizeInBytes() : arg.length) + 1;\n    }\n    size += this.name.length;\n    return size;\n  };\n  PDFOperator.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      if (arg instanceof PDFObject_1.default) {\n        offset += arg.copyBytesInto(buffer, offset);\n      } else {\n        offset += utils_1.copyStringIntoBuffer(arg, buffer, offset);\n      }\n      buffer[offset++] = CharCodes_1.default.Space;\n    }\n    offset += utils_1.copyStringIntoBuffer(this.name, buffer, offset);\n    return offset - initialOffset;\n  };\n  PDFOperator.of = function (name, args) {\n    return new PDFOperator(name, args);\n  };\n  return PDFOperator;\n}();\nexports.default = PDFOperator;","map":{"version":3,"names":["PDFObject_1","tslib_1","__importDefault","require","CharCodes_1","utils_1","PDFOperator","name","args","prototype","clone","context","Array","length","idx","len","arg","default","of","toString","value","String","sizeInBytes","size","copyBytesInto","buffer","offset","initialOffset","copyStringIntoBuffer","Space","exports"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/operators/PDFOperator.ts"],"sourcesContent":["import PDFArray from 'src/core/objects/PDFArray';\nimport PDFHexString from 'src/core/objects/PDFHexString';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFNumber from 'src/core/objects/PDFNumber';\nimport PDFObject from 'src/core/objects/PDFObject';\nimport PDFString from 'src/core/objects/PDFString';\nimport PDFOperatorNames from 'src/core/operators/PDFOperatorNames';\nimport PDFContext from 'src/core/PDFContext';\nimport CharCodes from 'src/core/syntax/CharCodes';\nimport { copyStringIntoBuffer } from 'src/utils';\n\nexport type PDFOperatorArg =\n  | string\n  | PDFName\n  | PDFArray\n  | PDFNumber\n  | PDFString\n  | PDFHexString;\n\nclass PDFOperator {\n  static of = (name: PDFOperatorNames, args?: PDFOperatorArg[]) =>\n    new PDFOperator(name, args);\n\n  private readonly name: PDFOperatorNames;\n  private readonly args: PDFOperatorArg[];\n\n  private constructor(name: PDFOperatorNames, args?: PDFOperatorArg[]) {\n    this.name = name;\n    this.args = args || [];\n  }\n\n  clone(context?: PDFContext): PDFOperator {\n    const args = new Array(this.args.length);\n    for (let idx = 0, len = args.length; idx < len; idx++) {\n      const arg = this.args[idx];\n      args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\n    }\n    return PDFOperator.of(this.name, args);\n  }\n\n  toString(): string {\n    let value = '';\n    for (let idx = 0, len = this.args.length; idx < len; idx++) {\n      value += String(this.args[idx]) + ' ';\n    }\n    value += this.name;\n    return value;\n  }\n\n  sizeInBytes(): number {\n    let size = 0;\n    for (let idx = 0, len = this.args.length; idx < len; idx++) {\n      const arg = this.args[idx];\n      size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\n    }\n    size += this.name.length;\n    return size;\n  }\n\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\n    const initialOffset = offset;\n\n    for (let idx = 0, len = this.args.length; idx < len; idx++) {\n      const arg = this.args[idx];\n      if (arg instanceof PDFObject) {\n        offset += arg.copyBytesInto(buffer, offset);\n      } else {\n        offset += copyStringIntoBuffer(arg, buffer, offset);\n      }\n      buffer[offset++] = CharCodes.Space;\n    }\n\n    offset += copyStringIntoBuffer(this.name, buffer, offset);\n\n    return offset - initialOffset;\n  }\n}\n\nexport default PDFOperator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}