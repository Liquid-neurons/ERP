{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFName_1 = tslib_1.__importDefault(require(\"../objects/PDFName\"));\nvar PDFAcroButton_1 = tslib_1.__importDefault(require(\"./PDFAcroButton\"));\nvar errors_1 = require(\"../errors\");\nvar PDFAcroCheckBox = /** @class */function (_super) {\n  tslib_1.__extends(PDFAcroCheckBox, _super);\n  function PDFAcroCheckBox() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroCheckBox.prototype.setValue = function (value) {\n    var _a;\n    var onValue = (_a = this.getOnValue()) !== null && _a !== void 0 ? _a : PDFName_1.default.of('Yes');\n    if (value !== onValue && value !== PDFName_1.default.of('Off')) {\n      throw new errors_1.InvalidAcroFieldValueError();\n    }\n    this.dict.set(PDFName_1.default.of('V'), value);\n    var widgets = this.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getOnValue() === value ? value : PDFName_1.default.of('Off');\n      widget.setAppearanceState(state);\n    }\n  };\n  PDFAcroCheckBox.prototype.getValue = function () {\n    var v = this.V();\n    if (v instanceof PDFName_1.default) return v;\n    return PDFName_1.default.of('Off');\n  };\n  PDFAcroCheckBox.prototype.getOnValue = function () {\n    var widget = this.getWidgets()[0];\n    return widget === null || widget === void 0 ? void 0 : widget.getOnValue();\n  };\n  PDFAcroCheckBox.fromDict = function (dict, ref) {\n    return new PDFAcroCheckBox(dict, ref);\n  };\n  PDFAcroCheckBox.create = function (context) {\n    var dict = context.obj({\n      FT: 'Btn',\n      Kids: []\n    });\n    var ref = context.register(dict);\n    return new PDFAcroCheckBox(dict, ref);\n  };\n  return PDFAcroCheckBox;\n}(PDFAcroButton_1.default);\nexports.default = PDFAcroCheckBox;","map":{"version":3,"names":["PDFName_1","tslib_1","__importDefault","require","PDFAcroButton_1","errors_1","PDFAcroCheckBox","_super","__extends","prototype","setValue","value","onValue","_a","getOnValue","default","of","InvalidAcroFieldValueError","dict","set","widgets","getWidgets","idx","len","length","widget","state","setAppearanceState","getValue","v","V","fromDict","ref","create","context","obj","FT","Kids","register","exports"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/acroform/PDFAcroCheckBox.ts"],"sourcesContent":["import PDFContext from 'src/core/PDFContext';\nimport PDFRef from 'src/core/objects/PDFRef';\nimport PDFDict from 'src/core/objects/PDFDict';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFAcroButton from 'src/core/acroform/PDFAcroButton';\nimport { InvalidAcroFieldValueError } from 'src/core/errors';\n\nclass PDFAcroCheckBox extends PDFAcroButton {\n  static fromDict = (dict: PDFDict, ref: PDFRef) =>\n    new PDFAcroCheckBox(dict, ref);\n\n  static create = (context: PDFContext) => {\n    const dict = context.obj({\n      FT: 'Btn',\n      Kids: [],\n    });\n    const ref = context.register(dict);\n    return new PDFAcroCheckBox(dict, ref);\n  };\n\n  setValue(value: PDFName) {\n    const onValue = this.getOnValue() ?? PDFName.of('Yes');\n    if (value !== onValue && value !== PDFName.of('Off')) {\n      throw new InvalidAcroFieldValueError();\n    }\n\n    this.dict.set(PDFName.of('V'), value);\n\n    const widgets = this.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const state = widget.getOnValue() === value ? value : PDFName.of('Off');\n      widget.setAppearanceState(state);\n    }\n  }\n\n  getValue(): PDFName {\n    const v = this.V();\n    if (v instanceof PDFName) return v;\n    return PDFName.of('Off');\n  }\n\n  getOnValue(): PDFName | undefined {\n    const [widget] = this.getWidgets();\n    return widget?.getOnValue();\n  }\n}\n\nexport default PDFAcroCheckBox;\n"],"mappings":";;;;;;AAGA,IAAAA,SAAA,GAAAC,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAC,eAAA,GAAAH,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AAEA,IAAAG,eAAA,0BAAAC,MAAA;EAA8BN,OAAA,CAAAO,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAA9B,SAAAD,gBAAA;;EAuCA;EA1BEA,eAAA,CAAAG,SAAA,CAAAC,QAAQ,GAAR,UAASC,KAAc;;IACrB,IAAMC,OAAO,IAAAC,EAAA,GAAG,IAAI,CAACC,UAAU,EAAE,cAAAD,EAAA,cAAAA,EAAA,GAAIb,SAAA,CAAAe,OAAO,CAACC,EAAE,CAAC,KAAK,CAAC;IACtD,IAAIL,KAAK,KAAKC,OAAO,IAAID,KAAK,KAAKX,SAAA,CAAAe,OAAO,CAACC,EAAE,CAAC,KAAK,CAAC,EAAE;MACpD,MAAM,IAAIX,QAAA,CAAAY,0BAA0B,EAAE;;IAGxC,IAAI,CAACC,IAAI,CAACC,GAAG,CAACnB,SAAA,CAAAe,OAAO,CAACC,EAAE,CAAC,GAAG,CAAC,EAAEL,KAAK,CAAC;IAErC,IAAMS,OAAO,GAAG,IAAI,CAACC,UAAU,EAAE;IACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGH,OAAO,CAACI,MAAM,EAAEF,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACxD,IAAMG,MAAM,GAAGL,OAAO,CAACE,GAAG,CAAC;MAC3B,IAAMI,KAAK,GAAGD,MAAM,CAACX,UAAU,EAAE,KAAKH,KAAK,GAAGA,KAAK,GAAGX,SAAA,CAAAe,OAAO,CAACC,EAAE,CAAC,KAAK,CAAC;MACvES,MAAM,CAACE,kBAAkB,CAACD,KAAK,CAAC;;EAEpC,CAAC;EAEDpB,eAAA,CAAAG,SAAA,CAAAmB,QAAQ,GAAR;IACE,IAAMC,CAAC,GAAG,IAAI,CAACC,CAAC,EAAE;IAClB,IAAID,CAAC,YAAY7B,SAAA,CAAAe,OAAO,EAAE,OAAOc,CAAC;IAClC,OAAO7B,SAAA,CAAAe,OAAO,CAACC,EAAE,CAAC,KAAK,CAAC;EAC1B,CAAC;EAEDV,eAAA,CAAAG,SAAA,CAAAK,UAAU,GAAV;IACS,IAAAW,MAAM,GAAI,IAAI,CAACJ,UAAU,EAAE,GAArB;IACb,OAAOI,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEX,UAAU;EAC3B,CAAC;EArCMR,eAAA,CAAAyB,QAAQ,GAAG,UAACb,IAAa,EAAEc,GAAW;IAC3C,WAAI1B,eAAe,CAACY,IAAI,EAAEc,GAAG,CAAC;EAA9B,CAA8B;EAEzB1B,eAAA,CAAA2B,MAAM,GAAG,UAACC,OAAmB;IAClC,IAAMhB,IAAI,GAAGgB,OAAO,CAACC,GAAG,CAAC;MACvBC,EAAE,EAAE,KAAK;MACTC,IAAI,EAAE;KACP,CAAC;IACF,IAAML,GAAG,GAAGE,OAAO,CAACI,QAAQ,CAACpB,IAAI,CAAC;IAClC,OAAO,IAAIZ,eAAe,CAACY,IAAI,EAAEc,GAAG,CAAC;EACvC,CAAC;EA4BH,OAAA1B,eAAC;CAAA,CAvC6BF,eAAA,CAAAW,OAAa;AAyC3CwB,OAAA,CAAAxB,OAAA,GAAeT,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}