{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport PDFButton from \"./PDFButton\";\nimport PDFCheckBox from \"./PDFCheckBox\";\nimport PDFDropdown from \"./PDFDropdown\";\nimport PDFOptionList from \"./PDFOptionList\";\nimport PDFRadioGroup from \"./PDFRadioGroup\";\nimport PDFSignature from \"./PDFSignature\";\nimport PDFTextField from \"./PDFTextField\";\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError } from \"../errors\";\nimport PDFFont from \"../PDFFont\";\nimport { StandardFonts } from \"../StandardFonts\";\nimport { rotateInPlace } from \"../operations\";\nimport { drawObject, popGraphicsState, pushGraphicsState, translate } from \"../operators\";\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName } from \"../../core\";\nimport { assertIs, Cache, assertOrUndefined } from \"../../utils\";\n/**\n * Represents the interactive form of a [[PDFDocument]].\n *\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\n * designed to gather information from a user. A PDF document may contains any\n * number of fields that appear on various pages, all of which make up a single,\n * global interactive form spanning the entire document. This means that\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\n *\n * The fields of an interactive form are represented by [[PDFField]] instances.\n */\nvar PDFForm = /** @class */function () {\n  function PDFForm(acroForm, doc) {\n    var _this = this;\n    this.embedDefaultFont = function () {\n      return _this.doc.embedStandardFont(StandardFonts.Helvetica);\n    };\n    assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroForm = acroForm;\n    this.doc = doc;\n    this.dirtyFields = new Set();\n    this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n  }\n  /**\n   * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\n   * fields do not use XFA as it is not widely supported by PDF readers.\n   *\n   * > `pdf-lib` does not support creation, modification, or reading of XFA\n   * > fields.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * if (form.hasXFA()) console.log('PDF has XFA data')\n   * ```\n   * @returns Whether or not this form has XFA data.\n   */\n  PDFForm.prototype.hasXFA = function () {\n    return this.acroForm.dict.has(PDFName.of('XFA'));\n  };\n  /**\n   * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\n   * force readers to fallback to standard fields if the [[PDFDocument]]\n   * contains any. For example:\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * form.deleteXFA()\n   * ```\n   */\n  PDFForm.prototype.deleteXFA = function () {\n    this.acroForm.dict.delete(PDFName.of('XFA'));\n  };\n  /**\n   * Get all fields contained in this [[PDFForm]]. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const fields = form.getFields()\n   * fields.forEach(field => {\n   *   const type = field.constructor.name\n   *   const name = field.getName()\n   *   console.log(`${type}: ${name}`)\n   * })\n   * ```\n   * @returns An array of all fields in this form.\n   */\n  PDFForm.prototype.getFields = function () {\n    var allFields = this.acroForm.getAllFields();\n    var fields = [];\n    for (var idx = 0, len = allFields.length; idx < len; idx++) {\n      var _a = allFields[idx],\n        acroField = _a[0],\n        ref = _a[1];\n      var field = convertToPDFField(acroField, ref, this.doc);\n      if (field) fields.push(field);\n    }\n    return fields;\n  };\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\n   * if (field) console.log('Field exists!')\n   * ```\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name, if one exists.\n   */\n  PDFForm.prototype.getFieldMaybe = function (name) {\n    assertIs(name, 'name', ['string']);\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.getName() === name) return field;\n    }\n    return undefined;\n  };\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('Page1.Foo.Bar[0]')\n   * ```\n   * If no field exists with the provided name, an error will be thrown.\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name.\n   */\n  PDFForm.prototype.getField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getFieldMaybe(name);\n    if (field) return field;\n    throw new NoSuchFieldError(name);\n  };\n  /**\n   * Get the button field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const button = form.getButton('Page1.Foo.Button[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a button.\n   * @param name A fully qualified button name.\n   * @returns The button with the specified name.\n   */\n  PDFForm.prototype.getButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFButton) return field;\n    throw new UnexpectedFieldTypeError(name, PDFButton, field);\n  };\n  /**\n   * Get the check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\n   * checkBox.check()\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a check box.\n   * @param name A fully qualified check box name.\n   * @returns The check box with the specified name.\n   */\n  PDFForm.prototype.getCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFCheckBox) return field;\n    throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n  };\n  /**\n   * Get the dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\n   * const options = dropdown.getOptions()\n   * dropdown.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a dropdown.\n   * @param name A fully qualified dropdown name.\n   * @returns The dropdown with the specified name.\n   */\n  PDFForm.prototype.getDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFDropdown) return field;\n    throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n  };\n  /**\n   * Get the option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\n   * const options = optionList.getOptions()\n   * optionList.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not an option list.\n   * @param name A fully qualified option list name.\n   * @returns The option list with the specified name.\n   */\n  PDFForm.prototype.getOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFOptionList) return field;\n    throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n  };\n  /**\n   * Get the radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\n   * const options = radioGroup.getOptions()\n   * radioGroup.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a radio group.\n   * @param name A fully qualified radio group name.\n   * @returns The radio group with the specified name.\n   */\n  PDFForm.prototype.getRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFRadioGroup) return field;\n    throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n  };\n  /**\n   * Get the signature field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const signature = form.getSignature('Page1.Foo.Signature[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a signature.\n   * @param name A fully qualified signature name.\n   * @returns The signature with the specified name.\n   */\n  PDFForm.prototype.getSignature = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFSignature) return field;\n    throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n  };\n  /**\n   * Get the text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const textField = form.getTextField('Page1.Foo.TextField[0]')\n   * textField.setText('Are you designed to act or to be acted upon?')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a text field.\n   * @param name A fully qualified text field name.\n   * @returns The text field with the specified name.\n   */\n  PDFForm.prototype.getTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFTextField) return field;\n    throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n  };\n  /**\n   * Create a new button field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('cool.new.button')\n   *\n   * button.addToPage('Do Stuff', font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new button.\n   * @returns The new button field.\n   */\n  PDFForm.prototype.createButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var button = PDFAcroPushButton.create(this.doc.context);\n    button.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n    return PDFButton.of(button, button.ref, this.doc);\n  };\n  /**\n   * Create a new check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('cool.new.checkBox')\n   *\n   * checkBox.addToPage(page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new check box.\n   * @returns The new check box field.\n   */\n  PDFForm.prototype.createCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var checkBox = PDFAcroCheckBox.create(this.doc.context);\n    checkBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n    return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n  };\n  /**\n   * Create a new dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.createDropdown('cool.new.dropdown')\n   *\n   * dropdown.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new dropdown.\n   * @returns The new dropdown field.\n   */\n  PDFForm.prototype.createDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var comboBox = PDFAcroComboBox.create(this.doc.context);\n    comboBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n    return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n  };\n  /**\n   * Create a new option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const optionList = form.createOptionList('cool.new.optionList')\n   *\n   * optionList.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new option list.\n   * @returns The new option list field.\n   */\n  PDFForm.prototype.createOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var listBox = PDFAcroListBox.create(this.doc.context);\n    listBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n    return PDFOptionList.of(listBox, listBox.ref, this.doc);\n  };\n  /**\n   * Create a new radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\n   *\n   * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\n   * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  PDFForm.prototype.createRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var radioButton = PDFAcroRadioButton.create(this.doc.context);\n    radioButton.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n    return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n  };\n  /**\n   * Create a new text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const textField = form.createTextField('cool.new.textField')\n   *\n   * textField.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  PDFForm.prototype.createTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var text = PDFAcroText.create(this.doc.context);\n    text.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n    return PDFTextField.of(text, text.ref, this.doc);\n  };\n  /**\n   * Flatten all fields in this [[PDFForm]].\n   *\n   * Flattening a form field will take the current appearance for each of that\n   * field's widgets and make them part of their page's content stream. All form\n   * fields and annotations associated are then removed. Note that once a form\n   * has been flattened its fields can no longer be accessed or edited.\n   *\n   * This operation is often used after filling form fields to ensure a\n   * consistent appearance across different PDF readers and/or printers.\n   * Another common use case is to copy a template document with form fields\n   * into another document. In this scenario you would load the template\n   * document, fill its fields, flatten it, and then copy its pages into the\n   * recipient document - the filled fields will be copied over.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * form.flatten();\n   * ```\n   */\n  PDFForm.prototype.flatten = function (options) {\n    if (options === void 0) {\n      options = {\n        updateFieldAppearances: true\n      };\n    }\n    if (options.updateFieldAppearances) {\n      this.updateFieldAppearances();\n    }\n    var fields = this.getFields();\n    for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n      var field = fields[i];\n      var widgets = field.acroField.getWidgets();\n      for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n        var widget = widgets[j];\n        var page = this.findWidgetPage(widget);\n        var widgetRef = this.findWidgetAppearanceRef(field, widget);\n        var xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n        var rectangle = widget.getRectangle();\n        var operators = __spreadArrays([pushGraphicsState(), translate(rectangle.x, rectangle.y)], rotateInPlace(__assign(__assign({}, rectangle), {\n          rotation: 0\n        })), [drawObject(xObjectKey), popGraphicsState()]).filter(Boolean);\n        page.pushOperators.apply(page, operators);\n      }\n      this.removeField(field);\n    }\n  };\n  /**\n   * Remove a field from this [[PDFForm]].\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * const ageField = form.getFields().find(x => x.getName() === 'Age');\n   * form.removeField(ageField);\n   * ```\n   */\n  PDFForm.prototype.removeField = function (field) {\n    var widgets = field.acroField.getWidgets();\n    var pages = new Set();\n    for (var i = 0, len = widgets.length; i < len; i++) {\n      var widget = widgets[i];\n      var widgetRef = this.findWidgetAppearanceRef(field, widget);\n      var page = this.findWidgetPage(widget);\n      pages.add(page);\n      page.node.removeAnnot(widgetRef);\n    }\n    pages.forEach(function (page) {\n      return page.node.removeAnnot(field.ref);\n    });\n    this.acroForm.removeField(field.acroField);\n    var fieldKids = field.acroField.normalizedEntries().Kids;\n    var kidsCount = fieldKids.size();\n    for (var childIndex = 0; childIndex < kidsCount; childIndex++) {\n      var child = fieldKids.get(childIndex);\n      if (child instanceof PDFRef) {\n        this.doc.context.delete(child);\n      }\n    }\n    this.doc.context.delete(field.ref);\n  };\n  /**\n   * Update the appearance streams for all widgets of all fields in this\n   * [[PDFForm]]. Appearance streams will only be created for a widget if it\n   * does not have any existing appearance streams, or the field's value has\n   * changed (e.g. by calling [[PDFTextField.setText]] or\n   * [[PDFDropdown.select]]).\n   *\n   * For example:\n   * ```js\n   * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\n   * const form = pdfDoc.getForm()\n   * form.updateFieldAppearances(courier)\n   * ```\n   *\n   * **IMPORTANT:** The default value for the `font` parameter is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if any fields contain text with\n   * characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing that as the `font`\n   * parameter allows you to generate appearance streams with non WinAnsi\n   * characters (assuming your custom font supports them).\n   *\n   * > **NOTE:** The [[PDFDocument.save]] method will call this method to\n   * > update appearances automatically if a form was accessed via the\n   * > [[PDFDocument.getForm]] method prior to saving.\n   *\n   * @param font Optionally, the font to use when creating new appearances.\n   */\n  PDFForm.prototype.updateFieldAppearances = function (font) {\n    assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n    font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.needsAppearancesUpdate()) {\n        field.defaultUpdateAppearances(font);\n      }\n    }\n  };\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsDirty(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.add(fieldRef);\n  };\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to not be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsClean(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.delete(fieldRef);\n  };\n  /**\n   * Returns `true` is the specified field has been marked as dirty.\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\n   * ```\n   * @param fieldRef The reference to the field that should be checked.\n   * @returns Whether or not the specified field is dirty.\n   */\n  PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    return this.dirtyFields.has(fieldRef);\n  };\n  PDFForm.prototype.getDefaultFont = function () {\n    return this.defaultFontCache.access();\n  };\n  PDFForm.prototype.findWidgetPage = function (widget) {\n    var pageRef = widget.P();\n    var page = this.doc.getPages().find(function (x) {\n      return x.ref === pageRef;\n    });\n    if (page === undefined) {\n      var widgetRef = this.doc.context.getObjectRef(widget.dict);\n      if (widgetRef === undefined) {\n        throw new Error('Could not find PDFRef for PDFObject');\n      }\n      page = this.doc.findPageForAnnotationRef(widgetRef);\n      if (page === undefined) {\n        throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n      }\n    }\n    return page;\n  };\n  PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n    var _a;\n    var refOrDict = widget.getNormalAppearance();\n    if (refOrDict instanceof PDFDict && (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n      var value = field.acroField.getValue();\n      var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n      if (ref instanceof PDFRef) {\n        refOrDict = ref;\n      }\n    }\n    if (!(refOrDict instanceof PDFRef)) {\n      var name_1 = field.getName();\n      throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n    }\n    return refOrDict;\n  };\n  PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n    var nonTerminal = [this.acroForm];\n    for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n      var namePart = partialNames[idx];\n      if (!namePart) throw new InvalidFieldNamePartError(namePart);\n      var parent_1 = nonTerminal[0],\n        parentRef = nonTerminal[1];\n      var res = this.findNonTerminal(namePart, parent_1);\n      if (res) {\n        nonTerminal = res;\n      } else {\n        var node = PDFAcroNonTerminal.create(this.doc.context);\n        node.setPartialName(namePart);\n        node.setParent(parentRef);\n        var nodeRef = this.doc.context.register(node.dict);\n        parent_1.addField(nodeRef);\n        nonTerminal = [node, nodeRef];\n      }\n    }\n    return nonTerminal;\n  };\n  PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n    var fields = parent instanceof PDFAcroForm ? this.acroForm.getFields() : createPDFAcroFields(parent.Kids());\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var _a = fields[idx],\n        field = _a[0],\n        ref = _a[1];\n      if (field.getPartialName() === partialName) {\n        if (field instanceof PDFAcroNonTerminal) return [field, ref];\n        throw new FieldAlreadyExistsError(partialName);\n      }\n    }\n    return undefined;\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.getForm]] method, which will create an\n   * > instance of [[PDFForm]] for you.\n   *\n   * Create an instance of [[PDFForm]] from an existing acroForm and embedder\n   *\n   * @param acroForm The underlying `PDFAcroForm` for this form.\n   * @param doc The document to which the form will belong.\n   */\n  PDFForm.of = function (acroForm, doc) {\n    return new PDFForm(acroForm, doc);\n  };\n  return PDFForm;\n}();\nexport default PDFForm;\nvar convertToPDFField = function (field, ref, doc) {\n  if (field instanceof PDFAcroPushButton) return PDFButton.of(field, ref, doc);\n  if (field instanceof PDFAcroCheckBox) return PDFCheckBox.of(field, ref, doc);\n  if (field instanceof PDFAcroComboBox) return PDFDropdown.of(field, ref, doc);\n  if (field instanceof PDFAcroListBox) return PDFOptionList.of(field, ref, doc);\n  if (field instanceof PDFAcroText) return PDFTextField.of(field, ref, doc);\n  if (field instanceof PDFAcroRadioButton) {\n    return PDFRadioGroup.of(field, ref, doc);\n  }\n  if (field instanceof PDFAcroSignature) {\n    return PDFSignature.of(field, ref, doc);\n  }\n  return undefined;\n};\nvar splitFieldName = function (fullyQualifiedName) {\n  if (fullyQualifiedName.length === 0) {\n    throw new Error('PDF field names must not be empty strings');\n  }\n  var parts = fullyQualifiedName.split('.');\n  for (var idx = 0, len = parts.length; idx < len; idx++) {\n    if (parts[idx] === '') {\n      throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n    }\n  }\n  if (parts.length === 1) return {\n    nonTerminal: [],\n    terminal: parts[0]\n  };\n  return {\n    nonTerminal: parts.slice(0, parts.length - 1),\n    terminal: parts[parts.length - 1]\n  };\n};\nvar addFieldToParent = function (_a, _b, partialName) {\n  var parent = _a[0],\n    parentRef = _a[1];\n  var field = _b[0],\n    fieldRef = _b[1];\n  var entries = parent.normalizedEntries();\n  var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n  for (var idx = 0, len = fields.length; idx < len; idx++) {\n    if (fields[idx][0].getPartialName() === partialName) {\n      throw new FieldAlreadyExistsError(partialName);\n    }\n  }\n  parent.addField(fieldRef);\n  field.setParent(parentRef);\n};","map":{"version":3,"names":["PDFDocument","PDFButton","PDFCheckBox","PDFDropdown","PDFOptionList","PDFRadioGroup","PDFSignature","PDFTextField","NoSuchFieldError","UnexpectedFieldTypeError","FieldAlreadyExistsError","InvalidFieldNamePartError","PDFFont","StandardFonts","rotateInPlace","drawObject","popGraphicsState","pushGraphicsState","translate","PDFAcroForm","PDFAcroCheckBox","PDFAcroComboBox","PDFAcroListBox","PDFAcroRadioButton","PDFAcroSignature","PDFAcroText","PDFAcroPushButton","PDFAcroNonTerminal","PDFDict","PDFRef","createPDFAcroFields","PDFName","assertIs","Cache","assertOrUndefined","PDFForm","acroForm","doc","_this","embedDefaultFont","embedStandardFont","Helvetica","dirtyFields","Set","defaultFontCache","populatedBy","prototype","hasXFA","dict","has","of","deleteXFA","delete","getFields","allFields","getAllFields","fields","idx","len","length","_a","acroField","ref","field","convertToPDFField","push","getFieldMaybe","name","getName","undefined","getField","getButton","getCheckBox","getDropdown","getOptionList","getRadioGroup","getSignature","getTextField","createButton","nameParts","splitFieldName","parent","findOrCreateNonTerminals","nonTerminal","button","create","context","setPartialName","terminal","addFieldToParent","createCheckBox","checkBox","createDropdown","comboBox","createOptionList","listBox","createRadioGroup","radioButton","createTextField","text","flatten","options","updateFieldAppearances","i","lenFields","widgets","getWidgets","j","lenWidgets","widget","page","findWidgetPage","widgetRef","findWidgetAppearanceRef","xObjectKey","node","newXObject","rectangle","getRectangle","operators","__spreadArrays","x","y","__assign","rotation","filter","Boolean","pushOperators","apply","removeField","pages","add","removeAnnot","forEach","fieldKids","normalizedEntries","Kids","kidsCount","size","childIndex","child","get","font","getDefaultFont","needsAppearancesUpdate","defaultUpdateAppearances","markFieldAsDirty","fieldRef","markFieldAsClean","fieldIsDirty","access","pageRef","P","getPages","find","getObjectRef","Error","findPageForAnnotationRef","refOrDict","getNormalAppearance","value","getValue","name_1","partialNames","namePart","parent_1","parentRef","res","findNonTerminal","setParent","nodeRef","register","addField","partialName","getPartialName","fullyQualifiedName","parts","split","slice","_b","entries","Fields"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/form/PDFForm.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\nimport PDFPage from 'src/api/PDFPage';\nimport PDFField from 'src/api/form/PDFField';\nimport PDFButton from 'src/api/form/PDFButton';\nimport PDFCheckBox from 'src/api/form/PDFCheckBox';\nimport PDFDropdown from 'src/api/form/PDFDropdown';\nimport PDFOptionList from 'src/api/form/PDFOptionList';\nimport PDFRadioGroup from 'src/api/form/PDFRadioGroup';\nimport PDFSignature from 'src/api/form/PDFSignature';\nimport PDFTextField from 'src/api/form/PDFTextField';\nimport {\n  NoSuchFieldError,\n  UnexpectedFieldTypeError,\n  FieldAlreadyExistsError,\n  InvalidFieldNamePartError,\n} from 'src/api/errors';\nimport PDFFont from 'src/api/PDFFont';\nimport { StandardFonts } from 'src/api/StandardFonts';\nimport { rotateInPlace } from 'src/api/operations';\nimport {\n  drawObject,\n  popGraphicsState,\n  pushGraphicsState,\n  translate,\n} from 'src/api/operators';\nimport {\n  PDFAcroForm,\n  PDFAcroField,\n  PDFAcroCheckBox,\n  PDFAcroComboBox,\n  PDFAcroListBox,\n  PDFAcroRadioButton,\n  PDFAcroSignature,\n  PDFAcroText,\n  PDFAcroPushButton,\n  PDFAcroNonTerminal,\n  PDFDict,\n  PDFOperator,\n  PDFRef,\n  createPDFAcroFields,\n  PDFName,\n  PDFWidgetAnnotation,\n} from 'src/core';\nimport { assertIs, Cache, assertOrUndefined } from 'src/utils';\n\nexport interface FlattenOptions {\n  updateFieldAppearances: boolean;\n}\n\n/**\n * Represents the interactive form of a [[PDFDocument]].\n *\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\n * designed to gather information from a user. A PDF document may contains any\n * number of fields that appear on various pages, all of which make up a single,\n * global interactive form spanning the entire document. This means that\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\n *\n * The fields of an interactive form are represented by [[PDFField]] instances.\n */\nexport default class PDFForm {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.getForm]] method, which will create an\n   * > instance of [[PDFForm]] for you.\n   *\n   * Create an instance of [[PDFForm]] from an existing acroForm and embedder\n   *\n   * @param acroForm The underlying `PDFAcroForm` for this form.\n   * @param doc The document to which the form will belong.\n   */\n  static of = (acroForm: PDFAcroForm, doc: PDFDocument) =>\n    new PDFForm(acroForm, doc);\n\n  /** The low-level PDFAcroForm wrapped by this form. */\n  readonly acroForm: PDFAcroForm;\n\n  /** The document to which this form belongs. */\n  readonly doc: PDFDocument;\n\n  private readonly dirtyFields: Set<PDFRef>;\n  private readonly defaultFontCache: Cache<PDFFont>;\n\n  private constructor(acroForm: PDFAcroForm, doc: PDFDocument) {\n    assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n\n    this.acroForm = acroForm;\n    this.doc = doc;\n\n    this.dirtyFields = new Set();\n    this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n  }\n\n  /**\n   * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\n   * fields do not use XFA as it is not widely supported by PDF readers.\n   *\n   * > `pdf-lib` does not support creation, modification, or reading of XFA\n   * > fields.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * if (form.hasXFA()) console.log('PDF has XFA data')\n   * ```\n   * @returns Whether or not this form has XFA data.\n   */\n  hasXFA(): boolean {\n    return this.acroForm.dict.has(PDFName.of('XFA'));\n  }\n\n  /**\n   * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\n   * force readers to fallback to standard fields if the [[PDFDocument]]\n   * contains any. For example:\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * form.deleteXFA()\n   * ```\n   */\n  deleteXFA(): void {\n    this.acroForm.dict.delete(PDFName.of('XFA'));\n  }\n\n  /**\n   * Get all fields contained in this [[PDFForm]]. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const fields = form.getFields()\n   * fields.forEach(field => {\n   *   const type = field.constructor.name\n   *   const name = field.getName()\n   *   console.log(`${type}: ${name}`)\n   * })\n   * ```\n   * @returns An array of all fields in this form.\n   */\n  getFields(): PDFField[] {\n    const allFields = this.acroForm.getAllFields();\n\n    const fields: PDFField[] = [];\n    for (let idx = 0, len = allFields.length; idx < len; idx++) {\n      const [acroField, ref] = allFields[idx];\n      const field = convertToPDFField(acroField, ref, this.doc);\n      if (field) fields.push(field);\n    }\n\n    return fields;\n  }\n\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\n   * if (field) console.log('Field exists!')\n   * ```\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name, if one exists.\n   */\n  getFieldMaybe(name: string): PDFField | undefined {\n    assertIs(name, 'name', ['string']);\n    const fields = this.getFields();\n    for (let idx = 0, len = fields.length; idx < len; idx++) {\n      const field = fields[idx];\n      if (field.getName() === name) return field;\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('Page1.Foo.Bar[0]')\n   * ```\n   * If no field exists with the provided name, an error will be thrown.\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name.\n   */\n  getField(name: string): PDFField {\n    assertIs(name, 'name', ['string']);\n    const field = this.getFieldMaybe(name);\n    if (field) return field;\n    throw new NoSuchFieldError(name);\n  }\n\n  /**\n   * Get the button field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const button = form.getButton('Page1.Foo.Button[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a button.\n   * @param name A fully qualified button name.\n   * @returns The button with the specified name.\n   */\n  getButton(name: string): PDFButton {\n    assertIs(name, 'name', ['string']);\n    const field = this.getField(name);\n    if (field instanceof PDFButton) return field;\n    throw new UnexpectedFieldTypeError(name, PDFButton, field);\n  }\n\n  /**\n   * Get the check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\n   * checkBox.check()\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a check box.\n   * @param name A fully qualified check box name.\n   * @returns The check box with the specified name.\n   */\n  getCheckBox(name: string): PDFCheckBox {\n    assertIs(name, 'name', ['string']);\n    const field = this.getField(name);\n    if (field instanceof PDFCheckBox) return field;\n    throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n  }\n\n  /**\n   * Get the dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\n   * const options = dropdown.getOptions()\n   * dropdown.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a dropdown.\n   * @param name A fully qualified dropdown name.\n   * @returns The dropdown with the specified name.\n   */\n  getDropdown(name: string): PDFDropdown {\n    assertIs(name, 'name', ['string']);\n    const field = this.getField(name);\n    if (field instanceof PDFDropdown) return field;\n    throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n  }\n\n  /**\n   * Get the option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\n   * const options = optionList.getOptions()\n   * optionList.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not an option list.\n   * @param name A fully qualified option list name.\n   * @returns The option list with the specified name.\n   */\n  getOptionList(name: string): PDFOptionList {\n    assertIs(name, 'name', ['string']);\n    const field = this.getField(name);\n    if (field instanceof PDFOptionList) return field;\n    throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n  }\n\n  /**\n   * Get the radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\n   * const options = radioGroup.getOptions()\n   * radioGroup.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a radio group.\n   * @param name A fully qualified radio group name.\n   * @returns The radio group with the specified name.\n   */\n  getRadioGroup(name: string): PDFRadioGroup {\n    assertIs(name, 'name', ['string']);\n    const field = this.getField(name);\n    if (field instanceof PDFRadioGroup) return field;\n    throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n  }\n\n  /**\n   * Get the signature field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const signature = form.getSignature('Page1.Foo.Signature[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a signature.\n   * @param name A fully qualified signature name.\n   * @returns The signature with the specified name.\n   */\n  getSignature(name: string): PDFSignature {\n    assertIs(name, 'name', ['string']);\n    const field = this.getField(name);\n    if (field instanceof PDFSignature) return field;\n    throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n  }\n\n  /**\n   * Get the text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const textField = form.getTextField('Page1.Foo.TextField[0]')\n   * textField.setText('Are you designed to act or to be acted upon?')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a text field.\n   * @param name A fully qualified text field name.\n   * @returns The text field with the specified name.\n   */\n  getTextField(name: string): PDFTextField {\n    assertIs(name, 'name', ['string']);\n    const field = this.getField(name);\n    if (field instanceof PDFTextField) return field;\n    throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n  }\n\n  /**\n   * Create a new button field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('cool.new.button')\n   *\n   * button.addToPage('Do Stuff', font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new button.\n   * @returns The new button field.\n   */\n  createButton(name: string): PDFButton {\n    assertIs(name, 'name', ['string']);\n\n    const nameParts = splitFieldName(name);\n    const parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n\n    const button = PDFAcroPushButton.create(this.doc.context);\n    button.setPartialName(nameParts.terminal);\n\n    addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n\n    return PDFButton.of(button, button.ref, this.doc);\n  }\n\n  /**\n   * Create a new check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('cool.new.checkBox')\n   *\n   * checkBox.addToPage(page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new check box.\n   * @returns The new check box field.\n   */\n  createCheckBox(name: string): PDFCheckBox {\n    assertIs(name, 'name', ['string']);\n\n    const nameParts = splitFieldName(name);\n    const parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n\n    const checkBox = PDFAcroCheckBox.create(this.doc.context);\n    checkBox.setPartialName(nameParts.terminal);\n\n    addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n\n    return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n  }\n\n  /**\n   * Create a new dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.createDropdown('cool.new.dropdown')\n   *\n   * dropdown.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new dropdown.\n   * @returns The new dropdown field.\n   */\n  createDropdown(name: string): PDFDropdown {\n    assertIs(name, 'name', ['string']);\n\n    const nameParts = splitFieldName(name);\n    const parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n\n    const comboBox = PDFAcroComboBox.create(this.doc.context);\n    comboBox.setPartialName(nameParts.terminal);\n\n    addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n\n    return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n  }\n\n  /**\n   * Create a new option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const optionList = form.createOptionList('cool.new.optionList')\n   *\n   * optionList.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new option list.\n   * @returns The new option list field.\n   */\n  createOptionList(name: string): PDFOptionList {\n    assertIs(name, 'name', ['string']);\n\n    const nameParts = splitFieldName(name);\n    const parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n\n    const listBox = PDFAcroListBox.create(this.doc.context);\n    listBox.setPartialName(nameParts.terminal);\n\n    addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n\n    return PDFOptionList.of(listBox, listBox.ref, this.doc);\n  }\n\n  /**\n   * Create a new radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\n   *\n   * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\n   * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  createRadioGroup(name: string): PDFRadioGroup {\n    assertIs(name, 'name', ['string']);\n    const nameParts = splitFieldName(name);\n\n    const parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n\n    const radioButton = PDFAcroRadioButton.create(this.doc.context);\n    radioButton.setPartialName(nameParts.terminal);\n\n    addFieldToParent(\n      parent,\n      [radioButton, radioButton.ref],\n      nameParts.terminal,\n    );\n\n    return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n  }\n\n  /**\n   * Create a new text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const textField = form.createTextField('cool.new.textField')\n   *\n   * textField.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  createTextField(name: string): PDFTextField {\n    assertIs(name, 'name', ['string']);\n    const nameParts = splitFieldName(name);\n\n    const parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n\n    const text = PDFAcroText.create(this.doc.context);\n    text.setPartialName(nameParts.terminal);\n\n    addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n\n    return PDFTextField.of(text, text.ref, this.doc);\n  }\n\n  /**\n   * Flatten all fields in this [[PDFForm]].\n   *\n   * Flattening a form field will take the current appearance for each of that\n   * field's widgets and make them part of their page's content stream. All form\n   * fields and annotations associated are then removed. Note that once a form\n   * has been flattened its fields can no longer be accessed or edited.\n   *\n   * This operation is often used after filling form fields to ensure a\n   * consistent appearance across different PDF readers and/or printers.\n   * Another common use case is to copy a template document with form fields\n   * into another document. In this scenario you would load the template\n   * document, fill its fields, flatten it, and then copy its pages into the\n   * recipient document - the filled fields will be copied over.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * form.flatten();\n   * ```\n   */\n  flatten(options: FlattenOptions = { updateFieldAppearances: true }) {\n    if (options.updateFieldAppearances) {\n      this.updateFieldAppearances();\n    }\n\n    const fields = this.getFields();\n\n    for (let i = 0, lenFields = fields.length; i < lenFields; i++) {\n      const field = fields[i];\n      const widgets = field.acroField.getWidgets();\n\n      for (let j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n        const widget = widgets[j];\n        const page = this.findWidgetPage(widget);\n        const widgetRef = this.findWidgetAppearanceRef(field, widget);\n\n        const xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n\n        const rectangle = widget.getRectangle();\n        const operators = [\n          pushGraphicsState(),\n          translate(rectangle.x, rectangle.y),\n          ...rotateInPlace({ ...rectangle, rotation: 0 }),\n          drawObject(xObjectKey),\n          popGraphicsState(),\n        ].filter(Boolean) as PDFOperator[];\n\n        page.pushOperators(...operators);\n      }\n\n      this.removeField(field);\n    }\n  }\n\n  /**\n   * Remove a field from this [[PDFForm]].\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * const ageField = form.getFields().find(x => x.getName() === 'Age');\n   * form.removeField(ageField);\n   * ```\n   */\n  removeField(field: PDFField) {\n    const widgets = field.acroField.getWidgets();\n    const pages: Set<PDFPage> = new Set();\n\n    for (let i = 0, len = widgets.length; i < len; i++) {\n      const widget = widgets[i];\n      const widgetRef = this.findWidgetAppearanceRef(field, widget);\n\n      const page = this.findWidgetPage(widget);\n      pages.add(page);\n\n      page.node.removeAnnot(widgetRef);\n    }\n\n    pages.forEach((page) => page.node.removeAnnot(field.ref));\n    this.acroForm.removeField(field.acroField);\n    const fieldKids = field.acroField.normalizedEntries().Kids;\n    const kidsCount = fieldKids.size();\n    for (let childIndex = 0; childIndex < kidsCount; childIndex++) {\n      const child = fieldKids.get(childIndex);\n      if (child instanceof PDFRef) {\n        this.doc.context.delete(child);\n      }\n    }\n    this.doc.context.delete(field.ref);\n  }\n\n  /**\n   * Update the appearance streams for all widgets of all fields in this\n   * [[PDFForm]]. Appearance streams will only be created for a widget if it\n   * does not have any existing appearance streams, or the field's value has\n   * changed (e.g. by calling [[PDFTextField.setText]] or\n   * [[PDFDropdown.select]]).\n   *\n   * For example:\n   * ```js\n   * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\n   * const form = pdfDoc.getForm()\n   * form.updateFieldAppearances(courier)\n   * ```\n   *\n   * **IMPORTANT:** The default value for the `font` parameter is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if any fields contain text with\n   * characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing that as the `font`\n   * parameter allows you to generate appearance streams with non WinAnsi\n   * characters (assuming your custom font supports them).\n   *\n   * > **NOTE:** The [[PDFDocument.save]] method will call this method to\n   * > update appearances automatically if a form was accessed via the\n   * > [[PDFDocument.getForm]] method prior to saving.\n   *\n   * @param font Optionally, the font to use when creating new appearances.\n   */\n  updateFieldAppearances(font?: PDFFont) {\n    assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n\n    font = font ?? this.getDefaultFont();\n\n    const fields = this.getFields();\n\n    for (let idx = 0, len = fields.length; idx < len; idx++) {\n      const field = fields[idx];\n      if (field.needsAppearancesUpdate()) {\n        field.defaultUpdateAppearances(font);\n      }\n    }\n  }\n\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsDirty(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  markFieldAsDirty(fieldRef: PDFRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.add(fieldRef);\n  }\n\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to not be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsClean(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  markFieldAsClean(fieldRef: PDFRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.delete(fieldRef);\n  }\n\n  /**\n   * Returns `true` is the specified field has been marked as dirty.\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\n   * ```\n   * @param fieldRef The reference to the field that should be checked.\n   * @returns Whether or not the specified field is dirty.\n   */\n  fieldIsDirty(fieldRef: PDFRef): boolean {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    return this.dirtyFields.has(fieldRef);\n  }\n\n  getDefaultFont() {\n    return this.defaultFontCache.access();\n  }\n\n  private findWidgetPage(widget: PDFWidgetAnnotation): PDFPage {\n    const pageRef = widget.P();\n    let page = this.doc.getPages().find((x) => x.ref === pageRef);\n    if (page === undefined) {\n      const widgetRef = this.doc.context.getObjectRef(widget.dict);\n      if (widgetRef === undefined) {\n        throw new Error('Could not find PDFRef for PDFObject');\n      }\n\n      page = this.doc.findPageForAnnotationRef(widgetRef);\n\n      if (page === undefined) {\n        throw new Error(`Could not find page for PDFRef ${widgetRef}`);\n      }\n    }\n\n    return page;\n  }\n\n  private findWidgetAppearanceRef(\n    field: PDFField,\n    widget: PDFWidgetAnnotation,\n  ): PDFRef {\n    let refOrDict = widget.getNormalAppearance();\n\n    if (\n      refOrDict instanceof PDFDict &&\n      (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)\n    ) {\n      const value = field.acroField.getValue();\n      const ref = refOrDict.get(value) ?? refOrDict.get(PDFName.of('Off'));\n\n      if (ref instanceof PDFRef) {\n        refOrDict = ref;\n      }\n    }\n\n    if (!(refOrDict instanceof PDFRef)) {\n      const name = field.getName();\n      throw new Error(`Failed to extract appearance ref for: ${name}`);\n    }\n\n    return refOrDict;\n  }\n\n  private findOrCreateNonTerminals(partialNames: string[]) {\n    let nonTerminal: [PDFAcroForm] | [PDFAcroNonTerminal, PDFRef] = [\n      this.acroForm,\n    ];\n    for (let idx = 0, len = partialNames.length; idx < len; idx++) {\n      const namePart = partialNames[idx];\n      if (!namePart) throw new InvalidFieldNamePartError(namePart);\n      const [parent, parentRef] = nonTerminal;\n      const res = this.findNonTerminal(namePart, parent);\n\n      if (res) {\n        nonTerminal = res;\n      } else {\n        const node = PDFAcroNonTerminal.create(this.doc.context);\n        node.setPartialName(namePart);\n        node.setParent(parentRef);\n        const nodeRef = this.doc.context.register(node.dict);\n        parent.addField(nodeRef);\n        nonTerminal = [node, nodeRef];\n      }\n    }\n    return nonTerminal;\n  }\n\n  private findNonTerminal(\n    partialName: string,\n    parent: PDFAcroForm | PDFAcroNonTerminal,\n  ): [PDFAcroNonTerminal, PDFRef] | undefined {\n    const fields =\n      parent instanceof PDFAcroForm\n        ? this.acroForm.getFields()\n        : createPDFAcroFields(parent.Kids());\n\n    for (let idx = 0, len = fields.length; idx < len; idx++) {\n      const [field, ref] = fields[idx];\n      if (field.getPartialName() === partialName) {\n        if (field instanceof PDFAcroNonTerminal) return [field, ref];\n        throw new FieldAlreadyExistsError(partialName);\n      }\n    }\n\n    return undefined;\n  }\n\n  private embedDefaultFont = (): PDFFont =>\n    this.doc.embedStandardFont(StandardFonts.Helvetica);\n}\n\nconst convertToPDFField = (\n  field: PDFAcroField,\n  ref: PDFRef,\n  doc: PDFDocument,\n): PDFField | undefined => {\n  if (field instanceof PDFAcroPushButton) return PDFButton.of(field, ref, doc);\n  if (field instanceof PDFAcroCheckBox) return PDFCheckBox.of(field, ref, doc);\n  if (field instanceof PDFAcroComboBox) return PDFDropdown.of(field, ref, doc);\n  if (field instanceof PDFAcroListBox) return PDFOptionList.of(field, ref, doc);\n  if (field instanceof PDFAcroText) return PDFTextField.of(field, ref, doc);\n  if (field instanceof PDFAcroRadioButton) {\n    return PDFRadioGroup.of(field, ref, doc);\n  }\n  if (field instanceof PDFAcroSignature) {\n    return PDFSignature.of(field, ref, doc);\n  }\n  return undefined;\n};\n\nconst splitFieldName = (fullyQualifiedName: string) => {\n  if (fullyQualifiedName.length === 0) {\n    throw new Error('PDF field names must not be empty strings');\n  }\n\n  const parts = fullyQualifiedName.split('.');\n\n  for (let idx = 0, len = parts.length; idx < len; idx++) {\n    if (parts[idx] === '') {\n      throw new Error(\n        `Periods in PDF field names must be separated by at least one character: \"${fullyQualifiedName}\"`,\n      );\n    }\n  }\n\n  if (parts.length === 1) return { nonTerminal: [], terminal: parts[0] };\n\n  return {\n    nonTerminal: parts.slice(0, parts.length - 1),\n    terminal: parts[parts.length - 1],\n  };\n};\n\nconst addFieldToParent = (\n  [parent, parentRef]: [PDFAcroForm] | [PDFAcroNonTerminal, PDFRef],\n  [field, fieldRef]: [PDFAcroField, PDFRef],\n  partialName: string,\n) => {\n  const entries = parent.normalizedEntries();\n  const fields = createPDFAcroFields(\n    'Kids' in entries ? entries.Kids : entries.Fields,\n  );\n  for (let idx = 0, len = fields.length; idx < len; idx++) {\n    if (fields[idx][0].getPartialName() === partialName) {\n      throw new FieldAlreadyExistsError(partialName);\n    }\n  }\n  parent.addField(fieldRef);\n  field.setParent(parentRef);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}