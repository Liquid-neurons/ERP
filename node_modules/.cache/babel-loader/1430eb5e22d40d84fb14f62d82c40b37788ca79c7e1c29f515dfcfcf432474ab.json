{"ast":null,"code":"import { Encodings, Font, FontNames } from '@pdf-lib/standard-fonts';\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { toCodePoint, toHexString } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/foliojs/pdfkit/blob/f91bdd61c164a72ea06be1a43dc0a412afc3925f/lib/font/afm.coffee\n */\nvar StandardFontEmbedder = /** @class */function () {\n  function StandardFontEmbedder(fontName, customName) {\n    // prettier-ignore\n    this.encoding = fontName === FontNames.ZapfDingbats ? Encodings.ZapfDingbats : fontName === FontNames.Symbol ? Encodings.Symbol : Encodings.WinAnsi;\n    this.font = Font.load(fontName);\n    this.fontName = this.font.FontName;\n    this.customName = customName;\n  }\n  /**\n   * Encode the JavaScript string into this font. (JavaScript encodes strings in\n   * Unicode, but standard fonts use either WinAnsi, ZapfDingbats, or Symbol\n   * encodings)\n   */\n  StandardFontEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.encodeTextAsGlyphs(text);\n    var hexCodes = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      hexCodes[idx] = toHexString(glyphs[idx].code);\n    }\n    return PDFHexString.of(hexCodes.join(''));\n  };\n  StandardFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n    var glyphs = this.encodeTextAsGlyphs(text);\n    var totalWidth = 0;\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var left = glyphs[idx].name;\n      var right = (glyphs[idx + 1] || {}).name;\n      var kernAmount = this.font.getXAxisKerningForPair(left, right) || 0;\n      totalWidth += this.widthOfGlyph(left) + kernAmount;\n    }\n    var scale = size / 1000;\n    return totalWidth * scale;\n  };\n  StandardFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = options.descender,\n      descender = _a === void 0 ? true : _a;\n    var _b = this.font,\n      Ascender = _b.Ascender,\n      Descender = _b.Descender,\n      FontBBox = _b.FontBBox;\n    var yTop = Ascender || FontBBox[3];\n    var yBottom = Descender || FontBBox[1];\n    var height = yTop - yBottom;\n    if (!descender) height += Descender || 0;\n    return height / 1000 * size;\n  };\n  StandardFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n    var _a = this.font,\n      Ascender = _a.Ascender,\n      Descender = _a.Descender,\n      FontBBox = _a.FontBBox;\n    var yTop = Ascender || FontBBox[3];\n    var yBottom = Descender || FontBBox[1];\n    return 1000 * height / (yTop - yBottom);\n  };\n  StandardFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n    var fontDict = context.obj({\n      Type: 'Font',\n      Subtype: 'Type1',\n      BaseFont: this.customName || this.fontName,\n      Encoding: this.encoding === Encodings.WinAnsi ? 'WinAnsiEncoding' : undefined\n    });\n    if (ref) {\n      context.assign(ref, fontDict);\n      return ref;\n    } else {\n      return context.register(fontDict);\n    }\n  };\n  StandardFontEmbedder.prototype.widthOfGlyph = function (glyphName) {\n    // Default to 250 if font doesn't specify a width\n    return this.font.getWidthOfGlyph(glyphName) || 250;\n  };\n  StandardFontEmbedder.prototype.encodeTextAsGlyphs = function (text) {\n    var codePoints = Array.from(text);\n    var glyphs = new Array(codePoints.length);\n    for (var idx = 0, len = codePoints.length; idx < len; idx++) {\n      var codePoint = toCodePoint(codePoints[idx]);\n      glyphs[idx] = this.encoding.encodeUnicodeCodePoint(codePoint);\n    }\n    return glyphs;\n  };\n  StandardFontEmbedder.for = function (fontName, customName) {\n    return new StandardFontEmbedder(fontName, customName);\n  };\n  return StandardFontEmbedder;\n}();\nexport default StandardFontEmbedder;","map":{"version":3,"names":["Encodings","Font","FontNames","PDFHexString","toCodePoint","toHexString","StandardFontEmbedder","fontName","customName","encoding","ZapfDingbats","Symbol","WinAnsi","font","load","FontName","prototype","encodeText","text","glyphs","encodeTextAsGlyphs","hexCodes","Array","length","idx","len","code","of","join","widthOfTextAtSize","size","totalWidth","left","name","right","kernAmount","getXAxisKerningForPair","widthOfGlyph","scale","heightOfFontAtSize","options","_a","descender","_b","Ascender","Descender","FontBBox","yTop","yBottom","height","sizeOfFontAtHeight","embedIntoContext","context","ref","fontDict","obj","Type","Subtype","BaseFont","Encoding","undefined","assign","register","glyphName","getWidthOfGlyph","codePoints","from","codePoint","encodeUnicodeCodePoint","for"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/embedders/StandardFontEmbedder.ts"],"sourcesContent":["import {\n  Encodings,\n  Font,\n  FontNames,\n  EncodingType,\n} from '@pdf-lib/standard-fonts';\n\nimport PDFHexString from 'src/core/objects/PDFHexString';\nimport PDFRef from 'src/core/objects/PDFRef';\nimport PDFContext from 'src/core/PDFContext';\nimport { toCodePoint, toHexString } from 'src/utils';\n\nexport interface Glyph {\n  code: number;\n  name: string;\n}\n\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/foliojs/pdfkit/blob/f91bdd61c164a72ea06be1a43dc0a412afc3925f/lib/font/afm.coffee\n */\nclass StandardFontEmbedder {\n  static for = (fontName: FontNames, customName?: string) =>\n    new StandardFontEmbedder(fontName, customName);\n\n  readonly font: Font;\n  readonly encoding: EncodingType;\n  readonly fontName: string;\n  readonly customName: string | undefined;\n\n  private constructor(fontName: FontNames, customName?: string) {\n    // prettier-ignore\n    this.encoding = (\n        fontName === FontNames.ZapfDingbats ? Encodings.ZapfDingbats\n      : fontName === FontNames.Symbol       ? Encodings.Symbol\n      : Encodings.WinAnsi\n    );\n    this.font = Font.load(fontName);\n    this.fontName = this.font.FontName;\n    this.customName = customName;\n  }\n\n  /**\n   * Encode the JavaScript string into this font. (JavaScript encodes strings in\n   * Unicode, but standard fonts use either WinAnsi, ZapfDingbats, or Symbol\n   * encodings)\n   */\n  encodeText(text: string): PDFHexString {\n    const glyphs = this.encodeTextAsGlyphs(text);\n    const hexCodes = new Array(glyphs.length);\n    for (let idx = 0, len = glyphs.length; idx < len; idx++) {\n      hexCodes[idx] = toHexString(glyphs[idx].code);\n    }\n    return PDFHexString.of(hexCodes.join(''));\n  }\n\n  widthOfTextAtSize(text: string, size: number): number {\n    const glyphs = this.encodeTextAsGlyphs(text);\n    let totalWidth = 0;\n\n    for (let idx = 0, len = glyphs.length; idx < len; idx++) {\n      const left = glyphs[idx].name;\n      const right = (glyphs[idx + 1] || {}).name;\n      const kernAmount = this.font.getXAxisKerningForPair(left, right) || 0;\n      totalWidth += this.widthOfGlyph(left) + kernAmount;\n    }\n\n    const scale = size / 1000;\n    return totalWidth * scale;\n  }\n\n  heightOfFontAtSize(\n    size: number,\n    options: { descender?: boolean } = {},\n  ): number {\n    const { descender = true } = options;\n\n    const { Ascender, Descender, FontBBox } = this.font;\n    const yTop = Ascender || FontBBox[3];\n    const yBottom = Descender || FontBBox[1];\n\n    let height = yTop - yBottom;\n    if (!descender) height += Descender || 0;\n\n    return (height / 1000) * size;\n  }\n\n  sizeOfFontAtHeight(height: number): number {\n    const { Ascender, Descender, FontBBox } = this.font;\n    const yTop = Ascender || FontBBox[3];\n    const yBottom = Descender || FontBBox[1];\n    return (1000 * height) / (yTop - yBottom);\n  }\n\n  embedIntoContext(context: PDFContext, ref?: PDFRef): PDFRef {\n    const fontDict = context.obj({\n      Type: 'Font',\n      Subtype: 'Type1',\n      BaseFont: this.customName || this.fontName,\n\n      Encoding:\n        this.encoding === Encodings.WinAnsi ? 'WinAnsiEncoding' : undefined,\n    });\n\n    if (ref) {\n      context.assign(ref, fontDict);\n      return ref;\n    } else {\n      return context.register(fontDict);\n    }\n  }\n\n  private widthOfGlyph(glyphName: string): number {\n    // Default to 250 if font doesn't specify a width\n    return this.font.getWidthOfGlyph(glyphName) || 250;\n  }\n\n  private encodeTextAsGlyphs(text: string): Glyph[] {\n    const codePoints = Array.from(text);\n    const glyphs: Glyph[] = new Array(codePoints.length);\n    for (let idx = 0, len = codePoints.length; idx < len; idx++) {\n      const codePoint = toCodePoint(codePoints[idx])!;\n      glyphs[idx] = this.encoding.encodeUnicodeCodePoint(codePoint);\n    }\n    return glyphs;\n  }\n}\n\nexport default StandardFontEmbedder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}