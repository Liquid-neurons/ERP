{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport { AcroChoiceFlags } from \"./flags\";\nimport { InvalidAcroFieldValueError, MultiSelectValueError } from \"../errors\";\nvar PDFAcroChoice = /** @class */function (_super) {\n  __extends(PDFAcroChoice, _super);\n  function PDFAcroChoice() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroChoice.prototype.setValues = function (values) {\n    if (this.hasFlag(AcroChoiceFlags.Combo) && !this.hasFlag(AcroChoiceFlags.Edit) && !this.valuesAreValid(values)) {\n      throw new InvalidAcroFieldValueError();\n    }\n    if (values.length === 0) {\n      this.dict.delete(PDFName.of('V'));\n    }\n    if (values.length === 1) {\n      this.dict.set(PDFName.of('V'), values[0]);\n    }\n    if (values.length > 1) {\n      if (!this.hasFlag(AcroChoiceFlags.MultiSelect)) {\n        throw new MultiSelectValueError();\n      }\n      this.dict.set(PDFName.of('V'), this.dict.context.obj(values));\n    }\n    this.updateSelectedIndices(values);\n  };\n  PDFAcroChoice.prototype.valuesAreValid = function (values) {\n    var options = this.getOptions();\n    var _loop_1 = function (idx, len) {\n      var val = values[idx].decodeText();\n      if (!options.find(function (o) {\n        return val === (o.display || o.value).decodeText();\n      })) {\n        return {\n          value: false\n        };\n      }\n    };\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      var state_1 = _loop_1(idx, len);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n    return true;\n  };\n  PDFAcroChoice.prototype.updateSelectedIndices = function (values) {\n    if (values.length > 1) {\n      var indices = new Array(values.length);\n      var options = this.getOptions();\n      var _loop_2 = function (idx, len) {\n        var val = values[idx].decodeText();\n        indices[idx] = options.findIndex(function (o) {\n          return val === (o.display || o.value).decodeText();\n        });\n      };\n      for (var idx = 0, len = values.length; idx < len; idx++) {\n        _loop_2(idx, len);\n      }\n      this.dict.set(PDFName.of('I'), this.dict.context.obj(indices.sort()));\n    } else {\n      this.dict.delete(PDFName.of('I'));\n    }\n  };\n  PDFAcroChoice.prototype.getValues = function () {\n    var v = this.V();\n    if (v instanceof PDFString || v instanceof PDFHexString) return [v];\n    if (v instanceof PDFArray) {\n      var values = [];\n      for (var idx = 0, len = v.size(); idx < len; idx++) {\n        var value = v.lookup(idx);\n        if (value instanceof PDFString || value instanceof PDFHexString) {\n          values.push(value);\n        }\n      }\n      return values;\n    }\n    return [];\n  };\n  PDFAcroChoice.prototype.Opt = function () {\n    return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n  };\n  PDFAcroChoice.prototype.setOptions = function (options) {\n    var newOpt = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = options[idx],\n        value = _a.value,\n        display = _a.display;\n      newOpt[idx] = this.dict.context.obj([value, display || value]);\n    }\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(newOpt));\n  };\n  PDFAcroChoice.prototype.getOptions = function () {\n    var Opt = this.Opt();\n    // Not supposed to happen - Opt _should_ always be `PDFArray | undefined`\n    if (Opt instanceof PDFString || Opt instanceof PDFHexString) {\n      return [{\n        value: Opt,\n        display: Opt\n      }];\n    }\n    if (Opt instanceof PDFArray) {\n      var res = [];\n      for (var idx = 0, len = Opt.size(); idx < len; idx++) {\n        var item = Opt.lookup(idx);\n        // If `item` is a string, use that as both the export and text value\n        if (item instanceof PDFString || item instanceof PDFHexString) {\n          res.push({\n            value: item,\n            display: item\n          });\n        }\n        // If `item` is an array of one, treat it the same as just a string,\n        // if it's an array of two then `item[0]` is the export value and\n        // `item[1]` is the text value\n        if (item instanceof PDFArray) {\n          if (item.size() > 0) {\n            var first = item.lookup(0, PDFString, PDFHexString);\n            var second = item.lookupMaybe(1, PDFString, PDFHexString);\n            res.push({\n              value: first,\n              display: second || first\n            });\n          }\n        }\n      }\n      return res;\n    }\n    return [];\n  };\n  return PDFAcroChoice;\n}(PDFAcroTerminal);\nexport default PDFAcroChoice;","map":{"version":3,"names":["PDFAcroTerminal","PDFHexString","PDFString","PDFArray","PDFName","AcroChoiceFlags","InvalidAcroFieldValueError","MultiSelectValueError","PDFAcroChoice","_super","__extends","prototype","setValues","values","hasFlag","Combo","Edit","valuesAreValid","length","dict","delete","of","set","MultiSelect","context","obj","updateSelectedIndices","options","getOptions","idx","len","val","decodeText","find","o","display","value","indices","Array","findIndex","sort","getValues","v","V","size","lookup","push","Opt","lookupMaybe","setOptions","newOpt","_a","res","item","first","second"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/acroform/PDFAcroChoice.ts"],"sourcesContent":["import PDFAcroTerminal from 'src/core/acroform/PDFAcroTerminal';\nimport PDFHexString from 'src/core/objects/PDFHexString';\nimport PDFString from 'src/core/objects/PDFString';\nimport PDFArray from 'src/core/objects/PDFArray';\nimport PDFName from 'src/core/objects/PDFName';\nimport { AcroChoiceFlags } from 'src/core/acroform/flags';\nimport {\n  InvalidAcroFieldValueError,\n  MultiSelectValueError,\n} from 'src/core/errors';\n\nclass PDFAcroChoice extends PDFAcroTerminal {\n  setValues(values: (PDFString | PDFHexString)[]) {\n    if (\n      this.hasFlag(AcroChoiceFlags.Combo) &&\n      !this.hasFlag(AcroChoiceFlags.Edit) &&\n      !this.valuesAreValid(values)\n    ) {\n      throw new InvalidAcroFieldValueError();\n    }\n\n    if (values.length === 0) {\n      this.dict.delete(PDFName.of('V'));\n    }\n    if (values.length === 1) {\n      this.dict.set(PDFName.of('V'), values[0]);\n    }\n    if (values.length > 1) {\n      if (!this.hasFlag(AcroChoiceFlags.MultiSelect)) {\n        throw new MultiSelectValueError();\n      }\n      this.dict.set(PDFName.of('V'), this.dict.context.obj(values));\n    }\n\n    this.updateSelectedIndices(values);\n  }\n\n  valuesAreValid(values: (PDFString | PDFHexString)[]): boolean {\n    const options = this.getOptions();\n    for (let idx = 0, len = values.length; idx < len; idx++) {\n      const val = values[idx].decodeText();\n      if (!options.find((o) => val === (o.display || o.value).decodeText())) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  updateSelectedIndices(values: (PDFString | PDFHexString)[]) {\n    if (values.length > 1) {\n      const indices = new Array<number>(values.length);\n      const options = this.getOptions();\n      for (let idx = 0, len = values.length; idx < len; idx++) {\n        const val = values[idx].decodeText();\n        indices[idx] = options.findIndex(\n          (o) => val === (o.display || o.value).decodeText(),\n        );\n      }\n      this.dict.set(PDFName.of('I'), this.dict.context.obj(indices.sort()));\n    } else {\n      this.dict.delete(PDFName.of('I'));\n    }\n  }\n\n  getValues(): (PDFString | PDFHexString)[] {\n    const v = this.V();\n\n    if (v instanceof PDFString || v instanceof PDFHexString) return [v];\n\n    if (v instanceof PDFArray) {\n      const values: (PDFString | PDFHexString)[] = [];\n\n      for (let idx = 0, len = v.size(); idx < len; idx++) {\n        const value = v.lookup(idx);\n        if (value instanceof PDFString || value instanceof PDFHexString) {\n          values.push(value);\n        }\n      }\n\n      return values;\n    }\n\n    return [];\n  }\n\n  Opt(): PDFArray | PDFString | PDFHexString | undefined {\n    return this.dict.lookupMaybe(\n      PDFName.of('Opt'),\n      PDFString,\n      PDFHexString,\n      PDFArray,\n    );\n  }\n\n  setOptions(\n    options: {\n      value: PDFString | PDFHexString;\n      display?: PDFString | PDFHexString;\n    }[],\n  ) {\n    const newOpt = new Array<PDFArray>(options.length);\n    for (let idx = 0, len = options.length; idx < len; idx++) {\n      const { value, display } = options[idx];\n      newOpt[idx] = this.dict.context.obj([value, display || value]);\n    }\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(newOpt));\n  }\n\n  getOptions(): {\n    value: PDFString | PDFHexString;\n    display: PDFString | PDFHexString;\n  }[] {\n    const Opt = this.Opt();\n\n    // Not supposed to happen - Opt _should_ always be `PDFArray | undefined`\n    if (Opt instanceof PDFString || Opt instanceof PDFHexString) {\n      return [{ value: Opt, display: Opt }];\n    }\n\n    if (Opt instanceof PDFArray) {\n      const res: {\n        value: PDFString | PDFHexString;\n        display: PDFString | PDFHexString;\n      }[] = [];\n\n      for (let idx = 0, len = Opt.size(); idx < len; idx++) {\n        const item = Opt.lookup(idx);\n\n        // If `item` is a string, use that as both the export and text value\n        if (item instanceof PDFString || item instanceof PDFHexString) {\n          res.push({ value: item, display: item });\n        }\n\n        // If `item` is an array of one, treat it the same as just a string,\n        // if it's an array of two then `item[0]` is the export value and\n        // `item[1]` is the text value\n        if (item instanceof PDFArray) {\n          if (item.size() > 0) {\n            const first = item.lookup(0, PDFString, PDFHexString);\n            const second = item.lookupMaybe(1, PDFString, PDFHexString);\n            res.push({ value: first, display: second || first });\n          }\n        }\n      }\n\n      return res;\n    }\n\n    return [];\n  }\n}\n\nexport default PDFAcroChoice;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}