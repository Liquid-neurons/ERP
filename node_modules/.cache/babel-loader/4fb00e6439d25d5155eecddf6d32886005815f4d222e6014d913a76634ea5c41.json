{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AFRelationship = void 0;\nvar tslib_1 = require(\"tslib\");\nvar PDFString_1 = tslib_1.__importDefault(require(\"../objects/PDFString\"));\nvar PDFHexString_1 = tslib_1.__importDefault(require(\"../objects/PDFHexString\"));\n/**\n * From the PDF-A3 specification, section **3.1. Requirements - General**.\n * See:\n * * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n */\nvar AFRelationship;\n(function (AFRelationship) {\n  AFRelationship[\"Source\"] = \"Source\";\n  AFRelationship[\"Data\"] = \"Data\";\n  AFRelationship[\"Alternative\"] = \"Alternative\";\n  AFRelationship[\"Supplement\"] = \"Supplement\";\n  AFRelationship[\"EncryptedPayload\"] = \"EncryptedPayload\";\n  AFRelationship[\"FormData\"] = \"EncryptedPayload\";\n  AFRelationship[\"Schema\"] = \"Schema\";\n  AFRelationship[\"Unspecified\"] = \"Unspecified\";\n})(AFRelationship = exports.AFRelationship || (exports.AFRelationship = {}));\nvar FileEmbedder = /** @class */function () {\n  function FileEmbedder(fileData, fileName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.fileData = fileData;\n    this.fileName = fileName;\n    this.options = options;\n  }\n  FileEmbedder.for = function (bytes, fileName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return new FileEmbedder(bytes, fileName, options);\n  };\n  FileEmbedder.prototype.embedIntoContext = function (context, ref) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a, mimeType, description, creationDate, modificationDate, afRelationship, embeddedFileStream, embeddedFileStreamRef, fileSpecDict;\n      return tslib_1.__generator(this, function (_b) {\n        _a = this.options, mimeType = _a.mimeType, description = _a.description, creationDate = _a.creationDate, modificationDate = _a.modificationDate, afRelationship = _a.afRelationship;\n        embeddedFileStream = context.flateStream(this.fileData, {\n          Type: 'EmbeddedFile',\n          Subtype: mimeType !== null && mimeType !== void 0 ? mimeType : undefined,\n          Params: {\n            Size: this.fileData.length,\n            CreationDate: creationDate ? PDFString_1.default.fromDate(creationDate) : undefined,\n            ModDate: modificationDate ? PDFString_1.default.fromDate(modificationDate) : undefined\n          }\n        });\n        embeddedFileStreamRef = context.register(embeddedFileStream);\n        fileSpecDict = context.obj({\n          Type: 'Filespec',\n          F: PDFString_1.default.of(this.fileName),\n          UF: PDFHexString_1.default.fromText(this.fileName),\n          EF: {\n            F: embeddedFileStreamRef\n          },\n          Desc: description ? PDFHexString_1.default.fromText(description) : undefined,\n          AFRelationship: afRelationship !== null && afRelationship !== void 0 ? afRelationship : undefined\n        });\n        if (ref) {\n          context.assign(ref, fileSpecDict);\n          return [2 /*return*/, ref];\n        } else {\n          return [2 /*return*/, context.register(fileSpecDict)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  return FileEmbedder;\n}();\nexports.default = FileEmbedder;","map":{"version":3,"names":["PDFString_1","tslib_1","__importDefault","require","PDFHexString_1","AFRelationship","exports","FileEmbedder","fileData","fileName","options","for","bytes","prototype","embedIntoContext","context","ref","_a","mimeType","description","creationDate","modificationDate","afRelationship","embeddedFileStream","flateStream","Type","Subtype","undefined","Params","Size","length","CreationDate","default","fromDate","ModDate","embeddedFileStreamRef","register","fileSpecDict","obj","F","of","UF","fromText","EF","Desc","assign"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/embedders/FileEmbedder.ts"],"sourcesContent":["import PDFString from 'src/core/objects/PDFString';\nimport PDFHexString from 'src/core/objects/PDFHexString';\nimport PDFContext from 'src/core/PDFContext';\nimport PDFRef from 'src/core/objects/PDFRef';\n\n/**\n * From the PDF-A3 specification, section **3.1. Requirements - General**.\n * See:\n * * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n */\nexport enum AFRelationship {\n  Source = 'Source',\n  Data = 'Data',\n  Alternative = 'Alternative',\n  Supplement = 'Supplement',\n  EncryptedPayload = 'EncryptedPayload',\n  FormData = 'EncryptedPayload',\n  Schema = 'Schema',\n  Unspecified = 'Unspecified',\n}\n\nexport interface EmbeddedFileOptions {\n  mimeType?: string;\n  description?: string;\n  creationDate?: Date;\n  modificationDate?: Date;\n  afRelationship?: AFRelationship;\n}\n\nclass FileEmbedder {\n  static for(\n    bytes: Uint8Array,\n    fileName: string,\n    options: EmbeddedFileOptions = {},\n  ) {\n    return new FileEmbedder(bytes, fileName, options);\n  }\n\n  private readonly fileData: Uint8Array;\n  readonly fileName: string;\n  readonly options: EmbeddedFileOptions;\n\n  private constructor(\n    fileData: Uint8Array,\n    fileName: string,\n    options: EmbeddedFileOptions = {},\n  ) {\n    this.fileData = fileData;\n    this.fileName = fileName;\n    this.options = options;\n  }\n\n  async embedIntoContext(context: PDFContext, ref?: PDFRef): Promise<PDFRef> {\n    const {\n      mimeType,\n      description,\n      creationDate,\n      modificationDate,\n      afRelationship,\n    } = this.options;\n\n    const embeddedFileStream = context.flateStream(this.fileData, {\n      Type: 'EmbeddedFile',\n      Subtype: mimeType ?? undefined,\n      Params: {\n        Size: this.fileData.length,\n        CreationDate: creationDate\n          ? PDFString.fromDate(creationDate)\n          : undefined,\n        ModDate: modificationDate\n          ? PDFString.fromDate(modificationDate)\n          : undefined,\n      },\n    });\n    const embeddedFileStreamRef = context.register(embeddedFileStream);\n\n    const fileSpecDict = context.obj({\n      Type: 'Filespec',\n      F: PDFString.of(this.fileName), // TODO: Assert that this is plain ASCII\n      UF: PDFHexString.fromText(this.fileName),\n      EF: { F: embeddedFileStreamRef },\n      Desc: description ? PDFHexString.fromText(description) : undefined,\n      AFRelationship: afRelationship ?? undefined,\n    });\n\n    if (ref) {\n      context.assign(ref, fileSpecDict);\n      return ref;\n    } else {\n      return context.register(fileSpecDict);\n    }\n  }\n}\n\nexport default FileEmbedder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}