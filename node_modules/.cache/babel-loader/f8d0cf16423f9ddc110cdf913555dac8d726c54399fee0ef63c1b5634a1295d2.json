{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport { PDFAcroForm } from \"../acroform\";\nimport ViewerPreferences from '../interactive/ViewerPreferences';\nvar PDFCatalog = /** @class */function (_super) {\n  __extends(PDFCatalog, _super);\n  function PDFCatalog() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFCatalog.prototype.Pages = function () {\n    return this.lookup(PDFName.of('Pages'), PDFDict);\n  };\n  PDFCatalog.prototype.AcroForm = function () {\n    return this.lookupMaybe(PDFName.of('AcroForm'), PDFDict);\n  };\n  PDFCatalog.prototype.getAcroForm = function () {\n    var dict = this.AcroForm();\n    if (!dict) return undefined;\n    return PDFAcroForm.fromDict(dict);\n  };\n  PDFCatalog.prototype.getOrCreateAcroForm = function () {\n    var acroForm = this.getAcroForm();\n    if (!acroForm) {\n      acroForm = PDFAcroForm.create(this.context);\n      var acroFormRef = this.context.register(acroForm.dict);\n      this.set(PDFName.of('AcroForm'), acroFormRef);\n    }\n    return acroForm;\n  };\n  PDFCatalog.prototype.ViewerPreferences = function () {\n    return this.lookupMaybe(PDFName.of('ViewerPreferences'), PDFDict);\n  };\n  PDFCatalog.prototype.getViewerPreferences = function () {\n    var dict = this.ViewerPreferences();\n    if (!dict) return undefined;\n    return ViewerPreferences.fromDict(dict);\n  };\n  PDFCatalog.prototype.getOrCreateViewerPreferences = function () {\n    var viewerPrefs = this.getViewerPreferences();\n    if (!viewerPrefs) {\n      viewerPrefs = ViewerPreferences.create(this.context);\n      var viewerPrefsRef = this.context.register(viewerPrefs.dict);\n      this.set(PDFName.of('ViewerPreferences'), viewerPrefsRef);\n    }\n    return viewerPrefs;\n  };\n  /**\n   * Inserts the given ref as a leaf node of this catalog's page tree at the\n   * specified index (zero-based). Also increments the `Count` of each node in\n   * the page tree hierarchy to accomodate the new page.\n   *\n   * Returns the ref of the PDFPageTree node into which `leafRef` was inserted.\n   */\n  PDFCatalog.prototype.insertLeafNode = function (leafRef, index) {\n    var pagesRef = this.get(PDFName.of('Pages'));\n    var maybeParentRef = this.Pages().insertLeafNode(leafRef, index);\n    return maybeParentRef || pagesRef;\n  };\n  PDFCatalog.prototype.removeLeafNode = function (index) {\n    this.Pages().removeLeafNode(index);\n  };\n  PDFCatalog.withContextAndPages = function (context, pages) {\n    var dict = new Map();\n    dict.set(PDFName.of('Type'), PDFName.of('Catalog'));\n    dict.set(PDFName.of('Pages'), pages);\n    return new PDFCatalog(dict, context);\n  };\n  PDFCatalog.fromMapWithContext = function (map, context) {\n    return new PDFCatalog(map, context);\n  };\n  return PDFCatalog;\n}(PDFDict);\nexport default PDFCatalog;","map":{"version":3,"names":["PDFDict","PDFName","PDFAcroForm","ViewerPreferences","PDFCatalog","_super","__extends","prototype","Pages","lookup","of","AcroForm","lookupMaybe","getAcroForm","dict","undefined","fromDict","getOrCreateAcroForm","acroForm","create","context","acroFormRef","register","set","getViewerPreferences","getOrCreateViewerPreferences","viewerPrefs","viewerPrefsRef","insertLeafNode","leafRef","index","pagesRef","get","maybeParentRef","removeLeafNode","withContextAndPages","pages","Map","fromMapWithContext","map"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/structures/PDFCatalog.ts"],"sourcesContent":["import PDFDict, { DictMap } from 'src/core/objects/PDFDict';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFRef from 'src/core/objects/PDFRef';\nimport PDFContext from 'src/core/PDFContext';\nimport PDFPageTree from 'src/core/structures/PDFPageTree';\nimport { PDFAcroForm } from 'src/core/acroform';\nimport ViewerPreferences from '../interactive/ViewerPreferences';\n\nclass PDFCatalog extends PDFDict {\n  static withContextAndPages = (\n    context: PDFContext,\n    pages: PDFPageTree | PDFRef,\n  ) => {\n    const dict = new Map();\n    dict.set(PDFName.of('Type'), PDFName.of('Catalog'));\n    dict.set(PDFName.of('Pages'), pages);\n    return new PDFCatalog(dict, context);\n  };\n\n  static fromMapWithContext = (map: DictMap, context: PDFContext) =>\n    new PDFCatalog(map, context);\n\n  Pages(): PDFPageTree {\n    return this.lookup(PDFName.of('Pages'), PDFDict) as PDFPageTree;\n  }\n\n  AcroForm(): PDFDict | undefined {\n    return this.lookupMaybe(PDFName.of('AcroForm'), PDFDict);\n  }\n\n  getAcroForm(): PDFAcroForm | undefined {\n    const dict = this.AcroForm();\n    if (!dict) return undefined;\n    return PDFAcroForm.fromDict(dict);\n  }\n\n  getOrCreateAcroForm(): PDFAcroForm {\n    let acroForm = this.getAcroForm();\n    if (!acroForm) {\n      acroForm = PDFAcroForm.create(this.context);\n      const acroFormRef = this.context.register(acroForm.dict);\n      this.set(PDFName.of('AcroForm'), acroFormRef);\n    }\n    return acroForm;\n  }\n\n  ViewerPreferences(): PDFDict | undefined {\n    return this.lookupMaybe(PDFName.of('ViewerPreferences'), PDFDict);\n  }\n\n  getViewerPreferences(): ViewerPreferences | undefined {\n    const dict = this.ViewerPreferences();\n    if (!dict) return undefined;\n    return ViewerPreferences.fromDict(dict);\n  }\n\n  getOrCreateViewerPreferences(): ViewerPreferences {\n    let viewerPrefs = this.getViewerPreferences();\n    if (!viewerPrefs) {\n      viewerPrefs = ViewerPreferences.create(this.context);\n      const viewerPrefsRef = this.context.register(viewerPrefs.dict);\n      this.set(PDFName.of('ViewerPreferences'), viewerPrefsRef);\n    }\n    return viewerPrefs;\n  }\n\n  /**\n   * Inserts the given ref as a leaf node of this catalog's page tree at the\n   * specified index (zero-based). Also increments the `Count` of each node in\n   * the page tree hierarchy to accomodate the new page.\n   *\n   * Returns the ref of the PDFPageTree node into which `leafRef` was inserted.\n   */\n  insertLeafNode(leafRef: PDFRef, index: number): PDFRef {\n    const pagesRef = this.get(PDFName.of('Pages')) as PDFRef;\n    const maybeParentRef = this.Pages().insertLeafNode(leafRef, index);\n    return maybeParentRef || pagesRef;\n  }\n\n  removeLeafNode(index: number): void {\n    this.Pages().removeLeafNode(index);\n  }\n}\n\nexport default PDFCatalog;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}