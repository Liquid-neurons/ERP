{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCmap = void 0;\nvar utils_1 = require(\"../../utils\");\nvar unicode_1 = require(\"../../utils/unicode\");\n/** `glyphs` should be an array of unique glyphs */\nexports.createCmap = function (glyphs, glyphId) {\n  var bfChars = new Array(glyphs.length);\n  for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n    var glyph = glyphs[idx];\n    var id = cmapHexFormat(cmapHexString(glyphId(glyph)));\n    var unicode = cmapHexFormat.apply(void 0, glyph.codePoints.map(cmapCodePointFormat));\n    bfChars[idx] = [id, unicode];\n  }\n  return fillCmapTemplate(bfChars);\n};\n/* =============================== Templates ================================ */\nvar fillCmapTemplate = function (bfChars) {\n  return \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n\" + bfChars.length + \" beginbfchar\\n\" + bfChars.map(function (_a) {\n    var glyphId = _a[0],\n      codePoint = _a[1];\n    return glyphId + \" \" + codePoint;\n  }).join('\\n') + \"\\nendbfchar\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\";\n};\n/* =============================== Utilities ================================ */\nvar cmapHexFormat = function () {\n  var values = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n  return \"<\" + values.join('') + \">\";\n};\nvar cmapHexString = function (value) {\n  return utils_1.toHexStringOfMinLength(value, 4);\n};\nvar cmapCodePointFormat = function (codePoint) {\n  if (unicode_1.isWithinBMP(codePoint)) return cmapHexString(codePoint);\n  if (unicode_1.hasSurrogates(codePoint)) {\n    var hs = unicode_1.highSurrogate(codePoint);\n    var ls = unicode_1.lowSurrogate(codePoint);\n    return \"\" + cmapHexString(hs) + cmapHexString(ls);\n  }\n  var hex = utils_1.toHexString(codePoint);\n  var msg = \"0x\" + hex + \" is not a valid UTF-8 or UTF-16 codepoint.\";\n  throw new Error(msg);\n};","map":{"version":3,"names":["utils_1","require","unicode_1","exports","createCmap","glyphs","glyphId","bfChars","Array","length","idx","len","glyph","id","cmapHexFormat","cmapHexString","unicode","apply","codePoints","map","cmapCodePointFormat","fillCmapTemplate","_a","codePoint","join","values","_i","arguments","value","toHexStringOfMinLength","isWithinBMP","hasSurrogates","hs","highSurrogate","ls","lowSurrogate","hex","toHexString","msg","Error"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/embedders/CMap.ts"],"sourcesContent":["import { Glyph } from 'src/types/fontkit';\n\nimport { toHexString, toHexStringOfMinLength } from 'src/utils';\nimport {\n  hasSurrogates,\n  highSurrogate,\n  isWithinBMP,\n  lowSurrogate,\n} from 'src/utils/unicode';\n\n/** [fontId, codePoint] */\ntype BfChar = [string, string];\n\n/** `glyphs` should be an array of unique glyphs */\nexport const createCmap = (glyphs: Glyph[], glyphId: (g?: Glyph) => number) => {\n  const bfChars: BfChar[] = new Array(glyphs.length);\n  for (let idx = 0, len = glyphs.length; idx < len; idx++) {\n    const glyph = glyphs[idx];\n    const id = cmapHexFormat(cmapHexString(glyphId(glyph)));\n    const unicode = cmapHexFormat(...glyph.codePoints.map(cmapCodePointFormat));\n    bfChars[idx] = [id, unicode];\n  }\n\n  return fillCmapTemplate(bfChars);\n};\n\n/* =============================== Templates ================================ */\n\nconst fillCmapTemplate = (bfChars: BfChar[]) => `\\\n/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n${bfChars.length} beginbfchar\n${bfChars.map(([glyphId, codePoint]) => `${glyphId} ${codePoint}`).join('\\n')}\nendbfchar\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend\\\n`;\n\n/* =============================== Utilities ================================ */\n\nconst cmapHexFormat = (...values: string[]) => `<${values.join('')}>`;\n\nconst cmapHexString = (value: number) => toHexStringOfMinLength(value, 4);\n\nconst cmapCodePointFormat = (codePoint: number) => {\n  if (isWithinBMP(codePoint)) return cmapHexString(codePoint);\n\n  if (hasSurrogates(codePoint)) {\n    const hs = highSurrogate(codePoint);\n    const ls = lowSurrogate(codePoint);\n    return `${cmapHexString(hs)}${cmapHexString(ls)}`;\n  }\n\n  const hex = toHexString(codePoint);\n  const msg = `0x${hex} is not a valid UTF-8 or UTF-16 codepoint.`;\n  throw new Error(msg);\n};\n"],"mappings":";;;;;;AAEA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AAUA;AACaE,OAAA,CAAAC,UAAU,GAAG,UAACC,MAAe,EAAEC,OAA8B;EACxE,IAAMC,OAAO,GAAa,IAAIC,KAAK,CAACH,MAAM,CAACI,MAAM,CAAC;EAClD,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGN,MAAM,CAACI,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;IACvD,IAAME,KAAK,GAAGP,MAAM,CAACK,GAAG,CAAC;IACzB,IAAMG,EAAE,GAAGC,aAAa,CAACC,aAAa,CAACT,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC;IACvD,IAAMI,OAAO,GAAGF,aAAa,CAAAG,KAAA,SAAIL,KAAK,CAACM,UAAU,CAACC,GAAG,CAACC,mBAAmB,CAAC,CAAC;IAC3Eb,OAAO,CAACG,GAAG,CAAC,GAAG,CAACG,EAAE,EAAEG,OAAO,CAAC;;EAG9B,OAAOK,gBAAgB,CAACd,OAAO,CAAC;AAClC,CAAC;AAED;AAEA,IAAMc,gBAAgB,GAAG,SAAAA,CAACd,OAAiB;EAAK,4QAc9CA,OAAO,CAACE,MAAM,sBACdF,OAAO,CAACY,GAAG,CAAC,UAACG,EAAoB;QAAnBhB,OAAO,GAAAgB,EAAA;MAAEC,SAAS,GAAAD,EAAA;IAAM,OAAGhB,OAAO,SAAIiB,SAAW;EAAzB,CAAyB,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,kFAM5E;AArB+C,CAqB/C;AAED;AAEA,IAAMV,aAAa,GAAG,SAAAA,CAAA;EAAC,IAAAW,MAAA;OAAA,IAAAC,EAAA,IAAmB,EAAnBA,EAAA,GAAAC,SAAA,CAAAlB,MAAmB,EAAnBiB,EAAA,EAAmB;IAAnBD,MAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAAwB,aAAID,MAAM,CAACD,IAAI,CAAC,EAAE,CAAC,MAAG;AAAtB,CAAsB;AAErE,IAAMT,aAAa,GAAG,SAAAA,CAACa,KAAa;EAAK,OAAA5B,OAAA,CAAA6B,sBAAsB,CAACD,KAAK,EAAE,CAAC,CAAC;AAAhC,CAAgC;AAEzE,IAAMR,mBAAmB,GAAG,SAAAA,CAACG,SAAiB;EAC5C,IAAIrB,SAAA,CAAA4B,WAAW,CAACP,SAAS,CAAC,EAAE,OAAOR,aAAa,CAACQ,SAAS,CAAC;EAE3D,IAAIrB,SAAA,CAAA6B,aAAa,CAACR,SAAS,CAAC,EAAE;IAC5B,IAAMS,EAAE,GAAG9B,SAAA,CAAA+B,aAAa,CAACV,SAAS,CAAC;IACnC,IAAMW,EAAE,GAAGhC,SAAA,CAAAiC,YAAY,CAACZ,SAAS,CAAC;IAClC,OAAO,KAAGR,aAAa,CAACiB,EAAE,CAAC,GAAGjB,aAAa,CAACmB,EAAE,CAAG;;EAGnD,IAAME,GAAG,GAAGpC,OAAA,CAAAqC,WAAW,CAACd,SAAS,CAAC;EAClC,IAAMe,GAAG,GAAG,OAAKF,GAAG,+CAA4C;EAChE,MAAM,IAAIG,KAAK,CAACD,GAAG,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}