{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IsIrregular = void 0;\nvar tslib_1 = require(\"tslib\");\nvar CharCodes_1 = tslib_1.__importDefault(require(\"./CharCodes\"));\nvar Delimiters_1 = require(\"./Delimiters\");\nvar Whitespace_1 = require(\"./Whitespace\");\nexports.IsIrregular = new Uint8Array(256);\nfor (var idx = 0, len = 256; idx < len; idx++) {\n  exports.IsIrregular[idx] = Whitespace_1.IsWhitespace[idx] || Delimiters_1.IsDelimiter[idx] ? 1 : 0;\n}\nexports.IsIrregular[CharCodes_1.default.Hash] = 1;","map":{"version":3,"names":["CharCodes_1","tslib_1","__importDefault","require","Delimiters_1","Whitespace_1","exports","IsIrregular","Uint8Array","idx","len","IsWhitespace","IsDelimiter","default","Hash"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/syntax/Irregular.ts"],"sourcesContent":["import CharCodes from 'src/core/syntax/CharCodes';\nimport { IsDelimiter } from 'src/core/syntax/Delimiters';\nimport { IsWhitespace } from 'src/core/syntax/Whitespace';\n\nexport const IsIrregular = new Uint8Array(256);\n\nfor (let idx = 0, len = 256; idx < len; idx++) {\n  IsIrregular[idx] = IsWhitespace[idx] || IsDelimiter[idx] ? 1 : 0;\n}\nIsIrregular[CharCodes.Hash] = 1;\n"],"mappings":";;;;;;;AAAA,IAAAA,WAAA,GAAAC,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AAEaG,OAAA,CAAAC,WAAW,GAAG,IAAIC,UAAU,CAAC,GAAG,CAAC;AAE9C,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,GAAG,EAAED,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;EAC7CH,OAAA,CAAAC,WAAW,CAACE,GAAG,CAAC,GAAGJ,YAAA,CAAAM,YAAY,CAACF,GAAG,CAAC,IAAIL,YAAA,CAAAQ,WAAW,CAACH,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;;AAElEH,OAAA,CAAAC,WAAW,CAACP,WAAA,CAAAa,OAAS,CAACC,IAAI,CAAC,GAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}