{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFField from \"./PDFField\";\nimport { PDFAcroSignature } from \"../../core\";\nimport { assertIs } from \"../../utils\";\n/**\n * Represents a signature field of a [[PDFForm]].\n *\n * [[PDFSignature]] fields are digital signatures. `pdf-lib` does not\n * currently provide any specialized APIs for creating digital signatures or\n * reading the contents of existing digital signatures.\n */\nvar PDFSignature = /** @class */function (_super) {\n  __extends(PDFSignature, _super);\n  function PDFSignature(acroSignature, ref, doc) {\n    var _this = _super.call(this, acroSignature, ref, doc) || this;\n    assertIs(acroSignature, 'acroSignature', [[PDFAcroSignature, 'PDFAcroSignature']]);\n    _this.acroField = acroSignature;\n    return _this;\n  }\n  PDFSignature.prototype.needsAppearancesUpdate = function () {\n    return false;\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getSignature]] method, which will create an\n   * > instance of [[PDFSignature]] for you.\n   *\n   * Create an instance of [[PDFSignature]] from an existing acroSignature and\n   * ref\n   *\n   * @param acroSignature The underlying `PDFAcroSignature` for this signature.\n   * @param ref The unique reference for this signature.\n   * @param doc The document to which this signature will belong.\n   */\n  PDFSignature.of = function (acroSignature, ref, doc) {\n    return new PDFSignature(acroSignature, ref, doc);\n  };\n  return PDFSignature;\n}(PDFField);\nexport default PDFSignature;","map":{"version":3,"names":["PDFField","PDFAcroSignature","assertIs","PDFSignature","_super","__extends","acroSignature","ref","doc","_this","call","acroField","prototype","needsAppearancesUpdate","of"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/form/PDFSignature.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\nimport PDFField from 'src/api/form/PDFField';\n\nimport { PDFRef, PDFAcroSignature } from 'src/core';\nimport { assertIs } from 'src/utils';\n\n/**\n * Represents a signature field of a [[PDFForm]].\n *\n * [[PDFSignature]] fields are digital signatures. `pdf-lib` does not\n * currently provide any specialized APIs for creating digital signatures or\n * reading the contents of existing digital signatures.\n */\nexport default class PDFSignature extends PDFField {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getSignature]] method, which will create an\n   * > instance of [[PDFSignature]] for you.\n   *\n   * Create an instance of [[PDFSignature]] from an existing acroSignature and\n   * ref\n   *\n   * @param acroSignature The underlying `PDFAcroSignature` for this signature.\n   * @param ref The unique reference for this signature.\n   * @param doc The document to which this signature will belong.\n   */\n  static of = (\n    acroSignature: PDFAcroSignature,\n    ref: PDFRef,\n    doc: PDFDocument,\n  ) => new PDFSignature(acroSignature, ref, doc);\n\n  /** The low-level PDFAcroSignature wrapped by this signature. */\n  readonly acroField: PDFAcroSignature;\n\n  private constructor(\n    acroSignature: PDFAcroSignature,\n    ref: PDFRef,\n    doc: PDFDocument,\n  ) {\n    super(acroSignature, ref, doc);\n\n    assertIs(acroSignature, 'acroSignature', [\n      [PDFAcroSignature, 'PDFAcroSignature'],\n    ]);\n\n    this.acroField = acroSignature;\n  }\n\n  needsAppearancesUpdate() {\n    return false;\n  }\n}\n"],"mappings":";AACA,OAAOA,QAAQ;AAEf,SAAiBC,gBAAgB,QAAE;AACnC,SAASC,QAAQ,QAAE;AAEnB;;;;;;;AAOA,IAAAC,YAAA,0BAAAC,MAAA;EAA0CC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EAsBxC,SAAAD,aACEG,aAA+B,EAC/BC,GAAW,EACXC,GAAgB;IAHlB,IAAAC,KAAA,GAKEL,MAAA,CAAAM,IAAA,OAAMJ,aAAa,EAAEC,GAAG,EAAEC,GAAG,CAAC;IAE9BN,QAAQ,CAACI,aAAa,EAAE,eAAe,EAAE,CACvC,CAACL,gBAAgB,EAAE,kBAAkB,CAAC,CACvC,CAAC;IAEFQ,KAAI,CAACE,SAAS,GAAGL,aAAa;;EAChC;EAEAH,YAAA,CAAAS,SAAA,CAAAC,sBAAsB,GAAtB;IACE,OAAO,KAAK;EACd,CAAC;EArCD;;;;;;;;;;;;EAYOV,YAAA,CAAAW,EAAE,GAAG,UACVR,aAA+B,EAC/BC,GAAW,EACXC,GAAgB;IACb,WAAIL,YAAY,CAACG,aAAa,EAAEC,GAAG,EAAEC,GAAG,CAAC;EAAzC,CAAyC;EAsBhD,OAAAL,YAAC;CAAA,CAvCyCH,QAAQ;eAA7BG,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}