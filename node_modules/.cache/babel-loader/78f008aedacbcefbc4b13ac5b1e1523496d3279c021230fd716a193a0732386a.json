{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toUint8Array = exports.canBeConvertedToUint8Array = exports.pluckIndices = exports.range = exports.sum = exports.reverseArray = exports.sortedUniq = exports.byAscendingId = exports.arrayAsString = exports.mergeUint8Arrays = exports.mergeIntoTypedArray = exports.typedArrayFor = exports.last = void 0;\nvar base64_1 = require(\"./base64\");\nvar strings_1 = require(\"./strings\");\nexports.last = function (array) {\n  return array[array.length - 1];\n};\n// export const dropLast = <T>(array: T[]): T[] =>\n// array.slice(0, array.length - 1);\nexports.typedArrayFor = function (value) {\n  if (value instanceof Uint8Array) return value;\n  var length = value.length;\n  var typedArray = new Uint8Array(length);\n  for (var idx = 0; idx < length; idx++) {\n    typedArray[idx] = value.charCodeAt(idx);\n  }\n  return typedArray;\n};\nexports.mergeIntoTypedArray = function () {\n  var arrays = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    arrays[_i] = arguments[_i];\n  }\n  var arrayCount = arrays.length;\n  var typedArrays = [];\n  for (var idx = 0; idx < arrayCount; idx++) {\n    var element = arrays[idx];\n    typedArrays[idx] = element instanceof Uint8Array ? element : exports.typedArrayFor(element);\n  }\n  var totalSize = 0;\n  for (var idx = 0; idx < arrayCount; idx++) {\n    totalSize += arrays[idx].length;\n  }\n  var merged = new Uint8Array(totalSize);\n  var offset = 0;\n  for (var arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n    var arr = typedArrays[arrIdx];\n    for (var byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n      merged[offset++] = arr[byteIdx];\n    }\n  }\n  return merged;\n};\nexports.mergeUint8Arrays = function (arrays) {\n  var totalSize = 0;\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    totalSize += arrays[idx].length;\n  }\n  var mergedBuffer = new Uint8Array(totalSize);\n  var offset = 0;\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    var array = arrays[idx];\n    mergedBuffer.set(array, offset);\n    offset += array.length;\n  }\n  return mergedBuffer;\n};\nexports.arrayAsString = function (array) {\n  var str = '';\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    str += strings_1.charFromCode(array[idx]);\n  }\n  return str;\n};\nexports.byAscendingId = function (a, b) {\n  return a.id - b.id;\n};\nexports.sortedUniq = function (array, indexer) {\n  var uniq = [];\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    var curr = array[idx];\n    var prev = array[idx - 1];\n    if (idx === 0 || indexer(curr) !== indexer(prev)) {\n      uniq.push(curr);\n    }\n  }\n  return uniq;\n};\n// Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n// to negate the need for this function. However, not all runtimes support this\n// method (e.g. React Native). This function compensates for that fact.\nexports.reverseArray = function (array) {\n  var arrayLen = array.length;\n  for (var idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n    var leftIdx = idx;\n    var rightIdx = arrayLen - idx - 1;\n    var temp = array[idx];\n    array[leftIdx] = array[rightIdx];\n    array[rightIdx] = temp;\n  }\n  return array;\n};\nexports.sum = function (array) {\n  var total = 0;\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    total += array[idx];\n  }\n  return total;\n};\nexports.range = function (start, end) {\n  var arr = new Array(end - start);\n  for (var idx = 0, len = arr.length; idx < len; idx++) {\n    arr[idx] = start + idx;\n  }\n  return arr;\n};\nexports.pluckIndices = function (arr, indices) {\n  var plucked = new Array(indices.length);\n  for (var idx = 0, len = indices.length; idx < len; idx++) {\n    plucked[idx] = arr[indices[idx]];\n  }\n  return plucked;\n};\nexports.canBeConvertedToUint8Array = function (input) {\n  return input instanceof Uint8Array || input instanceof ArrayBuffer || typeof input === 'string';\n};\nexports.toUint8Array = function (input) {\n  if (typeof input === 'string') {\n    return base64_1.decodeFromBase64DataUri(input);\n  } else if (input instanceof ArrayBuffer) {\n    return new Uint8Array(input);\n  } else if (input instanceof Uint8Array) {\n    return input;\n  } else {\n    throw new TypeError('`input` must be one of `string | ArrayBuffer | Uint8Array`');\n  }\n};","map":{"version":3,"names":["base64_1","require","strings_1","exports","last","array","length","typedArrayFor","value","Uint8Array","typedArray","idx","charCodeAt","mergeIntoTypedArray","arrays","_i","arguments","arrayCount","typedArrays","element","totalSize","merged","offset","arrIdx","arr","byteIdx","arrLen","mergeUint8Arrays","len","mergedBuffer","set","arrayAsString","str","charFromCode","byAscendingId","a","b","id","sortedUniq","indexer","uniq","curr","prev","push","reverseArray","arrayLen","Math","floor","leftIdx","rightIdx","temp","sum","total","range","start","end","Array","pluckIndices","indices","plucked","canBeConvertedToUint8Array","input","ArrayBuffer","toUint8Array","decodeFromBase64DataUri","TypeError"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/utils/arrays.ts"],"sourcesContent":["import { decodeFromBase64DataUri } from 'src/utils/base64';\nimport { charFromCode } from 'src/utils/strings';\n\nexport const last = <T>(array: T[]): T => array[array.length - 1];\n\n// export const dropLast = <T>(array: T[]): T[] =>\n// array.slice(0, array.length - 1);\n\nexport const typedArrayFor = (value: string | Uint8Array): Uint8Array => {\n  if (value instanceof Uint8Array) return value;\n  const length = value.length;\n  const typedArray = new Uint8Array(length);\n  for (let idx = 0; idx < length; idx++) {\n    typedArray[idx] = value.charCodeAt(idx);\n  }\n  return typedArray;\n};\n\nexport const mergeIntoTypedArray = (...arrays: (string | Uint8Array)[]) => {\n  const arrayCount = arrays.length;\n\n  const typedArrays: Uint8Array[] = [];\n  for (let idx = 0; idx < arrayCount; idx++) {\n    const element = arrays[idx];\n    typedArrays[idx] =\n      element instanceof Uint8Array ? element : typedArrayFor(element);\n  }\n\n  let totalSize = 0;\n  for (let idx = 0; idx < arrayCount; idx++) {\n    totalSize += arrays[idx].length;\n  }\n\n  const merged = new Uint8Array(totalSize);\n  let offset = 0;\n  for (let arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n    const arr = typedArrays[arrIdx];\n    for (let byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n      merged[offset++] = arr[byteIdx];\n    }\n  }\n\n  return merged;\n};\n\nexport const mergeUint8Arrays = (arrays: Uint8Array[]): Uint8Array => {\n  let totalSize = 0;\n  for (let idx = 0, len = arrays.length; idx < len; idx++) {\n    totalSize += arrays[idx].length;\n  }\n\n  const mergedBuffer = new Uint8Array(totalSize);\n  let offset = 0;\n  for (let idx = 0, len = arrays.length; idx < len; idx++) {\n    const array = arrays[idx];\n    mergedBuffer.set(array, offset);\n    offset += array.length;\n  }\n\n  return mergedBuffer;\n};\n\nexport const arrayAsString = (array: Uint8Array | number[]): string => {\n  let str = '';\n  for (let idx = 0, len = array.length; idx < len; idx++) {\n    str += charFromCode(array[idx]);\n  }\n  return str;\n};\n\nexport const byAscendingId = <T extends { id: any }>(a: T, b: T) => a.id - b.id;\n\nexport const sortedUniq = <T>(array: T[], indexer: (elem: T) => any): T[] => {\n  const uniq: T[] = [];\n\n  for (let idx = 0, len = array.length; idx < len; idx++) {\n    const curr = array[idx];\n    const prev = array[idx - 1];\n    if (idx === 0 || indexer(curr) !== indexer(prev)) {\n      uniq.push(curr);\n    }\n  }\n\n  return uniq;\n};\n\n// Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n// to negate the need for this function. However, not all runtimes support this\n// method (e.g. React Native). This function compensates for that fact.\nexport const reverseArray = (array: Uint8Array) => {\n  const arrayLen = array.length;\n  for (let idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n    const leftIdx = idx;\n    const rightIdx = arrayLen - idx - 1;\n    const temp = array[idx];\n\n    array[leftIdx] = array[rightIdx];\n    array[rightIdx] = temp;\n  }\n  return array;\n};\n\nexport const sum = (array: number[] | Uint8Array): number => {\n  let total = 0;\n  for (let idx = 0, len = array.length; idx < len; idx++) {\n    total += array[idx];\n  }\n  return total;\n};\n\nexport const range = (start: number, end: number): number[] => {\n  const arr = new Array(end - start);\n  for (let idx = 0, len = arr.length; idx < len; idx++) {\n    arr[idx] = start + idx;\n  }\n  return arr;\n};\n\nexport const pluckIndices = <T>(arr: T[], indices: number[]) => {\n  const plucked = new Array<T>(indices.length);\n  for (let idx = 0, len = indices.length; idx < len; idx++) {\n    plucked[idx] = arr[indices[idx]];\n  }\n  return plucked;\n};\n\nexport const canBeConvertedToUint8Array = (\n  input: any,\n): input is string | ArrayBuffer | Uint8Array =>\n  input instanceof Uint8Array ||\n  input instanceof ArrayBuffer ||\n  typeof input === 'string';\n\nexport const toUint8Array = (input: string | ArrayBuffer | Uint8Array) => {\n  if (typeof input === 'string') {\n    return decodeFromBase64DataUri(input);\n  } else if (input instanceof ArrayBuffer) {\n    return new Uint8Array(input);\n  } else if (input instanceof Uint8Array) {\n    return input;\n  } else {\n    throw new TypeError(\n      '`input` must be one of `string | ArrayBuffer | Uint8Array`',\n    );\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}