{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"../errors\");\nvar PDFObject_1 = tslib_1.__importDefault(require(\"./PDFObject\"));\nvar CharCodes_1 = tslib_1.__importDefault(require(\"../syntax/CharCodes\"));\nvar Irregular_1 = require(\"../syntax/Irregular\");\nvar utils_1 = require(\"../../utils\");\nvar decodeName = function (name) {\n  return name.replace(/#([\\dABCDEF]{2})/g, function (_, hex) {\n    return utils_1.charFromHexCode(hex);\n  });\n};\nvar isRegularChar = function (charCode) {\n  return charCode >= CharCodes_1.default.ExclamationPoint && charCode <= CharCodes_1.default.Tilde && !Irregular_1.IsIrregular[charCode];\n};\nvar ENFORCER = {};\nvar pool = new Map();\nvar PDFName = /** @class */function (_super) {\n  tslib_1.__extends(PDFName, _super);\n  function PDFName(enforcer, name) {\n    var _this = this;\n    if (enforcer !== ENFORCER) throw new errors_1.PrivateConstructorError('PDFName');\n    _this = _super.call(this) || this;\n    var encodedName = '/';\n    for (var idx = 0, len = name.length; idx < len; idx++) {\n      var character = name[idx];\n      var code = utils_1.toCharCode(character);\n      encodedName += isRegularChar(code) ? character : \"#\" + utils_1.toHexString(code);\n    }\n    _this.encodedName = encodedName;\n    return _this;\n  }\n  PDFName.prototype.asBytes = function () {\n    var bytes = [];\n    var hex = '';\n    var escaped = false;\n    var pushByte = function (byte) {\n      if (byte !== undefined) bytes.push(byte);\n      escaped = false;\n    };\n    for (var idx = 1, len = this.encodedName.length; idx < len; idx++) {\n      var char = this.encodedName[idx];\n      var byte = utils_1.toCharCode(char);\n      var nextChar = this.encodedName[idx + 1];\n      if (!escaped) {\n        if (byte === CharCodes_1.default.Hash) escaped = true;else pushByte(byte);\n      } else {\n        if (byte >= CharCodes_1.default.Zero && byte <= CharCodes_1.default.Nine || byte >= CharCodes_1.default.a && byte <= CharCodes_1.default.f || byte >= CharCodes_1.default.A && byte <= CharCodes_1.default.F) {\n          hex += char;\n          if (hex.length === 2 || !(nextChar >= '0' && nextChar <= '9' || nextChar >= 'a' && nextChar <= 'f' || nextChar >= 'A' && nextChar <= 'F')) {\n            pushByte(parseInt(hex, 16));\n            hex = '';\n          }\n        } else {\n          pushByte(byte);\n        }\n      }\n    }\n    return new Uint8Array(bytes);\n  };\n  // TODO: This should probably use `utf8Decode()`\n  // TODO: Polyfill Array.from?\n  PDFName.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    return String.fromCharCode.apply(String, Array.from(bytes));\n  };\n  PDFName.prototype.asString = function () {\n    return this.encodedName;\n  };\n  /** @deprecated in favor of [[PDFName.asString]] */\n  PDFName.prototype.value = function () {\n    return this.encodedName;\n  };\n  PDFName.prototype.clone = function () {\n    return this;\n  };\n  PDFName.prototype.toString = function () {\n    return this.encodedName;\n  };\n  PDFName.prototype.sizeInBytes = function () {\n    return this.encodedName.length;\n  };\n  PDFName.prototype.copyBytesInto = function (buffer, offset) {\n    offset += utils_1.copyStringIntoBuffer(this.encodedName, buffer, offset);\n    return this.encodedName.length;\n  };\n  PDFName.of = function (name) {\n    var decodedValue = decodeName(name);\n    var instance = pool.get(decodedValue);\n    if (!instance) {\n      instance = new PDFName(ENFORCER, decodedValue);\n      pool.set(decodedValue, instance);\n    }\n    return instance;\n  };\n  /* tslint:disable member-ordering */\n  PDFName.Length = PDFName.of('Length');\n  PDFName.FlateDecode = PDFName.of('FlateDecode');\n  PDFName.Resources = PDFName.of('Resources');\n  PDFName.Font = PDFName.of('Font');\n  PDFName.XObject = PDFName.of('XObject');\n  PDFName.ExtGState = PDFName.of('ExtGState');\n  PDFName.Contents = PDFName.of('Contents');\n  PDFName.Type = PDFName.of('Type');\n  PDFName.Parent = PDFName.of('Parent');\n  PDFName.MediaBox = PDFName.of('MediaBox');\n  PDFName.Page = PDFName.of('Page');\n  PDFName.Annots = PDFName.of('Annots');\n  PDFName.TrimBox = PDFName.of('TrimBox');\n  PDFName.ArtBox = PDFName.of('ArtBox');\n  PDFName.BleedBox = PDFName.of('BleedBox');\n  PDFName.CropBox = PDFName.of('CropBox');\n  PDFName.Rotate = PDFName.of('Rotate');\n  PDFName.Title = PDFName.of('Title');\n  PDFName.Author = PDFName.of('Author');\n  PDFName.Subject = PDFName.of('Subject');\n  PDFName.Creator = PDFName.of('Creator');\n  PDFName.Keywords = PDFName.of('Keywords');\n  PDFName.Producer = PDFName.of('Producer');\n  PDFName.CreationDate = PDFName.of('CreationDate');\n  PDFName.ModDate = PDFName.of('ModDate');\n  return PDFName;\n}(PDFObject_1.default);\nexports.default = PDFName;","map":{"version":3,"names":["errors_1","require","PDFObject_1","tslib_1","__importDefault","CharCodes_1","Irregular_1","utils_1","decodeName","name","replace","_","hex","charFromHexCode","isRegularChar","charCode","default","ExclamationPoint","Tilde","IsIrregular","ENFORCER","pool","Map","PDFName","_super","__extends","enforcer","_this","PrivateConstructorError","call","encodedName","idx","len","length","character","code","toCharCode","toHexString","prototype","asBytes","bytes","escaped","pushByte","byte","undefined","push","char","nextChar","Hash","Zero","Nine","a","f","A","F","parseInt","Uint8Array","decodeText","String","fromCharCode","apply","Array","from","asString","value","clone","toString","sizeInBytes","copyBytesInto","buffer","offset","copyStringIntoBuffer","of","decodedValue","instance","get","set","Length","FlateDecode","Resources","Font","XObject","ExtGState","Contents","Type","Parent","MediaBox","Page","Annots","TrimBox","ArtBox","BleedBox","CropBox","Rotate","Title","Author","Subject","Creator","Keywords","Producer","CreationDate","ModDate","exports"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/objects/PDFName.ts"],"sourcesContent":["import { PrivateConstructorError } from 'src/core/errors';\nimport PDFObject from 'src/core/objects/PDFObject';\nimport CharCodes from 'src/core/syntax/CharCodes';\nimport { IsIrregular } from 'src/core/syntax/Irregular';\nimport {\n  charFromHexCode,\n  copyStringIntoBuffer,\n  toCharCode,\n  toHexString,\n} from 'src/utils';\n\nconst decodeName = (name: string) =>\n  name.replace(/#([\\dABCDEF]{2})/g, (_, hex) => charFromHexCode(hex));\n\nconst isRegularChar = (charCode: number) =>\n  charCode >= CharCodes.ExclamationPoint &&\n  charCode <= CharCodes.Tilde &&\n  !IsIrregular[charCode];\n\nconst ENFORCER = {};\nconst pool = new Map<string, PDFName>();\n\nclass PDFName extends PDFObject {\n  static of = (name: string): PDFName => {\n    const decodedValue = decodeName(name);\n\n    let instance = pool.get(decodedValue);\n    if (!instance) {\n      instance = new PDFName(ENFORCER, decodedValue);\n      pool.set(decodedValue, instance);\n    }\n\n    return instance;\n  };\n\n  /* tslint:disable member-ordering */\n  static readonly Length = PDFName.of('Length');\n  static readonly FlateDecode = PDFName.of('FlateDecode');\n  static readonly Resources = PDFName.of('Resources');\n  static readonly Font = PDFName.of('Font');\n  static readonly XObject = PDFName.of('XObject');\n  static readonly ExtGState = PDFName.of('ExtGState');\n  static readonly Contents = PDFName.of('Contents');\n  static readonly Type = PDFName.of('Type');\n  static readonly Parent = PDFName.of('Parent');\n  static readonly MediaBox = PDFName.of('MediaBox');\n  static readonly Page = PDFName.of('Page');\n  static readonly Annots = PDFName.of('Annots');\n  static readonly TrimBox = PDFName.of('TrimBox');\n  static readonly ArtBox = PDFName.of('ArtBox');\n  static readonly BleedBox = PDFName.of('BleedBox');\n  static readonly CropBox = PDFName.of('CropBox');\n  static readonly Rotate = PDFName.of('Rotate');\n  static readonly Title = PDFName.of('Title');\n  static readonly Author = PDFName.of('Author');\n  static readonly Subject = PDFName.of('Subject');\n  static readonly Creator = PDFName.of('Creator');\n  static readonly Keywords = PDFName.of('Keywords');\n  static readonly Producer = PDFName.of('Producer');\n  static readonly CreationDate = PDFName.of('CreationDate');\n  static readonly ModDate = PDFName.of('ModDate');\n  /* tslint:enable member-ordering */\n\n  private readonly encodedName: string;\n\n  private constructor(enforcer: any, name: string) {\n    if (enforcer !== ENFORCER) throw new PrivateConstructorError('PDFName');\n    super();\n\n    let encodedName = '/';\n    for (let idx = 0, len = name.length; idx < len; idx++) {\n      const character = name[idx];\n      const code = toCharCode(character);\n      encodedName += isRegularChar(code) ? character : `#${toHexString(code)}`;\n    }\n\n    this.encodedName = encodedName;\n  }\n\n  asBytes(): Uint8Array {\n    const bytes: number[] = [];\n\n    let hex = '';\n    let escaped = false;\n\n    const pushByte = (byte?: number) => {\n      if (byte !== undefined) bytes.push(byte);\n      escaped = false;\n    };\n\n    for (let idx = 1, len = this.encodedName.length; idx < len; idx++) {\n      const char = this.encodedName[idx];\n      const byte = toCharCode(char);\n      const nextChar = this.encodedName[idx + 1];\n      if (!escaped) {\n        if (byte === CharCodes.Hash) escaped = true;\n        else pushByte(byte);\n      } else {\n        if (\n          (byte >= CharCodes.Zero && byte <= CharCodes.Nine) ||\n          (byte >= CharCodes.a && byte <= CharCodes.f) ||\n          (byte >= CharCodes.A && byte <= CharCodes.F)\n        ) {\n          hex += char;\n          if (\n            hex.length === 2 ||\n            !(\n              (nextChar >= '0' && nextChar <= '9') ||\n              (nextChar >= 'a' && nextChar <= 'f') ||\n              (nextChar >= 'A' && nextChar <= 'F')\n            )\n          ) {\n            pushByte(parseInt(hex, 16));\n            hex = '';\n          }\n        } else {\n          pushByte(byte);\n        }\n      }\n    }\n\n    return new Uint8Array(bytes);\n  }\n\n  // TODO: This should probably use `utf8Decode()`\n  // TODO: Polyfill Array.from?\n  decodeText(): string {\n    const bytes = this.asBytes();\n    return String.fromCharCode(...Array.from(bytes));\n  }\n\n  asString(): string {\n    return this.encodedName;\n  }\n\n  /** @deprecated in favor of [[PDFName.asString]] */\n  value(): string {\n    return this.encodedName;\n  }\n\n  clone(): PDFName {\n    return this;\n  }\n\n  toString(): string {\n    return this.encodedName;\n  }\n\n  sizeInBytes(): number {\n    return this.encodedName.length;\n  }\n\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\n    offset += copyStringIntoBuffer(this.encodedName, buffer, offset);\n    return this.encodedName.length;\n  }\n}\n\nexport default PDFName;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}