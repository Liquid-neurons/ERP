{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar PDFDict_1 = tslib_1.__importDefault(require(\"../objects/PDFDict\"));\nvar PDFArray_1 = tslib_1.__importDefault(require(\"../objects/PDFArray\"));\nvar PDFName_1 = tslib_1.__importDefault(require(\"../objects/PDFName\"));\nvar PDFAcroNonTerminal_1 = tslib_1.__importDefault(require(\"./PDFAcroNonTerminal\"));\nvar utils_1 = require(\"./utils\");\nvar PDFAcroForm = /** @class */function () {\n  function PDFAcroForm(dict) {\n    this.dict = dict;\n  }\n  PDFAcroForm.prototype.Fields = function () {\n    var fields = this.dict.lookup(PDFName_1.default.of('Fields'));\n    if (fields instanceof PDFArray_1.default) return fields;\n    return undefined;\n  };\n  PDFAcroForm.prototype.getFields = function () {\n    var Fields = this.normalizedEntries().Fields;\n    var fields = new Array(Fields.size());\n    for (var idx = 0, len = Fields.size(); idx < len; idx++) {\n      var ref = Fields.get(idx);\n      var dict = Fields.lookup(idx, PDFDict_1.default);\n      fields[idx] = [utils_1.createPDFAcroField(dict, ref), ref];\n    }\n    return fields;\n  };\n  PDFAcroForm.prototype.getAllFields = function () {\n    var allFields = [];\n    var pushFields = function (fields) {\n      if (!fields) return;\n      for (var idx = 0, len = fields.length; idx < len; idx++) {\n        var field = fields[idx];\n        allFields.push(field);\n        var fieldModel = field[0];\n        if (fieldModel instanceof PDFAcroNonTerminal_1.default) {\n          pushFields(utils_1.createPDFAcroFields(fieldModel.Kids()));\n        }\n      }\n    };\n    pushFields(this.getFields());\n    return allFields;\n  };\n  PDFAcroForm.prototype.addField = function (field) {\n    var Fields = this.normalizedEntries().Fields;\n    Fields === null || Fields === void 0 ? void 0 : Fields.push(field);\n  };\n  PDFAcroForm.prototype.removeField = function (field) {\n    var parent = field.getParent();\n    var fields = parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n    var index = fields === null || fields === void 0 ? void 0 : fields.indexOf(field.ref);\n    if (fields === undefined || index === undefined) {\n      throw new Error(\"Tried to remove inexistent field \" + field.getFullyQualifiedName());\n    }\n    fields.remove(index);\n    if (parent !== undefined && fields.size() === 0) {\n      this.removeField(parent);\n    }\n  };\n  PDFAcroForm.prototype.normalizedEntries = function () {\n    var Fields = this.Fields();\n    if (!Fields) {\n      Fields = this.dict.context.obj([]);\n      this.dict.set(PDFName_1.default.of('Fields'), Fields);\n    }\n    return {\n      Fields: Fields\n    };\n  };\n  PDFAcroForm.fromDict = function (dict) {\n    return new PDFAcroForm(dict);\n  };\n  PDFAcroForm.create = function (context) {\n    var dict = context.obj({\n      Fields: []\n    });\n    return new PDFAcroForm(dict);\n  };\n  return PDFAcroForm;\n}();\nexports.default = PDFAcroForm;","map":{"version":3,"names":["PDFDict_1","tslib_1","__importDefault","require","PDFArray_1","PDFName_1","PDFAcroNonTerminal_1","utils_1","PDFAcroForm","dict","prototype","Fields","fields","lookup","default","of","undefined","getFields","normalizedEntries","Array","size","idx","len","ref","get","createPDFAcroField","getAllFields","allFields","pushFields","length","field","push","fieldModel","createPDFAcroFields","Kids","addField","removeField","parent","getParent","index","indexOf","Error","getFullyQualifiedName","remove","context","obj","set","fromDict","create","exports"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/core/acroform/PDFAcroForm.ts"],"sourcesContent":["import PDFContext from 'src/core/PDFContext';\nimport PDFDict from 'src/core/objects/PDFDict';\nimport PDFArray from 'src/core/objects/PDFArray';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFRef from 'src/core/objects/PDFRef';\nimport PDFAcroField from 'src/core/acroform/PDFAcroField';\nimport PDFAcroNonTerminal from 'src/core/acroform/PDFAcroNonTerminal';\nimport {\n  createPDFAcroField,\n  createPDFAcroFields,\n} from 'src/core/acroform/utils';\n\nclass PDFAcroForm {\n  readonly dict: PDFDict;\n\n  static fromDict = (dict: PDFDict) => new PDFAcroForm(dict);\n\n  static create = (context: PDFContext) => {\n    const dict = context.obj({ Fields: [] });\n    return new PDFAcroForm(dict);\n  };\n\n  private constructor(dict: PDFDict) {\n    this.dict = dict;\n  }\n\n  Fields(): PDFArray | undefined {\n    const fields = this.dict.lookup(PDFName.of('Fields'));\n    if (fields instanceof PDFArray) return fields;\n    return undefined;\n  }\n\n  getFields(): [PDFAcroField, PDFRef][] {\n    const { Fields } = this.normalizedEntries();\n\n    const fields = new Array(Fields.size());\n    for (let idx = 0, len = Fields.size(); idx < len; idx++) {\n      const ref = Fields.get(idx) as PDFRef;\n      const dict = Fields.lookup(idx, PDFDict);\n      fields[idx] = [createPDFAcroField(dict, ref), ref];\n    }\n\n    return fields;\n  }\n\n  getAllFields(): [PDFAcroField, PDFRef][] {\n    const allFields: [PDFAcroField, PDFRef][] = [];\n\n    const pushFields = (fields?: [PDFAcroField, PDFRef][]) => {\n      if (!fields) return;\n      for (let idx = 0, len = fields.length; idx < len; idx++) {\n        const field = fields[idx];\n        allFields.push(field);\n        const [fieldModel] = field;\n        if (fieldModel instanceof PDFAcroNonTerminal) {\n          pushFields(createPDFAcroFields(fieldModel.Kids()));\n        }\n      }\n    };\n\n    pushFields(this.getFields());\n\n    return allFields;\n  }\n\n  addField(field: PDFRef) {\n    const { Fields } = this.normalizedEntries();\n    Fields?.push(field);\n  }\n\n  removeField(field: PDFAcroField): void {\n    const parent = field.getParent();\n    const fields =\n      parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n\n    const index = fields?.indexOf(field.ref);\n    if (fields === undefined || index === undefined) {\n      throw new Error(\n        `Tried to remove inexistent field ${field.getFullyQualifiedName()}`,\n      );\n    }\n\n    fields.remove(index);\n\n    if (parent !== undefined && fields.size() === 0) {\n      this.removeField(parent);\n    }\n  }\n\n  normalizedEntries() {\n    let Fields = this.Fields();\n\n    if (!Fields) {\n      Fields = this.dict.context.obj([]);\n      this.dict.set(PDFName.of('Fields'), Fields);\n    }\n\n    return { Fields };\n  }\n}\n\nexport default PDFAcroForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}