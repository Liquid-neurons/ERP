{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"../core\");\n/**\n * Represents JavaScript that has been embedded in a [[PDFDocument]].\n */\nvar PDFJavaScript = /** @class */function () {\n  function PDFJavaScript(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all JavaScripts get embedded.\n   *\n   * Embed this JavaScript in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFJavaScript.prototype.embed = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a, catalog, context, ref, Names, Javascript, JSNames;\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            _a = this.doc, catalog = _a.catalog, context = _a.context;\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            ref = _b.sent();\n            if (!catalog.has(core_1.PDFName.of('Names'))) {\n              catalog.set(core_1.PDFName.of('Names'), context.obj({}));\n            }\n            Names = catalog.lookup(core_1.PDFName.of('Names'), core_1.PDFDict);\n            if (!Names.has(core_1.PDFName.of('JavaScript'))) {\n              Names.set(core_1.PDFName.of('JavaScript'), context.obj({}));\n            }\n            Javascript = Names.lookup(core_1.PDFName.of('JavaScript'), core_1.PDFDict);\n            if (!Javascript.has(core_1.PDFName.of('Names'))) {\n              Javascript.set(core_1.PDFName.of('Names'), context.obj([]));\n            }\n            JSNames = Javascript.lookup(core_1.PDFName.of('Names'), core_1.PDFArray);\n            JSNames.push(core_1.PDFHexString.fromText(this.embedder.scriptName));\n            JSNames.push(ref);\n            this.alreadyEmbedded = true;\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addJavaScript]] method, which will\n   * create instances of [[PDFJavaScript]] for you.\n   *\n   * Create an instance of [[PDFJavaScript]] from an existing ref and script\n   *\n   * @param ref The unique reference for this script.\n   * @param doc The document to which the script will belong.\n   * @param embedder The embedder that will be used to embed the script.\n   */\n  PDFJavaScript.of = function (ref, doc, embedder) {\n    return new PDFJavaScript(ref, doc, embedder);\n  };\n  return PDFJavaScript;\n}();\nexports.default = PDFJavaScript;","map":{"version":3,"names":["core_1","require","PDFJavaScript","ref","doc","embedder","alreadyEmbedded","prototype","embed","_a","catalog","context","embedIntoContext","_b","sent","has","PDFName","of","set","obj","Names","lookup","PDFDict","Javascript","JSNames","PDFArray","push","PDFHexString","fromText","scriptName"],"sources":["/Users/casarulez/Projects/Liquid-neurons/database_forms/data_entry_forms/node_modules/pdf-lib/src/api/PDFJavaScript.ts"],"sourcesContent":["import Embeddable from 'src/api/Embeddable';\nimport PDFDocument from 'src/api/PDFDocument';\nimport JavaScriptEmbedder from 'src/core/embedders/JavaScriptEmbedder';\nimport { PDFName, PDFArray, PDFDict, PDFHexString, PDFRef } from 'src/core';\n\n/**\n * Represents JavaScript that has been embedded in a [[PDFDocument]].\n */\nexport default class PDFJavaScript implements Embeddable {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addJavaScript]] method, which will\n   * create instances of [[PDFJavaScript]] for you.\n   *\n   * Create an instance of [[PDFJavaScript]] from an existing ref and script\n   *\n   * @param ref The unique reference for this script.\n   * @param doc The document to which the script will belong.\n   * @param embedder The embedder that will be used to embed the script.\n   */\n  static of = (ref: PDFRef, doc: PDFDocument, embedder: JavaScriptEmbedder) =>\n    new PDFJavaScript(ref, doc, embedder);\n\n  /** The unique reference assigned to this embedded script within the document. */\n  readonly ref: PDFRef;\n\n  /** The document to which this embedded script belongs. */\n  readonly doc: PDFDocument;\n\n  private alreadyEmbedded = false;\n  private readonly embedder: JavaScriptEmbedder;\n\n  private constructor(\n    ref: PDFRef,\n    doc: PDFDocument,\n    embedder: JavaScriptEmbedder,\n  ) {\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all JavaScripts get embedded.\n   *\n   * Embed this JavaScript in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  async embed(): Promise<void> {\n    if (!this.alreadyEmbedded) {\n      const { catalog, context } = this.doc;\n\n      const ref = await this.embedder.embedIntoContext(\n        this.doc.context,\n        this.ref,\n      );\n\n      if (!catalog.has(PDFName.of('Names'))) {\n        catalog.set(PDFName.of('Names'), context.obj({}));\n      }\n      const Names = catalog.lookup(PDFName.of('Names'), PDFDict);\n\n      if (!Names.has(PDFName.of('JavaScript'))) {\n        Names.set(PDFName.of('JavaScript'), context.obj({}));\n      }\n      const Javascript = Names.lookup(PDFName.of('JavaScript'), PDFDict);\n\n      if (!Javascript.has(PDFName.of('Names'))) {\n        Javascript.set(PDFName.of('Names'), context.obj([]));\n      }\n      const JSNames = Javascript.lookup(PDFName.of('Names'), PDFArray);\n\n      JSNames.push(PDFHexString.fromText(this.embedder.scriptName));\n      JSNames.push(ref);\n\n      this.alreadyEmbedded = true;\n    }\n  }\n}\n"],"mappings":";;;;;;AAGA,IAAAA,MAAA,GAAAC,OAAA;AAEA;;;AAGA,IAAAC,aAAA;EAwBE,SAAAA,cACEC,GAAW,EACXC,GAAgB,EAChBC,QAA4B;IANtB,KAAAC,eAAe,GAAG,KAAK;IAQ7B,IAAI,CAACH,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EAEA;;;;;;;;;EASMH,aAAA,CAAAK,SAAA,CAAAC,KAAK,GAAX;;;;;;iBACM,CAAC,IAAI,CAACF,eAAe,EAArB;YACIG,EAAA,GAAuB,IAAI,CAACL,GAAG,EAA7BM,OAAO,GAAAD,EAAA,CAAAC,OAAA,EAAEC,OAAO,GAAAF,EAAA,CAAAE,OAAA;YAEZ,qBAAM,IAAI,CAACN,QAAQ,CAACO,gBAAgB,CAC9C,IAAI,CAACR,GAAG,CAACO,OAAO,EAChB,IAAI,CAACR,GAAG,CACT;;YAHKA,GAAG,GAAGU,EAAA,CAAAC,IAAA,EAGX;YAED,IAAI,CAACJ,OAAO,CAACK,GAAG,CAACf,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE;cACrCP,OAAO,CAACQ,GAAG,CAAClB,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,OAAO,CAAC,EAAEN,OAAO,CAACQ,GAAG,CAAC,EAAE,CAAC,CAAC;;YAE7CC,KAAK,GAAGV,OAAO,CAACW,MAAM,CAACrB,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,OAAO,CAAC,EAAEjB,MAAA,CAAAsB,OAAO,CAAC;YAE1D,IAAI,CAACF,KAAK,CAACL,GAAG,CAACf,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,YAAY,CAAC,CAAC,EAAE;cACxCG,KAAK,CAACF,GAAG,CAAClB,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,YAAY,CAAC,EAAEN,OAAO,CAACQ,GAAG,CAAC,EAAE,CAAC,CAAC;;YAEhDI,UAAU,GAAGH,KAAK,CAACC,MAAM,CAACrB,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,YAAY,CAAC,EAAEjB,MAAA,CAAAsB,OAAO,CAAC;YAElE,IAAI,CAACC,UAAU,CAACR,GAAG,CAACf,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE;cACxCM,UAAU,CAACL,GAAG,CAAClB,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,OAAO,CAAC,EAAEN,OAAO,CAACQ,GAAG,CAAC,EAAE,CAAC,CAAC;;YAEhDK,OAAO,GAAGD,UAAU,CAACF,MAAM,CAACrB,MAAA,CAAAgB,OAAO,CAACC,EAAE,CAAC,OAAO,CAAC,EAAEjB,MAAA,CAAAyB,QAAQ,CAAC;YAEhED,OAAO,CAACE,IAAI,CAAC1B,MAAA,CAAA2B,YAAY,CAACC,QAAQ,CAAC,IAAI,CAACvB,QAAQ,CAACwB,UAAU,CAAC,CAAC;YAC7DL,OAAO,CAACE,IAAI,CAACvB,GAAG,CAAC;YAEjB,IAAI,CAACG,eAAe,GAAG,IAAI;;;;;;;GAE9B;EAvED;;;;;;;;;;;EAWOJ,aAAA,CAAAe,EAAE,GAAG,UAACd,GAAW,EAAEC,GAAgB,EAAEC,QAA4B;IACtE,WAAIH,aAAa,CAACC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,CAAC;EAArC,CAAqC;EA4DzC,OAAAH,aAAC;CAAA,CAzED;kBAAqBA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}